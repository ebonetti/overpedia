// Code generated by go-bindata. DO NOT EDIT.
// sources:
// db/base.sql
// db/indices/alternate.sql
// db/indices/default.sql
// db/query-pages.sql
// db/query-toptenbyyear.sql
// db/test.sql
// db/types.sql
// templates/data.html
// templates/page.html
// templates/pagelist.html
// templates/topten.html

package exporter


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDbBasesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x5d\x4f\xe3\x38\x14\x7d\xcf\xaf\xb8\xfb\xd4\x04\x65\x0b\x54\x5a" +
	"\x69\xb5\x9d\x3e\x78\x52\x17\xb2\x9b\x26\x55\x92\x32\x74\x56\xa3\xca\x34\x06\x3c\x93\x36\x51\xec\xc2\xa0\xd5\xfe" +
	"\xf7\x95\x9d\x2f\xb7\x49\x0b\xd2\x4a\x3c\x80\x7d\xee\x87\x8f\xcf\x3d\x31\xd3\x30\x58\x40\xe4\xdc\xe2\x39\x02\x77" +
	"\x06\xf8\xde\x8d\xe2\x08\x5e\x47\x19\x38\x28\x72\xd0\x14\x8f\x0d\x27\xc4\x28\xc6\x35\xe8\x75\x94\x8d\x8d\x7a\xcd" +
	"\x09\x3c\x0f\xc5\x6e\xe0\xcb\xe5\xe1\xf6\x6d\x93\xa5\x29\x11\x14\x4c\x2f\x70\x90\x87\x61\x02\x03\xba\x5b\x2f\xa3" +
	"\xe1\x32\x9e\xfd\xfa\xfb\xc0\x1a\x1b\xc6\xe5\xc5\x82\x3c\x51\x0e\x05\xcd\x0b\xca\xe9\x4e\x70\x78\x65\x3f\x58\x4e" +
	"\x13\x46\x80\x14\x82\x6d\x52\xca\x81\xec\x12\xc8\x5e\x68\x51\x2e\x8b\x2c\x67\x1b\x7e\x71\x59\x97\x8d\xd1\x67\x0f" +
	"\xab\x92\xb9\xca\x65\x1a\x00\x00\xf2\xf7\x35\x4b\xc0\xf5\x63\x7c\x83\x43\xf0\x83\x18\xfc\xa5\xe7\xd9\xed\xae\x60" +
	"\x22\xa5\x70\x87\x42\xe7\x16\x85\xe6\x6f\xd7\x23\xab\x3a\x02\x3e\x3c\x80\x16\x42\x1e\xb8\x28\xc8\x46\x40\x8c\xef" +
	"\xe3\xf3\xe8\x82\xee\xc4\x3b\x0d\xf0\x6c\xc3\x48\xfa\x7d\xbf\xcd\x79\x0d\xfb\xfb\x5b\x03\x84\x29\x9e\xa1\xa5\x17" +
	"\xc3\xe0\x9f\x7f\x07\x5a\x54\x42\x73\xf1\xdc\x49\xdb\xa0\x47\x1a\x74\x53\x50\x22\x58\xb6\x7b\xa3\xa4\xa8\x23\x8c" +
	"\x92\xf7\x90\xbe\x30\xce\xb2\xdd\x79\xee\x81\x26\x4c\x70\xe8\x23\xbb\x68\x12\x7c\x84\xf0\x82\xbe\xac\x39\x2d\x18" +
	"\x49\x4f\x42\xf6\x9c\x16\x5a\x02\x7d\x91\x3f\x64\x02\x3e\x07\x81\x87\x91\xdf\x93\x78\xf3\x4c\x8a\x57\xca\x9e\x9e" +
	"\x05\xcc\xbc\x00\xc5\x27\x20\x09\x7b\x7c\x3c\x09\x60\xbc\xa0\x2f\xb4\x10\x67\xfa\xaf\x21\x34\x39\xd3\x8b\x60\x5b" +
	"\xca\x05\xd9\xe6\x10\xbb\x73\x1c\xc5\x68\xbe\xe8\x41\x75\x2e\xa4\x43\xaf\xae\x8d\x0f\x2b\xba\x4f\x50\xd7\x57\xdf" +
	"\x64\x05\x89\x31\x2e\x2f\xa6\xfb\xed\xf6\x4d\x81\x25\xb5\x09\x3c\x66\x05\x3c\xa5\xd9\x03\x49\x81\x0b\x22\x18\x17" +
	"\xe5\x6c\xb9\x7e\x84\xc3\x58\x26\x09\xda\xd1\x32\xab\x16\xec\x56\xde\xb6\xa6\x49\x0b\xee\x90\xb7\xc4\x11\x98\x57" +
	"\x36\xc8\x1f\x6b\x6c\x5c\x5e\x78\x19\x49\xd8\xee\x09\x12\x22\xc8\x70\x38\x94\x52\x0a\x16\xab\x9e\xa4\xed\x4c\xda" +
	"\x07\xb3\x66\x37\xc5\x2c\x98\x85\xc1\x1c\xfe\x18\xa8\xc0\x47\x96\xd2\x9c\x88\xe7\x01\x7c\x71\xe3\x5b\x70\xa2\x3b" +
	"\xb8\xc5\x68\x8a\xc3\x71\x5b\xa1\x11\x69\x53\x45\x17\xa2\x5d\x49\xce\x6e\x55\x66\x1f\xea\xc9\xd6\xb5\x63\x1f\xa8" +
	"\xc0\x3e\xd2\x84\x7d\x78\xfd\x4d\xaf\x4d\x0b\x67\xfa\x5d\x2e\xa6\xb5\x8f\xb4\x63\x15\xe1\xb8\xd5\xca\x44\x3a\x70" +
	"\x0c\x26\xbe\x8f\x43\xe4\xc4\xe6\x0a\xa3\xb0\xac\x90\x10\x41\xd7\xa2\xd8\xef\x36\xe6\x40\x42\x07\xc7\x8d\x58\x80" +
	"\xa2\x5a\x0d\x52\x6a\xc8\x8b\x71\x78\xec\x9a\x4a\x1f\x68\x3a\x85\x45\xe8\xce\x51\xb8\x82\xbf\xf0\x0a\x6a\xd2\x2c" +
	"\xbb\xd9\x9e\x05\x21\x76\x6f\xfc\x7a\xbb\xb9\x98\x10\xcf\x70\x88\x7d\x07\x47\xba\x13\xd7\xf1\x07\x27\x2c\xf7\xe4" +
	"\xe9\x34\x3b\x9b\xc0\x35\x7c\xb9\xc5\x21\x6e\xa5\x35\xb9\x02\xe4\x4f\x6b\xd9\xff\x32\xb9\x6a\xc7\xc4\xf5\xa7\xf8" +
	"\x1e\xaa\x0f\x8d\x5e\x4b\x25\xb3\x35\x7b\x57\xb3\xe5\x2d\x23\x79\xe4\x16\xbc\x8c\x5c\xff\x46\xa1\xf8\x3a\xff\x41" +
	"\xdf\xc6\x06\xf2\x91\xb7\xfa\xaa\x35\xd8\x43\x54\x73\x35\x67\xc9\x3a\x50\xd8\x69\xe6\x4a\x62\xde\xe1\xad\x8a\x56" +
	"\x7d\x38\x81\xb7\x9c\xfb\xad\x22\x24\x81\xb5\x05\x9c\x60\x46\xb3\xe8\x4a\xe9\xea\xfe\xb5\xa3\x36\x88\x3e\x0b\x92" +
	"\x12\x7a\xc8\xf6\xbb\x84\x03\x8a\x8c\x08\x7b\xd8\x89\x61\xee\xfa\x66\xdd\x83\x52\xd6\x96\xa9\xcf\x8b\x0d\x73\x74" +
	"\x7f\xb4\x43\x7e\xaa\x1d\xa3\x8e\xd1\x86\xa3\x0c\x6c\x16\xda\xe8\x23\x0c\xf9\xd9\x2c\x18\x4a\xee\x9d\xae\xeb\x51" +
	"\xd7\xbd\xaf\x1a\x3d\x6d\xe9\x63\xc3\xd7\x4a\xd3\x3c\xf6\x53\xbb\xf3\x41\xb5\x60\x02\xe6\x7a\xd8\x01\x42\xb5\x76" +
	"\x80\x35\xa0\x6c\xaa\xb4\x72\xd5\x83\x04\xd5\x18\x79\xd6\x72\xab\xa2\xb9\x71\xda\x8a\x5e\x09\xe8\x64\x55\x01\x0d" +
	"\x2b\xed\x75\xd9\x47\x73\x5d\x0f\x56\x33\x6d\x9f\x60\x04\x6a\x67\xe9\xcb\xe7\x1a\xf2\xbc\xde\xda\x9d\xbb\x7e\xa7" +
	"\x83\xc3\x01\xb9\x09\x83\xe5\x02\x3e\xaf\xea\x7c\x56\x6f\x0d\x27\x40\x1e\x8e\x1c\x6c\xf2\xef\x5d\x2a\xe5\xcb\xa7" +
	"\x2d\x7c\x40\xf2\x99\x56\x0e\x88\xf5\xf0\x2c\x86\x3f\x03\xd7\xef\x88\x84\x7f\xaf\x7c\xc0\xd4\x1a\xb4\x60\x5d\xd1" +
	"\x55\xdd\x22\x4b\x60\x52\x3a\x45\xfd\xf7\xd8\x50\xcf\xe4\xde\x4f\xf5\xf8\x9c\xbb\xea\x63\xdc\x7d\x9e\xf5\xcf\xf3" +
	"\x1c\xc5\x38\x74\x91\xe7\x7e\xc5\x53\xb8\x73\xf1\x97\x26\xa9\x28\x28\xd5\xe6\xb2\xfb\x69\x6e\xe7\xa5\xec\x41\xdd" +
	"\x75\x03\x1f\x0d\xdb\x88\xeb\xe1\xa9\x20\xc8\xaf\x5b\xf2\xaa\x95\x91\xb4\x17\x15\xa3\xe2\x27\x2a\x55\x15\x7e\x6c" +
	"\x44\x75\xa3\xeb\x4d\xba\xe7\x42\x5a\xd0\x2e\xa1\x3f\x75\xe7\x56\xc7\xe8\x79\x58\x58\xe3\x8e\x6f\x2b\x68\x6b\xdd" +
	"\xdd\xbc\x5d\x1b\x97\x98\xb6\xa7\x86\x3f\xf5\x2f\x44\x79\x1c\x8d\xc1\xd1\xf0\xc2\x6e\x88\x51\x83\xf2\x69\x24\xc5" +
	"\xc7\xb8\xc2\x6b\x5a\xad\x4f\x5f\xbe\x56\x9a\x98\xf2\x8b\x23\x43\x54\xc0\xfa\x71\x9f\xa6\x25\xc4\x48\xb3\x57\x5a" +
	"\x98\x3c\x4f\x99\x58\xe7\xa4\x10\xe6\xc7\x72\xd9\x03\x18\xd8\xd7\x96\x96\x53\xad\xff\xef\x5b\xfa\x2f\x00\x00\xff" +
	"\xff\x06\x70\xcc\x52\xe9\x0d\x00\x00")

func bindataDbBasesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbBasesql,
		"db/base.sql",
	)
}



func bindataDbBasesql() (*asset, error) {
	bytes, err := bindataDbBasesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/base.sql",
		size: 3561,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1530090610, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbIndicesAlternatesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xd1\x6e\xab\x38\x10\x7d\xe7\x2b\xe6\xad\x38\x8b\x1a\xf6\x3e\xa6" +
	"\xda\x4a\xdc\xc4\x6d\x59\x51\xa8\x80\xec\xbd\xdd\x97\x88\xc2\xdc\xd6\x52\x62\xb2\xd8\x69\x9b\xbf\x5f\xd9\x4e\x88" +
	"\x49\xa0\x6d\x56\xda\xa7\x28\xc8\x33\x73\xce\x99\x63\xcf\x8c\x47\x29\xae\x1b\x14\xc8\xa5\x00\xc6\x2b\x7c\x07\xb9" +
	"\x5d\xa3\x00\xf9\x52\x48\x10\xb2\x90\x4c\x48\x56\x0a\xa8\x39\xac\x8b\x67\x14\xe0\x16\x8d\x64\xe5\x12\x05\x14\xbc" +
	"\x02\x59\xaf\x59\x29\xc8\x68\xec\x38\xd3\x94\x06\x39\x85\xfc\xf1\x81\xc2\xdb\xb7\xfa\x72\xb5\x35\xf9\x82\x0c\x68" +
	"\x3c\xbf\x07\xf7\xa2\xac\xf9\xaf\x25\x2b\xe5\x85\x07\x17\xeb\x7a\x89\x2b\x56\x5e\x90\x2b\xc7\x19\x8f\x42\x5e\xb1" +
	"\x12\x05\xac\x36\x42\x42\x85\xbf\x18\xc7\x0a\x18\x87\x02\xde\x8a\xad\xc1\xb2\x62\x42\x30\xfe\x0c\xc8\x65\xc3\x50" +
	"\x40\x59\x37\x0d\x96\x72\xb9\x55\xe7\x8b\xcd\x52\x82\xac\xc1\xbf\xf4\x47\xe3\x16\x49\xf0\x3d\x32\x50\x98\x49\xff" +
	"\xb4\xdd\x62\xd1\x40\x90\x39\x3f\xc2\xfc\x0e\x18\x2f\xeb\xd5\x7a\x89\x12\x77\x94\xf6\xf8\x14\x64\xd7\x01\x00\xc8" +
	"\x68\x44\xa7\x39\xcc\xc2\x2c\x0f\xe3\x69\xae\x25\x58\xb0\xca\x83\x06\x5f\x17\xbb\x64\xa0\x7e\x3d\xd8\x08\x6c\x16" +
	"\xac\xd2\x61\x37\x69\x72\xaf\x0b\x37\xf8\xca\x04\xab\xb9\xd0\x9f\x7f\xdc\xd1\x94\x82\xab\x62\x99\x68\xf0\x15\x1b" +
	"\x09\xd7\xe0\x43\x92\x82\xfd\x0d\x2b\x02\x41\x3c\xdb\x67\x84\x30\x83\x38\xc9\x21\x9e\x47\x91\x43\x3c\x38\x1f\xac" +
	"\xff\x01\xca\x41\x11\xf4\x91\x79\x1c\x26\x31\x04\x51\x64\x17\x18\x7d\x25\x9a\x78\xba\xfe\x20\xca\x75\xd1\x20\x97" +
	"\x8a\x5e\x90\x1d\x90\x1a\x90\xd3\x64\x1e\xe7\x6e\xcb\x63\x87\x99\x4c\x26\x37\x51\x12\xe4\x2a\xe0\x0d\xd9\xf3\x8b" +
	"\x3c\xe0\x38\xd6\xe4\xcf\x24\x8c\x75\x03\x54\x66\xd9\x20\xc2\x3c\x0b\xe3\x5b\x70\x77\x95\x88\x0e\xbd\x4d\x93\xf9" +
	"\x03\x7c\x7f\x3c\x80\x31\x08\x86\xa9\xf7\x02\x3d\x1f\xdf\x71\x75\x2b\xa9\x43\x3c\xe7\x44\x55\xac\x98\x14\x65\xbd" +
	"\xe1\x7d\x3a\x0e\x3a\xd2\xa0\x1b\x11\xb8\x09\xa3\x9c\xa6\xe0\x1a\xff\x75\xec\xf7\x07\xf8\x44\x77\xa0\x16\x4c\xb2" +
	"\x57\xd4\x45\x3c\x5d\xe0\x2b\xe1\xd7\xbb\x70\xf3\x57\x07\x7f\x7e\x01\x94\x99\xbb\x7e\x1f\xd0\x63\x4f\xc9\x72\xfd" +
	"\x57\x94\xb0\xec\x9e\xcd\xef\xdd\x0e\xb5\x1e\xb2\xfa\x90\x45\x60\x98\xd0\x07\x7d\xe9\x65\xf0\xdf\xae\x90\x95\x74" +
	"\x77\x89\x3e\x24\xdd\x77\x8d\xdc\xf6\xf3\xb5\x4f\x26\x93\x30\xce\xe9\x2d\x4d\xdb\x23\x15\xae\xe5\xcb\xce\xc3\x26" +
	"\xd9\x89\x4c\x96\x97\x3f\x51\xcb\x3a\xd9\x2b\xda\x69\xe3\xfe\xf7\xcb\xf9\x6d\x98\x69\x87\xcc\x30\x49\x8b\xc9\xd9" +
	"\xfc\xcc\x0d\x36\xf3\xec\xb8\x5d\x87\x11\x38\x99\x1c\xcd\x48\x35\x76\x3d\xdb\x18\xf6\xf3\x39\x4c\xba\x1d\xa4\x03" +
	"\x09\xbb\x2f\x96\x8e\xfc\xdd\xf7\xfd\x91\xc5\x65\xdc\xed\x3d\xfc\x06\xf7\xc1\xcf\xee\x8d\x48\xfe\xa2\xa9\xfb\x10" +
	"\xa4\x79\x98\x2b\x0c\x7b\x8b\x5b\xf2\x12\xd2\xf7\xee\x75\xdd\xab\x94\x31\xdb\xc5\xe0\xcc\xb2\x40\xeb\xe4\xf6\x3d" +
	"\x31\x92\x76\xdc\x23\x4e\xac\x43\x3c\x9d\x43\xfd\xdf\xbf\x86\x9d\x4a\x47\xaa\x58\xe6\xb2\x19\x2d\x2e\x5b\xab\xb5" +
	"\x4f\x99\xa9\xa7\xcb\x1b\x12\x76\x69\x1d\x47\x8c\xbe\xea\xb0\x64\x2b\x7c\xaa\x37\xbc\x12\x1e\x3c\x23\xc7\xa6\x90" +
	"\xb8\x10\xa8\x36\x17\x13\x50\x36\x58\x48\x56\x73\xdd\x96\x55\xf1\xae\x35\x84\x85\xab\x7f\x87\xdb\xfd\x35\xf8\xed" +
	"\x0b\x78\x36\x03\x87\x38\x9f\x54\xd2\xd6\x52\x5b\xdf\x49\xd5\xfd\xd4\x09\x22\x9a\x4d\xa9\x6b\xbc\xe0\xf9\xb6\x31" +
	"\x3a\x9d\x4c\xc3\xdb\xbb\xfc\x00\xa7\x6d\xd9\x0e\x55\x8f\x7f\xd5\xb2\x38\x4b\x93\x07\x6b\xb5\x6b\x07\xcc\x55\xbb" +
	"\x81\x86\xf1\x8c\xfe\x84\x24\xee\x59\xfd\x5a\x9f\xe8\xad\x73\x2e\xb0\x82\xa7\x2d\x44\x41\x4e\xd3\x20\x32\x50\x18" +
	"\x87\x7f\x36\xba\x51\x87\x4d\xf2\xa3\x8c\x86\x19\xcc\x68\x36\xdd\x4b\x70\x90\xe7\xd8\xce\xe4\xca\x09\xe2\x20\x7a" +
	"\xfc\xbb\x67\x2f\xbd\xfa\x37\x00\x00\xff\xff\x42\x7b\x33\xff\x8c\x0b\x00\x00")

func bindataDbIndicesAlternatesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbIndicesAlternatesql,
		"db/indices/alternate.sql",
	)
}



func bindataDbIndicesAlternatesql() (*asset, error) {
	bytes, err := bindataDbIndicesAlternatesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/indices/alternate.sql",
		size: 2956,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1530051162, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbIndicesDefaultsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xdb\x72\x9c\x46\x10\x7d\xe7\x2b\xfa\x4d\x40\xf0\xde\x2a\x95\x4a" +
	"\x49\x71\xaa\xf0\x2e\x96\x49\x21\x90\x81\x8d\xad\xbc\x6c\x61\x18\x4b\x53\x59\x2e\x61\x66\x2d\xed\xdf\xa7\x66\x86" +
	"\xcb\x2c\xcb\x65\x15\x27\x79\xda\x92\x68\xba\xcf\xe9\x3e\xd3\x3d\xcd\x5c\xf7\x51\x51\x22\x82\x32\x4a\x00\x67\x09" +
	"\x7a\x01\x7a\x2c\x10\x01\xfa\x14\x51\x20\x34\xa2\x98\x50\x1c\x13\xc8\x33\x28\xa2\x47\x44\x40\x8d\x4a\x8a\xe3\x3d" +
	"\x22\x10\x65\x09\xd0\xbc\xc0\x31\xd1\xf4\xb9\xa2\xac\x7d\xcb\x0c\x2d\x08\x1f\xee\x2d\x78\x5e\xe5\xb3\xf4\x28\xfc" +
	"\x99\x01\x58\xee\xf6\x0e\xd4\xab\x38\xcf\xbe\xee\x71\x4c\xaf\x0c\xb8\x2a\xf2\x3d\x4a\x71\x7c\xa5\xdd\x28\xca\x5c" +
	"\xb7\xb3\x04\xc7\x88\x40\x7a\x20\x14\x12\xf4\x15\x67\x28\x01\x9c\x41\x04\xcf\xd1\x51\x60\x49\x31\x21\x38\x7b\x04" +
	"\x94\xd1\x12\x23\x02\x71\x5e\x96\x28\xa6\xfb\x23\xb3\x8f\x0e\x7b\x0a\x34\x87\xc5\x6c\xa1\xcf\x1b\x24\xe6\x3b\x47" +
	"\x40\xc1\xc2\xfd\x97\xe3\x11\x45\x25\x98\x81\xf2\xc9\x0e\x3f\x40\x45\xe4\x40\x50\x49\xf2\x18\x47\xfb\xca\x8c\x21" +
	"\x56\x15\x00\x80\xc0\x72\xac\x75\x08\x1b\x3b\x08\x6d\x77\x1d\x82\xbb\x75\x9c\xeb\x6b\x99\xdc\x5c\x47\x2f\x10\xcc" +
	"\xe0\x3e\x2f\x0e\xfb\xa8\xc4\xf4\xa8\xcf\xd9\xfb\x2c\x89\x06\xcf\xd8\x0e\x27\x06\x94\xe8\xdb\xae\x8a\x0d\xec\xd7" +
	"\x00\x16\x75\x87\x13\x1e\xe6\xbd\xef\xdd\x71\x9c\x25\xfa\x86\x09\xce\x33\xc2\xff\xfd\xe9\x83\xe5\x5b\xb5\x21\xd8" +
	"\x01\xb8\x9e\x80\xc0\x9f\x6e\x5d\xdb\x73\xc1\xac\xfe\xea\x22\x6d\x73\x7d\x8a\xf7\xbf\x86\x06\xa6\xbb\xe1\x2e\x31" +
	"\x29\xd1\x37\x54\x52\xf8\x15\x16\x8a\x66\x00\xce\xe2\x3c\x2d\xf6\x88\x22\x16\xf9\x15\x39\xaf\xe1\x96\x28\xa3\x2c" +
	"\x98\x19\xb4\xd8\x07\xf0\x0e\x16\xf6\x37\xcf\x76\x39\x1b\xe6\x81\x96\x08\xc1\x36\xb0\xdd\x5b\x50\x2b\x8f\xda\x70" +
	"\x66\xf5\x69\xf7\x8c\xe6\x3f\x24\x57\xf1\x59\x8c\x14\x61\x22\x81\x17\x21\x9f\xf2\xa1\x19\x0a\x7b\x10\xe7\x87\x8c" +
	"\x32\x18\xe7\xc8\x39\xd4\x04\x15\xf4\xc9\x80\xdd\x4c\x40\x5d\x7b\x5b\x37\x54\x75\xed\xfa\xfa\xbd\xe3\x99\x21\xd7" +
	"\x58\x4e\xa3\x7d\xe3\xea\x54\x49\x14\xa7\xe8\x4b\x7e\xc8\x12\x62\x34\xb5\x20\x06\x3c\xa2\x0c\x95\x11\x45\x3b\x82" +
	"\xd8\xf9\x16\x25\x89\x4b\x14\x51\x9c\x67\x3c\x50\x1a\xbd\xb0\x5f\x0d\x76\x2a\xff\xe5\x6e\x6f\x7d\x6f\x7b\x0f\xef" +
	"\x1e\x7a\x90\x0d\xa7\x44\xb6\x95\x72\xfe\x4a\x22\x1c\xf8\x10\x08\x96\xcb\x14\x67\x69\xf4\xc2\xf8\x12\x1a\xa5\x45" +
	"\x7f\x32\x59\xdd\x53\x7c\xc2\xd0\x48\x71\xd6\xbc\x65\xc8\x2e\x2e\xc8\xa4\x74\x3e\x5b\x34\xf0\x0b\xac\x60\x22\x1f" +
	"\x0c\xc8\x9d\xed\xaa\x75\x43\xd0\x18\xde\x1a\x19\xdc\x99\x9f\x3b\x4f\x2a\xac\xdc\x4f\xfd\x5e\x03\xb4\x7e\xb9\xa5" +
	"\xd1\x78\xe8\xd8\x0c\xb2\x3b\xed\x38\xa7\x29\xc6\x89\x66\x28\xec\xbd\x67\x84\x1f\x9f\xe8\x80\x4e\x9b\x16\xc1\x9f" +
	"\x58\x9f\x43\xdf\x5c\x87\x2a\x2a\xf2\xf8\x49\x84\x51\x1d\xcb\x0c\x42\x55\xc6\x60\xa4\xd1\x9f\x68\x97\x44\x14\x71" +
	"\x91\xfd\xb0\x34\x96\xc6\x52\xd3\xde\xdc\xf2\x99\xc2\x8c\x4f\x6b\x23\x1b\x0b\x53\x4d\x9b\xff\xfc\xd3\x8f\x8b\xc5" +
	"\x8c\x2b\x4b\x00\x6c\x99\x75\x34\x71\xae\xfb\x8e\x16\x4e\xd5\x3e\x5e\x3d\x49\xca\x7d\x64\xe5\xb8\x6f\x64\x1a\xaf" +
	"\x42\x5c\x37\x89\xb3\xee\xc1\x4f\xc8\x59\x21\x3a\x1d\x6e\xf0\xa0\x75\xa3\x0e\x37\xb9\x46\x09\x3d\xae\x45\x0b\xc6" +
	"\x25\x4a\x5e\x01\xb1\x03\xae\x58\xce\x04\x18\x3e\x6a\x9a\xb9\x6e\x40\xb1\x92\x1e\xd4\xf3\x75\x02\xb1\x88\x58\x2c" +
	"\xc5\xe8\x19\x33\x59\x75\x66\x91\x80\xa3\xc9\xc7\x79\x39\x63\x94\xf9\xb8\xad\x47\x6d\xb1\x12\xff\x7b\x3b\x34\xf1" +
	"\x59\x46\x82\x22\x2a\x09\xb2\x3e\xb6\x97\x14\xeb\xe3\xba\xb2\x1e\xed\xf0\x55\x42\xa4\x1c\xd4\x41\xda\x1a\x42\xc4" +
	"\xee\x62\xfd\xcd\x11\x8a\x9a\xf7\x44\x49\x8a\x65\xef\x24\xee\x6d\xee\xc3\xa0\x18\xd7\x96\xe3\xf0\xd4\x1d\xf3\xd6" +
	"\xb2\x18\xcb\x1a\x8b\x34\x98\xc1\x91\x38\xe7\xaa\x99\x8a\xf2\xd0\x3b\x86\x9b\xf1\xd6\x3b\x0b\xbe\xbf\xa5\x34\x9d" +
	"\x84\x41\xf8\xd7\x85\x63\x3a\x56\xb0\xb6\x54\x5e\x7a\x63\xa1\x89\xe3\x74\xa2\x20\xc1\x7a\xed\x7b\x41\x20\x14\xd4" +
	"\xa5\xb4\x30\x56\x1a\xec\x76\x6a\x1b\x54\xb0\xe1\xc6\x92\x06\x64\x55\x49\xd8\x24\xe3\x86\xcf\xa8\xa9\x63\xbd\x0f" +
	"\x85\xfd\xe8\x61\x1a\xf0\xd1\x9f\x0a\xad\x9b\xdc\x5b\xeb\xbb\x93\x2b\xde\xd9\xde\x89\xe4\x6a\xe0\xfd\x6e\xf9\xa0" +
	"\xde\x9b\x7e\x68\x87\xac\xce\xec\x2c\xc9\x2d\xad\xe3\x16\x3c\x7f\x63\xf9\xcc\xaa\x76\x09\x1b\x2b\x58\xf7\x1d\xf2" +
	"\x61\xc9\x3a\xd6\xff\x4d\xa9\x35\x1e\x26\xd4\x3a\x9f\x62\xd3\x62\x66\x6c\xea\x75\xb7\x5a\x58\xcf\x68\x34\x9b\xec" +
	"\xd4\xa2\xd5\xde\x44\xc4\x14\xd1\xd5\x1a\xf6\x5c\xc2\xa6\xef\xf3\x47\xf5\xf4\xd6\x39\xaf\x88\xf7\x4e\xc9\xf1\xc6" +
	"\xda\xca\x7c\xa0\x28\x95\x60\xc7\x44\xda\xb8\xe8\xac\x06\xd3\x47\x4b\xbe\xa0\x4d\x0e\xb7\xf6\xae\xfa\x16\x56\x62" +
	"\x63\xec\x5f\x9e\xf4\x4b\x46\xae\xe4\xb9\x99\x99\x93\xdb\xb3\x7e\xb2\xdf\xd5\x15\x1f\xb6\x9f\x2e\xfd\xf0\xd2\xca" +
	"\x04\x2d\x72\xd3\x5b\xd8\xae\xea\x2e\xdb\x5c\xa5\x79\x59\x45\x6e\xae\x45\x8a\xf8\xac\x73\xc9\x26\x2a\xf6\x17\x69" +
	"\x69\xec\x59\x9e\xbb\x05\xe5\xbd\x8c\xf9\x60\x7f\xd7\x9f\x13\xc6\x2e\x82\x12\xc2\x81\xcd\xad\x73\x95\x10\x8a\xe2" +
	"\x24\xce\x94\xa7\x55\xe7\x6a\x62\x0e\x5e\xb8\x52\xf6\xd6\xfa\x32\xf8\xed\xdc\x7c\x2d\x03\x45\x53\x26\x22\x89\x75" +
	"\xb4\xc0\xf1\x59\xd4\xfa\x52\x5d\xcd\x55\xa1\xa5\x6a\xb0\x56\xc2\x3a\xa9\xa4\x6f\xdf\x7e\x08\x5b\x38\x4d\xc9\x2a" +
	"\x54\x3d\x7d\x4b\xbb\x51\x94\x8d\xef\xdd\x4b\xdf\xd4\x9a\xf5\xec\xa6\xf9\xf4\x67\xbb\x1b\xeb\x33\x78\x6e\xcf\x37" +
	"\xb7\x46\x27\xfc\x73\xdf\x96\xa0\x04\xbe\x1c\xc1\x31\x43\xcb\x37\x1d\x01\x05\x67\xf0\xd7\x81\x17\xaa\xfd\x84\x37" +
	"\xe6\xb1\xba\x8b\xb3\xf9\x54\xa7\xa0\x4d\x4f\x57\xce\xda\x8d\x62\xba\xa6\xf3\xf0\x47\xcf\x07\xc1\x9b\xbf\x03\x00" +
	"\x00\xff\xff\x8c\xa1\x3a\xf1\x05\x15\x00\x00")

func bindataDbIndicesDefaultsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbIndicesDefaultsql,
		"db/indices/default.sql",
	)
}



func bindataDbIndicesDefaultsql() (*asset, error) {
	bytes, err := bindataDbIndicesDefaultsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/indices/default.sql",
		size: 5381,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1530101134, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbQuerypagessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x5f\x6f\x9b\x3e\x14\x7d\xe7\x53\xdc\x47\xe8\x8f\x5f\xbb\xf6\xb1" +
	"\xd3\x1e\x58\xe2\xb6\x4c\x59\xa8\x80\xae\xaa\xaa\x0a\xb9\xe0\x52\x77\xc4\x20\x7c\xa3\x34\xdf\x7e\xb2\xcd\xbf\x10" +
	"\xa8\xba\xbd\x25\xbe\xff\xce\xb9\xe7\xd8\x9c\x9d\x70\xf1\x52\xd6\x1b\x8a\xbc\x14\x12\x5e\xca\x1a\x68\x8d\x3c\x2d" +
	"\x98\x74\x01\xcb\x8a\xa7\x12\xa8\xc8\x20\x2f\xca\x67\x5a\x9c\x9c\x59\xf7\x7e\x7c\xd3\x06\xbc\x08\x6c\x0b\x00\x20" +
	"\x22\x2b\xb2\x88\xa1\xa2\x39\x4b\x78\xa6\xce\x75\x46\xc2\x33\x1d\xbe\x0a\x83\x9f\xb0\xbb\x28\x4f\x55\x82\xd4\x47" +
	"\xf7\x37\x24\x24\xa6\x20\x63\x15\xbe\xc2\x37\x38\xb7\x1c\x17\x2a\x56\xa7\x4c\x20\x2f\x58\xc6\x45\xc6\x53\x76\x3c" +
	"\x05\xf7\x15\x73\xdb\x59\x2e\xec\x19\xad\x5d\xd8\x31\x9e\xbf\xa2\xab\xf3\x9a\x1e\x49\x4d\xc5\x6f\xdb\x81\xe0\x17" +
	"\x09\x61\xa7\xda\xf4\xcd\x4d\xa2\x9d\x31\x21\xd9\x28\xef\x7f\x38\x3f\xfd\xe2\x9c\x5d\x87\xc4\x8b\x49\x14\xdb\x53" +
	"\x49\x19\xfc\x07\xd3\xb5\x17\x8e\x7b\xee\xa8\x59\x26\x3c\x9e\x38\xea\xe2\x45\xfa\x64\x16\x0d\x7e\x0a\x0e\xce\xe0" +
	"\xc1\x03\x40\x46\x91\x69\x58\x53\x1b\xc3\x5d\x5f\xf5\x11\x0d\xdc\x0d\x04\x57\x81\x43\xc9\x1b\x15\x9f\xf7\x4a\x27" +
	"\x23\xbd\xbf\x5e\x06\xf7\x46\x11\xfb\xd6\x0b\x63\x3f\xf6\x83\x35\x7c\x7f\x68\x94\x35\x82\x0e\xac\x11\x84\x4b\x12" +
	"\xaa\xb8\x11\xd9\x31\x18\xcc\xd8\x7f\x69\x00\x4b\x12\x2d\x9a\x2e\xf8\x69\x18\x6e\xe7\xe9\x19\x40\xf8\x79\x44\xf3" +
	"\xbd\x0c\xb6\xe9\x9b\x40\xf3\x7c\xee\xca\xb9\x66\x10\xad\x6b\xba\x4f\x68\x9e\xdb\x0b\x4f\x79\xa5\xb9\x15\x43\xe3" +
	"\x1f\x1b\xd3\x58\xf0\x58\xe9\x39\xc7\x0c\xa4\x36\xcc\xb4\xbd\x94\xd6\xea\xcf\x86\x51\xb9\xad\xd9\x86\x09\x74\x7a" +
	"\x72\x2a\x02\x5e\xb4\xd0\xa9\x83\x14\xd9\x9b\xe5\x98\xaf\x8e\x5d\x87\xc1\xdd\xad\x6a\x71\xc0\x74\x76\x41\x1f\xee" +
	"\x68\xbc\x1e\x23\xce\x10\x4e\x47\x85\x8b\x8c\xbd\xab\xf8\xc5\x61\xb8\x63\xa4\x62\x1d\x23\x89\xf4\x63\x2a\x34\xcf" +
	"\x27\xd9\x58\x4e\x0b\xb2\x2e\x77\x09\x96\xc9\x9b\x2c\x45\x83\x4e\x17\x98\x9f\x3a\x1b\x39\x16\xed\xc3\x47\x9f\x25" +
	"\xd6\x34\xc5\x56\x8c\x26\xc6\xa5\xfe\xdb\x9e\xbe\x6c\x8b\x62\x58\x95\xd6\x4c\xbf\xf3\xda\x8e\xbd\x1b\x3b\xd2\x9b" +
	"\x3d\x7b\x47\x26\x32\x96\xa9\x60\x63\xeb\x45\xe0\xad\x48\xb4\x20\xb6\x26\x69\x2c\xf6\xf8\x74\x79\x39\xbf\xa5\xc7" +
	"\xa7\xa3\xd2\x32\xe5\xb4\x78\xdb\x6e\xaa\x51\x83\xcd\x5e\x4d\x7a\x7c\x72\xac\x0e\x84\x3a\x50\xdf\x24\xc7\xb1\xba" +
	"\x47\x44\xd3\xd1\x1f\x0f\xc0\x0a\x56\xe4\x2a\x86\x1f\x81\xbf\x86\x95\x17\x93\xd0\x5b\x1d\xca\x3d\x56\xf9\x2f\x97" +
	"\x37\xd8\x86\xde\x42\x2f\xb9\x30\x4e\x1f\x90\xe9\x25\xdf\x0a\xc1\x24\xda\x58\x69\xfc\xc9\x20\xc7\x01\xfd\xc9\x0c" +
	"\xc2\xa5\xbf\xf6\x56\x7e\xfc\x00\x89\xdd\x39\x52\xb5\xd4\x4c\x46\x2c\xef\x22\x7f\x7d\x0d\x6d\x9e\xda\x4e\x02\xc1" +
	"\x1a\xe2\xf0\x8e\x58\x3d\xfd\xd9\x1b\x30\x2e\xef\x5d\xdb\xe0\x33\xaf\x50\xfb\x4f\x2f\xe0\xab\xf5\x27\x00\x00\xff" +
	"\xff\x6b\x81\x46\x28\x0c\x08\x00\x00")

func bindataDbQuerypagessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbQuerypagessql,
		"db/query-pages.sql",
	)
}



func bindataDbQuerypagessql() (*asset, error) {
	bytes, err := bindataDbQuerypagessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/query-pages.sql",
		size: 2060,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1529248663, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbQuerytoptenbyyearsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x41\x6f\xa3\x3c\x10\xbd\xe7\x57\xcc\x11\x2a\x94\x26\xbd\x7e\xca" +
	"\x81\x2f\x61\x5b\x56\x14\x56\x40\x54\xed\xc9\x72\xc2\x88\x7a\x37\x31\x2c\x76\x94\xf2\xef\x57\x33\x80\xd3\x34\xd1" +
	"\x9e\x90\xdf\x3c\xcf\x3c\xbf\x37\x3c\x3e\xc8\xce\xaa\xfd\x01\xc1\x36\x2d\x58\xd4\xb0\xeb\xa1\x47\xd9\xc1\x9f\x13" +
	"\x76\xfd\xc3\xe3\xec\x2d\x2e\x5f\x18\x31\x10\x16\xe0\xcd\x00\x00\x8a\x28\x89\xd6\x25\xa3\x7c\xfe\x96\x67\xaf\x70" +
	"\x7e\x6a\xe6\x56\x1d\x71\xd7\x9c\x74\x65\x02\xa8\x51\x63\x27\x2d\x0a\x83\x9d\x42\xe3\x1d\x95\xa6\x0b\xc1\x51\x7e" +
	"\xd0\xd7\x07\xe1\xf1\x97\x3b\x6c\xd3\x38\x4b\x21\x4c\x92\xcf\xfd\x17\x34\x91\x87\xf8\x01\xe9\x53\xfb\x5b\x0d\xad" +
	"\xac\x51\xa8\x8a\x70\x66\x08\x55\x5d\x4b\x22\x82\x61\xe8\xed\x25\xca\xa3\xe1\x42\x85\xad\x7d\x87\x15\x2c\xb9\x73" +
	"\xdf\xe2\x6d\xe3\x4d\x5c\x94\x71\xba\x2e\xb9\x7c\xdd\x52\xe9\x4a\xed\xd1\xec\x7a\x67\xc0\x9d\xd6\x4f\xa3\xe8\xe5" +
	"\xe2\xa6\xb5\x98\xb3\x11\x20\xe6\xd4\x3b\x00\xd9\x75\xb2\x17\xb2\xae\xbd\x75\x58\x94\x9e\x67\x5b\x56\x2d\xac\xb2" +
	"\x07\x0c\x60\x3a\xca\x9d\xb1\x9d\xdc\x5b\x46\x86\xc7\x5e\x18\xca\x30\xe2\xd3\x30\xd2\x78\xec\xe9\x8e\x0f\x59\xbe" +
	"\x89\x72\xf8\xff\x27\x9c\x51\xd5\xef\x16\x36\x51\xb1\x66\x12\xfb\x02\x97\x87\x71\xc4\x93\xcd\xa3\x29\x01\x97\x93" +
	"\xb0\x8c\xf2\x30\x19\xdf\xf0\x25\xff\x81\x19\x4c\x39\x04\xe3\x1c\x47\xfd\x87\x69\x17\xe3\x78\xe1\x56\x83\x04\xf6" +
	"\x06\xc2\x74\xe3\xf2\x84\xd5\xa8\x6a\xee\x10\x2e\xf7\x2d\x52\x89\x84\xb2\x91\x8c\x7e\xc9\x60\x9a\x73\xcf\x06\x57" +
	"\x4c\xe2\xd7\xb8\x84\xe5\x82\x01\x1f\x04\x7c\xcf\xe2\x74\xd8\x67\x1a\x38\x38\x65\x5b\xd8\x16\x71\xfa\x0c\xde\xf8" +
	"\xd4\x61\x71\x9f\xf3\x6c\xfb\x83\x1a\x5f\x87\x4a\xe1\xd3\xf9\x97\x69\xf4\xdd\xff\x26\x80\xae\x39\x0b\xdb\x08\x62" +
	"\x8c\xb9\x0f\xf8\xcd\x36\x38\x7f\x8d\x4b\x57\xe9\x0a\x3f\x3a\xa9\x7f\x2b\x5d\x7f\xca\x98\xa8\xbe\x23\x49\xad\x4f" +
	"\xf2\xc0\x54\x34\x13\x99\xab\x34\xf3\x92\x3c\x2f\xe9\xf5\x63\x86\x9f\x6e\xd2\xcb\x74\xb7\x24\x7c\x72\x23\x09\xf9" +
	"\x6f\xf6\x37\x00\x00\xff\xff\xba\x35\x83\xe7\x47\x04\x00\x00")

func bindataDbQuerytoptenbyyearsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbQuerytoptenbyyearsql,
		"db/query-toptenbyyear.sql",
	)
}



func bindataDbQuerytoptenbyyearsql() (*asset, error) {
	bytes, err := bindataDbQuerytoptenbyyearsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/query-toptenbyyear.sql",
		size: 1095,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1525948399, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbTestsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xc1\x6a\xc4\x30\x0c\x44\xef\xfe\x0a\xdd\x0c\x0b\x59\x43\x8f\x0d" +
	"\x3d\xf5\x13\x0a\x3d\xf9\xa2\x38\x72\xab\xe2\xc6\x8e\xa5\x04\xfc\xf7\x25\xbb\xdd\x10\x16\x72\x93\x66\xe6\x0d\x8c" +
	"\xbb\x98\x22\x73\x82\x6e\x85\x11\x15\x23\x27\x2a\xa8\xdf\x6f\x16\x07\x71\xdb\xe5\x5e\xdc\xfb\xc7\xa7\x85\x2e\x80" +
	"\xf5\x0c\x4a\xa2\x57\x99\x93\xed\xcd\xc5\x19\xe3\x8b\x90\x42\xc1\x2f\xaa\x90\x63\xec\x8d\xf1\x0f\x41\x1e\x5d\xf0" +
	"\x7a\x6c\x06\x7b\x33\xaf\x41\x56\xdb\xdf\xd3\x95\x56\x16\xce\xd3\x29\xb1\x07\x8e\x94\xe4\xc0\x98\x7e\x96\xdf\x72" +
	"\xca\x1d\x22\xff\xa4\xf1\x0c\x03\x0a\x6d\x13\xfa\xed\xe1\x69\xe4\x40\xe2\x46\x8a\xb8\x24\xdd\x75\x6d\x85\x64\xff" +
	"\xe6\x85\x6a\xeb\x34\x17\xa5\x69\x68\x8d\xb0\x3e\x59\xf7\x4d\x37\xed\x2f\x00\x00\xff\xff\x08\x98\x32\x0e\x52\x01" +
	"\x00\x00")

func bindataDbTestsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbTestsql,
		"db/test.sql",
	)
}



func bindataDbTestsql() (*asset, error) {
	bytes, err := bindataDbTestsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/test.sql",
		size: 338,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1530094483, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbTypessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\xcd\x6e\xe2\x30\x10\x3e\x93\xa7\xf0\x11\x24\xb4\xd2\x22\xed\x69" +
	"\x4f\x5e\x30\x5b\x24\x0a\x28\x58\xa8\x08\x71\x70\x61\x4a\x2d\x92\x49\x64\x3b\x2a\x79\xfb\x2a\x9e\x44\x98\x10\xda" +
	"\x5b\x73\x9c\xef\xcf\x9f\xc7\x19\xc7\x82\x4b\xc1\xe4\x76\x25\xd8\xc7\x28\xfb\x55\x82\x32\x29\x28\x5b\x18\x48\x01" +
	"\x1d\xe3\x6b\xd6\x8f\x7a\x1b\x95\x14\xc0\x82\x6f\x3a\x5f\x72\x39\x8c\x7a\x2b\x30\x07\x40\xa7\x13\x68\x01\x13\x40" +
	"\x0b\x21\xda\x00\xb1\xc2\x73\xe8\xc4\x66\x8b\x6a\x2c\xb3\x5c\x1f\xba\xf8\x1e\x78\xe8\xe6\xd1\xd0\x92\xdc\xb6\xa0" +
	"\x4c\x3b\x24\x1a\xfc\x8d\xa2\x76\x5d\x8d\x47\xb8\xb8\x32\x87\x51\x50\xda\x52\x6b\xaf\x6b\xf0\xda\xa7\xd2\xa4\xa5" +
	"\x57\x0d\x3d\xe1\x39\x94\xd5\x84\xd6\x1d\xee\xf6\x9d\xd1\x69\x99\xab\x13\x5c\xa3\xa4\x76\x74\x8b\x1b\x1e\x8f\x9f" +
	"\x78\xdc\xff\xf3\x7b\x34\xa0\x10\xfe\x6a\x9d\x51\x07\xc7\x98\x14\x2f\x92\x66\xbe\x79\x37\x7d\x66\x09\xfc\xb7\x5c" +
	"\xce\x05\x5f\x3c\x48\x87\x8b\x03\x3c\xc2\xf1\x87\x4e\x41\xc3\x69\x91\x24\x5f\x68\xc6\x06\x94\xd3\x19\xd2\xfe\x66" +
	"\x0b\x29\xfe\x8b\x98\xa0\x95\x3a\xc1\x04\x72\xf7\xde\xec\xb3\x82\x7c\xb5\xbb\x6e\x55\x23\x8d\x6f\x19\xbb\xd6\xaa" +
	"\xd4\xec\x66\x87\x61\x7d\x4a\x58\x3b\x45\x3b\xac\x39\xdd\x6f\x63\xb7\x27\xf6\x5c\xe3\xd9\xde\x38\x56\x4e\x0f\x76" +
	"\xed\xad\x8c\xc2\xb3\xc6\xd3\xf5\x50\x7e\xda\xf9\xaa\x1a\xea\xf7\xce\x0a\xb1\x50\x89\x97\x82\xbd\x4b\x28\xeb\xff" +
	"\xe0\xe6\x26\x5b\xe4\xf6\xf9\x28\xe8\x33\x00\x00\xff\xff\xa6\x88\xd0\xeb\x18\x04\x00\x00")

func bindataDbTypessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbTypessql,
		"db/types.sql",
	)
}



func bindataDbTypessql() (*asset, error) {
	bytes, err := bindataDbTypessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/types.sql",
		size: 1048,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1529244915, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesDatahtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x51\x4b\xc3\x30\x14\x85\xdf\xf3\x2b\x2e\xf7\x49\x25\x74\xf5\x79" +
	"\xeb\xa0\x32\x19\x22\x0e\xd9\x54\x90\xd1\x87\xeb\x7a\x29\xd1\xf6\xb6\xb4\xd9\xac\x84\xfc\x77\x69\x02\x8a\xe2\x8b" +
	"\x6f\x27\x5f\xc2\xf9\x0e\x59\x0c\x87\xde\x74\x16\xec\x47\xc7\x19\x5a\x1e\xed\xec\x95\x4e\x14\x29\x2e\x95\xda\xe3" +
	"\x96\xe4\x0d\x35\xde\x73\x7f\x60\xb1\xa6\x66\xd4\xb8\x62\x19\xf8\x07\xb9\x91\x92\x47\xd4\x98\x37\xad\x54\xa8\x71" +
	"\xd7\x91\xa0\xc6\x27\xaa\x8f\x8c\x85\x3a\x51\x0f\x9b\xeb\x75\xbe\xcd\x37\xb7\x3b\xc8\x60\xef\x5c\x4f\x52\x31\x24" +
	"\x53\xbd\x91\x6a\xf0\x5e\x01\xc0\x74\x11\x90\xf7\xda\xb9\xe4\x5b\x11\xcf\xbf\xbc\x11\x06\x75\x8c\xc1\x1e\xe3\x34" +
	"\x20\xa6\xb0\xc1\xfb\x42\x3b\xc7\x52\x06\x4f\x31\x57\x61\x52\x63\x64\x5d\xb7\x2f\x54\x3f\x98\x86\x07\x4b\x4d\x07" +
	"\x19\x08\xbf\xc3\x8a\x2c\x9f\x39\x97\x5c\xb5\x47\x29\x8d\x54\xcf\x4c\xfd\x90\xdc\x19\xf9\x7a\x98\x3c\x8a\x19\xbd" +
	"\xbf\xb8\x4c\xd3\xf4\x5c\x43\x43\xe3\xbf\x9a\x68\xfc\xbb\x69\xae\x16\xb3\xf8\xfb\xcb\xcf\x00\x00\x00\xff\xff\x75" +
	"\x79\x6d\x32\x9c\x01\x00\x00")

func bindataTemplatesDatahtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesDatahtml,
		"templates/data.html",
	)
}



func bindataTemplatesDatahtml() (*asset, error) {
	bytes, err := bindataTemplatesDatahtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/data.html",
		size: 412,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1527700664, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesPagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x8c\xcf\x5b\x9b\xbd\xa1\x2a\xa9" +
	"\x84\x16\x90\x90\x56\x80\xd0\xee\x81\x13\xf2\xda\xd3\x64\xba\x8e\x6d\xd9\xb3\x0d\x95\x95\x7f\x47\x4e\xda\x26\x2c" +
	"\x1c\x38\xb9\x7e\x9a\x79\xe3\x79\xef\x35\xf5\x9b\x0f\x5f\xef\x1e\x7e\x7c\xfb\xc8\x3a\xea\xed\xae\xaa\xcb\xc1\xac" +
	"\x72\x6d\xc3\x73\x16\xf7\xca\xb5\xe3\xc8\x0b\x0e\xca\x30\x34\x13\xfa\x70\x0a\x30\x8e\x9c\x19\x45\x6a\x43\x3e\xa0" +
	"\x9e\xe1\xf2\x6b\xae\xee\x81\x14\xd3\x9d\x8a\x09\xa8\xe1\x8f\x0f\x9f\x36\xef\xb8\xbc\xe0\x4e\xf5\xd0\xf0\x23\xc2" +
	"\x10\x7c\x24\xce\xb4\x77\x04\x8e\x1a\x3e\xa0\xa1\xae\x31\x70\x44\x0d\x9b\xe9\x72\xc3\xd0\x21\xa1\xb2\x9b\xa4\x95" +
	"\x85\xe6\x56\xbc\xbd\x61\x3d\x3a\xec\x5f\xfa\x05\x5a\xa8\x43\xf4\x01\x22\x9d\x1a\xee\xdb\x2d\xf6\xaa\x85\x15\x7d" +
	"\x47\x14\xb6\x52\x5e\xd7\x12\x0e\x5a\x15\xc0\xa0\x12\x3e\xb6\x72\x2a\x4f\xd2\xfa\xd6\x8b\xe0\xda\x42\x5a\xd5\x84" +
	"\x64\x61\x97\x33\xee\x99\xf8\x9c\xce\x1b\xde\x29\x82\xd6\xc7\xd3\x96\xe5\x0c\xce\x8c\x63\x59\xbe\x14\x8e\x23\xdb" +
	"\xb0\x2f\x17\xd6\x5a\xce\xdd\x55\x55\x5b\x74\xcf\x2c\x82\x6d\x78\xa2\x93\x85\xd4\x01\x10\x0b\x11\xf6\x40\xba\xe3" +
	"\x8c\x4e\x01\x1a\x4e\xf0\x8b\xa4\x4e\x89\xb3\x2e\xc2\xbe\xe1\x42\x94\x9b\xd4\x3e\x82\x28\xf0\x6e\xcd\xa3\x95\xf3" +
	"\x0e\xb5\xb2\x97\xea\x9c\xc5\xdd\x05\x7b\xfc\x7e\x3f\xf9\x50\xd5\x49\x47\x0c\xb4\x1e\x70\x50\x47\x35\xa3\x9c\xa5" +
	"\xa8\x67\x59\xd2\x56\xca\x61\x18\x44\x9b\x48\x11\x6a\xa1\x7d\x2f\x8b\x7d\x54\xf4\x50\x06\xa2\x38\x24\xbe\xab\xe5" +
	"\xdc\xb8\xab\xaa\x9c\x09\xfa\x60\x15\x01\xe3\x25\x06\xa2\xe4\x86\x33\x31\x8e\x55\x55\x3f\x79\x73\x2a\xc3\x0d\x1e" +
	"\xa7\xc8\xf4\xe0\x5e\x4a\xb7\xc1\xe3\x1a\x3e\x1b\x33\xbd\xb3\xbb\x65\x93\xc8\xce\xd3\x4a\xe8\x39\x61\x73\x5e\x72" +
	"\x16\x8f\xce\x40\x4c\x45\x0f\x73\x96\x9b\x9f\x0d\xd8\x2d\x0e\xd4\xb2\xbb\x5d\x4f\x41\x47\xd1\x2f\xd3\xff\x31\x65" +
	"\xa9\x1d\xf0\x19\x27\xeb\x36\xfb\xe8\x7b\x5e\x58\xdf\x3f\x25\x8a\x4a\x53\x21\x7e\xf5\xfe\x12\x9f\x41\x45\x93\x5e" +
	"\xb1\x8b\x7b\x74\xcf\x69\xcd\x9b\xbc\x2e\x19\x3e\xbc\xf4\xa1\xd8\xb8\x16\x2f\xa8\x16\x2c\x26\xba\x08\x78\xed\x9d" +
	"\x18\xaf\xf9\x9a\x8e\xaa\xfa\xeb\x0d\x11\x92\xb7\x47\x88\x25\x1c\xff\xe1\xb5\x10\xf2\x90\xe4\xa5\xe9\xe7\xf2\x57" +
	"\xf8\xd3\xde\xeb\x18\x39\x59\x59\xcb\xf9\xe3\xf0\x3b\x00\x00\xff\xff\x92\xd5\x9c\x42\x2d\x04\x00\x00")

func bindataTemplatesPagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesPagehtml,
		"templates/page.html",
	)
}



func bindataTemplatesPagehtml() (*asset, error) {
	bytes, err := bindataTemplatesPagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/page.html",
		size: 1069,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1527682586, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesPagelisthtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xc1\xad\x83\x30\x0c\x80\xe1\x3b\x53\x58\xb9\x03\x0b\x84\x48\x6f" +
	"\x07\xde\x00\x6e\x6c\xb5\x56\xd3\x80\x62\x4b\x3d\x44\xde\xbd\x82\xd2\xdb\x7f\xf8\xf5\x45\x2a\x90\x0b\xaa\x2e\xa1" +
	"\x88\xda\xc8\xd5\x9a\xb0\x86\xd4\x7b\xc3\x7a\x67\x98\xdc\x07\x00\x80\x48\x06\x84\x86\xa3\x6d\xbb\xe4\x25\xf4\x3e" +
	"\xad\x47\xb9\x1f\xef\xb4\x8a\x15\x76\x8f\x33\x59\xba\x7e\xfa\xc1\x6f\x79\xca\xce\x24\x38\xea\x63\x6b\x16\xbe\x4e" +
	"\xc5\x17\x9f\xcc\x7f\x25\x6e\x9a\xb7\xc6\x74\x29\xa7\xf8\x77\x53\x6b\x98\xed\x44\x29\xf5\xce\x95\xdc\x87\x38\x53" +
	"\x49\xc3\x27\x00\x00\xff\xff\x4f\xdb\xa9\x56\xb7\x00\x00\x00")

func bindataTemplatesPagelisthtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesPagelisthtml,
		"templates/pagelist.html",
	)
}



func bindataTemplatesPagelisthtml() (*asset, error) {
	bytes, err := bindataTemplatesPagelisthtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/pagelist.html",
		size: 183,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1489957171, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesToptenhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x93\x41\x6f\xdc\x20\x10\x85\xef\xfe\x15\x94\x73\x16\x9a\x5b\x15\xe1" +
	"\xbd\xa4\xad\x54\x29\x6a\xab\x34\x39\xf4\x54\x4d\x61\x62\xcf\x06\x03\x82\x89\x93\x95\xe5\xff\x5e\x61\x67\x77\xad" +
	"\x4a\x2b\x31\xfb\x66\xde\x87\x79\xd8\xe6\xc3\xe7\x1f\xb7\x0f\xbf\x7f\x7e\x11\x3d\x0f\x7e\xdf\x98\xba\x08\x0f\xa1" +
	"\x6b\xe5\x34\xa9\x3b\x08\xdd\x3c\xcb\xaa\x23\x38\x41\xae\x95\x1c\x13\x63\x90\xc2\x01\xc3\x8e\x8f\x09\x97\xc1\x6f" +
	"\xc1\xe1\xdb\x3c\xbf\xcb\x09\x33\x45\xb7\x34\x7e\x25\x08\x67\x9d\x63\x22\xbb\xc8\x0f\xb5\x5a\xc9\x03\x32\x08\xdb" +
	"\x43\x2e\xc8\xad\x7c\x7c\xf8\xba\xfb\x24\xf5\x49\x0f\x30\x60\x2b\x47\xc2\xd7\x14\x33\x4b\x61\x63\x60\x0c\xdc\xca" +
	"\x57\x72\xdc\xb7\x0e\x47\xb2\xb8\x5b\xfe\x5c\x09\x0a\xc4\x04\x7e\x57\x2c\x78\x6c\xaf\xd5\xc7\x2b\x31\x50\xa0\xe1" +
	"\x65\xb8\x48\x17\x74\xca\x31\x61\xe6\x63\x2b\x63\x77\x43\x03\x74\xb8\xc1\xf7\xcc\xe9\x46\xeb\x73\x04\x2a\x60\x07" +
	"\x09\x1d\x81\x8a\xb9\xd3\xcb\x78\xd1\x3e\x76\x51\xa5\xd0\x55\x68\x63\x98\xd8\xe3\xbe\x1e\xae\x16\xf3\x2c\x76\xe2" +
	"\xfb\xc9\x65\xf4\xda\x6d\x1a\xe3\x29\x3c\x8b\x8c\xbe\x95\x85\x8f\x1e\x4b\x8f\xc8\x22\x65\x7c\x42\xb6\xbd\x14\x6b" +
	"\xa4\x8c\x6f\xac\x6d\x29\x52\xf4\x19\x9f\x5a\xa9\x94\x5e\x7f\xb6\x14\x6d\x63\x46\x55\x9b\xfb\x2d\xcd\x42\x88\x81" +
	"\x2c\xf8\x93\x67\x9a\xd4\xed\x49\x7b\xbc\xbf\x5b\xd2\x6e\xcc\xdf\xe8\x8e\x75\x75\x34\x2e\xf7\x39\x60\x78\x91\x7b" +
	"\xa3\x1d\x8d\x5b\xf9\x3d\x89\xc5\xd2\x5f\x6f\x4e\x65\x74\x7f\xbd\x1d\xa4\xc0\x39\x9e\x01\xd3\xc4\x38\x24\x0f\x8c" +
	"\x42\x26\xe8\xd0\x53\x61\x55\xdf\x29\x29\xd4\x3d\x84\x67\xaa\x61\x36\x8d\x79\x8a\x91\x31\x2f\x80\xb5\xac\x84\xb5" +
	"\xaa\xf0\xff\x9f\x26\x63\x89\x7e\xac\x53\x8d\x29\x36\x53\xe2\x6d\x4e\x07\x18\x61\x55\xa5\x28\xd9\x6e\xd2\x3a\x14" +
	"\x7d\xb2\xfe\xb9\xdc\xe5\xa1\xd4\xdd\x56\xc7\xfe\xb2\x99\x5e\xa2\x31\x7a\xfd\x12\xfe\x05\x00\x00\xff\xff\xca\xbe" +
	"\x65\xb5\x1a\x03\x00\x00")

func bindataTemplatesToptenhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesToptenhtml,
		"templates/topten.html",
	)
}



func bindataTemplatesToptenhtml() (*asset, error) {
	bytes, err := bindataTemplatesToptenhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/topten.html",
		size: 794,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1526224461, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"db/base.sql":               bindataDbBasesql,
	"db/indices/alternate.sql":  bindataDbIndicesAlternatesql,
	"db/indices/default.sql":    bindataDbIndicesDefaultsql,
	"db/query-pages.sql":        bindataDbQuerypagessql,
	"db/query-toptenbyyear.sql": bindataDbQuerytoptenbyyearsql,
	"db/test.sql":               bindataDbTestsql,
	"db/types.sql":              bindataDbTypessql,
	"templates/data.html":       bindataTemplatesDatahtml,
	"templates/page.html":       bindataTemplatesPagehtml,
	"templates/pagelist.html":   bindataTemplatesPagelisthtml,
	"templates/topten.html":     bindataTemplatesToptenhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"db": {Func: nil, Children: map[string]*bintree{
		"base.sql": {Func: bindataDbBasesql, Children: map[string]*bintree{}},
		"indices": {Func: nil, Children: map[string]*bintree{
			"alternate.sql": {Func: bindataDbIndicesAlternatesql, Children: map[string]*bintree{}},
			"default.sql": {Func: bindataDbIndicesDefaultsql, Children: map[string]*bintree{}},
		}},
		"query-pages.sql": {Func: bindataDbQuerypagessql, Children: map[string]*bintree{}},
		"query-toptenbyyear.sql": {Func: bindataDbQuerytoptenbyyearsql, Children: map[string]*bintree{}},
		"test.sql": {Func: bindataDbTestsql, Children: map[string]*bintree{}},
		"types.sql": {Func: bindataDbTypessql, Children: map[string]*bintree{}},
	}},
	"templates": {Func: nil, Children: map[string]*bintree{
		"data.html": {Func: bindataTemplatesDatahtml, Children: map[string]*bintree{}},
		"page.html": {Func: bindataTemplatesPagehtml, Children: map[string]*bintree{}},
		"pagelist.html": {Func: bindataTemplatesPagelisthtml, Children: map[string]*bintree{}},
		"topten.html": {Func: bindataTemplatesToptenhtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
