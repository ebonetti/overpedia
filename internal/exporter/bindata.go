// Code generated by go-bindata. DO NOT EDIT.
// sources:
// db/base.sql
// db/indices.sql
// db/query-pages.sql
// db/query-toptenbyyear.sql
// db/test.sql
// db/types.sql
// templates/data.html
// templates/page.html
// templates/pagelist.html
// templates/topten.html

package exporter


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDbBasesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x6f\xab\x36\x18\x7d\xe7\xaf\xf8\xf6\x14\xa8\x58\xda\x44\x9a" +
	"\x34\x8d\xe5\xc1\x97\x38\x0d\x1b\x81\x08\x4c\x6f\x7b\xa7\x29\xa2\xc1\x69\xdd\xd2\x80\xb0\xd3\xae\x9a\xf6\xbf\x4f" +
	"\x18\x30\xce\xaf\xdb\x6a\x7b\x89\x82\x39\x9f\xfd\xf9\x9c\xe3\x63\xa6\x51\xb8\x84\xd8\x9d\xe3\x05\x02\x6f\x06\xf8" +
	"\xd6\x8b\x49\x0c\x6f\xe3\x02\x5c\x14\xbb\x68\x8a\x1d\xc3\x8d\x30\x22\xb8\x03\xbd\x8d\x0b\xc7\x30\x2e\x2f\x96\xe9" +
	"\x03\xe5\x50\xd1\xb2\xa2\x9c\x6e\x05\x87\x37\xf6\xcc\x4a\x9a\xb1\x14\xd2\x4a\xb0\x75\x4e\x39\xa4\xdb\x0c\x8a\x57" +
	"\x5a\x35\xc3\xa2\x28\xd9\x9a\x5f\x5c\x1a\xdd\x8c\x6e\xe8\xfb\x88\x78\x61\x50\x4f\x3a\x7c\x79\x5f\x17\x79\x9e\x0a" +
	"\x0a\xa6\x1f\xba\xc8\xc7\x30\x81\x01\xdd\xae\x92\x78\x98\x90\xd9\x8f\x3f\x0f\x2c\x47\x55\x12\xf4\xc5\xc7\xb2\xaa" +
	"\x94\x6d\x98\x06\x00\x40\xfd\x7f\xc5\x32\xf0\x02\x82\xaf\x71\x04\x41\x48\x20\x48\x7c\xdf\xee\xdf\x0a\x26\x72\x0a" +
	"\x37\x28\x72\xe7\x28\x32\x7f\x1a\x8d\x2d\x85\x6a\xdb\xc1\xfb\xcd\x68\xb5\xe9\x3d\x17\x55\xba\x16\x40\xf0\x2d\xf9" +
	"\x10\xbd\xab\xf2\xff\xb2\x4e\x45\xb7\xe2\x83\x3d\xf0\x62\xcd\xd2\xfc\x69\xf7\x52\xf2\x0e\xf6\xc7\x9f\x86\x25\x55" +
	"\x89\xe8\x2b\xe3\xac\xd8\xee\x29\x53\xa9\xc1\x62\x73\x42\x26\x4d\x91\x9e\xd7\xbe\xa6\xe1\xb6\xa2\xaf\xe7\xdb\xda" +
	"\x71\x5a\x69\x6f\xf5\x41\x7e\x5f\x08\xf8\x12\x86\x3e\x46\xc1\xa9\xcd\x9c\x9d\x53\x2e\xc8\x2b\xfa\x4a\x2b\xf1\x1d" +
	"\xc8\xfa\x31\xad\xde\x28\x7b\x78\x14\x30\xf3\x43\x44\xce\x40\x32\xb6\xd9\x9c\x05\x08\xf6\x42\xb9\x48\x5f\x4a\x20" +
	"\xde\x02\xc7\x04\x2d\x96\x07\xa8\x77\x9a\x56\x5d\x13\xc6\x49\x1f\xea\xa2\x7c\xda\x8d\xa7\x94\x1c\x5d\x75\x5a\xfa" +
	"\x45\x9a\xb1\xed\x03\x64\xa9\x48\x87\xc3\xa1\x94\x29\x5c\xde\x69\xb6\x9f\x45\xe1\x02\x7e\x19\xc8\x87\x0d\xcb\x69" +
	"\x99\x8a\xc7\x01\x7c\xf5\xc8\x1c\xdc\xf8\x06\xe6\x18\x4d\x71\xe4\xf4\x55\x4a\x54\xb3\x91\xd3\x6e\x85\xb3\x7b\xad" +
	"\xec\xb6\x6d\x5b\xe7\xdf\xde\x67\xda\xd6\x59\xb5\xf7\x18\xb4\xba\x9e\xd4\x52\xdf\xe9\x2b\x59\x4e\xbb\x73\xd0\xdb" +
	"\x2d\xc6\xa4\xa1\x7b\x52\x27\x10\x01\x13\xdf\x92\x08\xb9\xc4\xbc\xc3\x28\x6a\x66\xcf\x52\x41\x57\xa2\xda\x6d\xd7" +
	"\xe6\xa0\x86\x0e\xec\x7d\x19\x2d\x0b\x50\xdc\x11\x5a\x73\x89\x7c\x82\xa3\xc3\xd0\x90\x32\xa0\xe9\x14\x96\x91\xb7" +
	"\x40\xd1\x1d\xfc\x8e\xef\xc0\x6c\xb7\x6f\xd9\xea\xf5\x2c\x8c\xb0\x77\x1d\x74\xaf\xdb\x03\x6a\x41\x84\x67\x38\xc2" +
	"\x81\x8b\x63\x3d\x88\x8e\xeb\xdd\xd0\x4f\x16\x41\x23\x78\x46\x4b\xf1\xa8\x1c\x31\xc5\x33\x94\xf8\x04\xc6\x2d\x58" +
	"\x76\x79\x0c\xaf\x19\xd9\x37\xcf\x31\xb2\xc9\x35\x19\xe6\x1f\x41\xeb\x60\xda\x03\x3a\x9a\xaf\x74\x47\xb6\x4a\x6a" +
	"\x43\x9f\xd3\xb2\x61\xa2\xee\xfa\xc8\xe4\x13\x58\x0d\x0f\x07\x0d\x68\x56\x6a\x4e\x4d\x8c\x7d\xec\x92\xee\xf0\xd8" +
	"\xc0\x9f\x4e\x15\xb4\x25\x87\x1d\xf3\x27\x88\xbc\xeb\x39\x81\xdf\x42\x2f\xd0\x7a\x49\x62\x2f\xb8\xee\xb5\x31\x00" +
	"\x2c\x58\xc1\xd7\x39\x8e\x70\xd7\x10\xcb\x60\x22\x57\xe5\xdd\xb3\x63\x48\x96\x4e\x1e\x71\xc7\x30\xbc\x20\xc6\x11" +
	"\xa9\xb5\x0c\xb5\x95\x6e\x90\x9f\xe0\xf8\xf2\x62\x93\x3e\x53\x39\x5d\x1d\x83\x19\x6c\x8a\x0a\x1e\xf2\xe2\x3e\xcd" +
	"\x81\x8b\x54\x30\x2e\xd8\xfa\xe2\x52\x6e\xc4\xbc\xb2\x1b\xb9\xf6\x7e\xaf\x6c\x18\xfc\xfd\xcf\xc0\x86\xab\xda\xbf" +
	"\x27\xc9\x35\x7b\x8b\xd8\xa0\xf9\x72\x02\xe6\xa8\xae\x6b\xf7\xd7\xee\xe6\x87\xc9\x15\xa0\x60\xda\x3d\x4e\x54\x81" +
	"\xba\xdf\xbd\x60\x8a\x6f\x21\x0c\x8e\xdc\xac\x96\xe8\x7c\x26\x03\xd0\x4f\xe2\xda\x59\x87\x24\xcb\xff\xab\xf2\x99" +
	"\xbe\x3b\x06\x0a\x90\x7f\xf7\x4d\xeb\xdb\x31\x54\x72\x2e\x10\xc1\x91\x87\x7c\xef\x1b\x9e\xc2\x8d\x87\xbf\x2a\x94" +
	"\xa8\x28\x05\x14\x1b\x87\x4e\x50\x1d\x1b\x4a\xfb\xe6\x1c\x27\x81\x17\x06\x0a\x3e\x1e\xf6\x15\xa3\xe1\xb9\x22\x28" +
	"\x47\x87\x26\x29\xc7\xf5\xe6\x65\x4d\x4b\xd1\x78\xa8\xb1\xb4\x4f\x53\xd7\xe8\x6a\x9d\xef\xb8\xa8\xc3\x73\x9b\xd1" +
	"\xbf\x74\xf6\xe4\x36\xcc\xe3\xee\x2d\xe7\x88\x3b\x09\xed\xe9\x3b\x9e\xf7\x98\xca\x1a\xd3\xf7\xa4\xf8\x93\x9f\x58" +
	"\xcd\x76\x34\x06\xc7\xc3\x0b\x5b\x11\x23\xd5\xfc\x75\x5c\x27\x24\xe3\x12\x6f\x83\x1b\x22\x1f\xc7\x2e\x36\xbb\xdd" +
	"\x4b\x99\xfb\x9a\x46\xf5\xba\x44\x16\xac\x36\xbb\x3c\x6f\x20\x46\x5e\xbc\xd1\xca\xe4\x65\xce\xc4\xaa\x4c\x2b\x61" +
	"\x7e\x6e\x2e\x7b\x00\x03\x7b\x64\x69\x73\xca\xf1\xff\xaf\xd2\x61\xd4\xab\x8b\xe5\x74\xdc\x37\xf7\xe0\xf9\xb4\x6f" +
	"\x02\xe3\x73\x59\xaf\x27\xad\xbc\xc1\xf4\xe0\x3e\x34\x50\xeb\x14\xed\x33\x4b\x59\xa5\xae\xb5\xbb\x6f\x2a\xeb\xf4" +
	"\xf9\xd4\xea\xf4\x8b\xfa\x73\xe8\xee\xea\xfe\x18\xdd\x7f\x17\xc8\x6b\x54\x33\xa1\x02\x39\xc6\xbf\x01\x00\x00\xff" +
	"\xff\xf0\x82\x30\x34\x43\x0c\x00\x00")

func bindataDbBasesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbBasesql,
		"db/base.sql",
	)
}



func bindataDbBasesql() (*asset, error) {
	bytes, err := bindataDbBasesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/base.sql",
		size: 3139,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1525703780, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbIndicessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xcf\x73\xea\x36\x10\xbe\xfb\xaf\xd8\x9e\x82\x3d\x1e\xa0\xef\x98" +
	"\xb4\x9d\x71\x89\x9b\xb8\x03\x26\x83\xe1\xe5\xe5\x5d\x32\x8a\xbd\x04\xcd\x18\xc9\xb5\x44\x12\xfe\xfb\x8e\x64\xe3" +
	"\x9f\x22\x38\x3d\xf4\x06\xb2\xb4\xfb\xed\x7e\xbb\xdf\x4a\x13\x67\x85\x59\x8e\x02\x99\x14\x40\x59\x82\x1f\x20\x8f" +
	"\x19\x0a\x90\x3b\x22\x41\x48\x22\xa9\x90\x34\x16\xc0\x19\x64\xe4\x15\x05\x8c\x48\x2e\x69\x9c\xa2\x00\xc2\x12\x90" +
	"\x3c\xa3\xb1\xb0\x9d\x89\x65\xcd\x56\xbe\xb7\xf6\x61\xfd\xf4\xe0\xc3\xfb\x37\x3e\xde\x1f\x0b\x7b\x5e\x04\x7e\xb8" +
	"\x59\xc0\xe8\x2a\xe6\x6c\x9b\xd2\x58\x5e\xb9\x70\x95\xf1\x14\xf7\x34\xbe\xb2\x6f\xaa\x93\x0b\x6f\xed\xaf\x02\x6f" +
	"\x1e\xfc\xf4\x6f\xe1\x7b\xe0\x3f\x6a\x33\x92\xee\xf1\x85\x1f\x58\x22\xc0\x8b\xac\xc8\x9f\xfb\xb3\x35\x2c\x82\x70" +
	"\x74\x44\x92\xdb\xca\xfa\x9e\x32\xf5\xdb\x85\x85\xf7\xa3\xb1\x4a\x3e\xf4\xaa\xa5\xf6\xe6\xf8\xf6\xac\x0c\x09\x49" +
	"\xf6\xd9\xe9\x50\xb5\x50\x9c\x34\xec\x21\x1f\xd5\x82\xf5\xd7\x6a\xb9\xd0\x80\x72\x7c\xa3\x82\x72\x26\x6e\x2c\x6b" +
	"\xe2\x04\x3a\xc6\xfd\x41\x48\x48\x70\x4b\x19\x26\x40\x19\x10\x78\x27\xc7\x22\x87\x04\xf6\x54\x08\xca\x5e\x01\x99" +
	"\xcc\x8f\x10\xf3\x3c\xc7\x58\xa6\x47\xb5\x9f\x1c\x52\x09\x92\xc3\x74\x3c\x75\x26\x9f\xe7\x81\xb2\x84\xc6\x28\x5e" +
	"\x8e\x2a\x2a\x95\x8a\xc7\x60\x7d\x0f\x94\xc5\x7c\x9f\xa5\x28\xb1\xa4\xe5\x20\x30\x17\x3c\xa6\x24\x2d\x0f\xa8\x40" +
	"\x46\x16\x00\x40\x99\xbb\x70\x33\x9f\x5f\x5f\x37\x19\x9a\x38\xf8\x01\xd1\x18\x1e\x78\x76\x48\x49\x4e\xe5\xd1\x99" +
	"\xa8\x63\xaa\x12\x5c\x4d\xfb\x33\x4d\x5c\x28\x92\x3c\x5b\x7a\x73\x3f\x9a\xf9\x23\xe5\x49\xad\x4f\x75\xae\x4e\xff" +
	"\x60\xb6\xdc\x84\xeb\x91\xa3\x17\x63\x7e\x60\x52\xfb\xee\x67\x4f\x2f\xdf\xad\x96\x9b\x07\xf8\xf3\xa9\xeb\xa4\xb4" +
	"\xa6\xf7\x6c\xc2\x60\x19\x82\x37\x9f\x37\x83\xa8\x6b\xa9\x1d\xca\xff\x82\xfa\xf1\xde\x5f\xf9\xa0\xea\x85\x8a\x1c" +
	"\xdf\x30\x97\xf0\x07\x4c\x07\x05\x64\xbb\x30\x98\xa8\x4e\x20\x53\xb5\xa1\x65\xcd\x85\x68\xb3\x18\x69\xb8\x26\xe0" +
	"\x97\x6b\xa3\x0d\xb9\xe3\xef\x22\x07\xce\x97\x5c\xd9\x6e\x63\x97\xfa\x5c\x64\x0e\x13\x2d\x2b\x1a\x7a\x2f\x03\x9d" +
	"\x68\x4f\x24\x5d\x5f\x6f\x53\x4e\xa4\x21\xe4\x4f\x03\x2d\x68\x53\x51\x42\x10\x41\xb8\x2c\x5a\x01\xbc\xf0\xf6\xe4" +
	"\x02\x7e\xf9\xbd\xcb\x63\x8f\xbe\x2f\x41\x9f\xb6\x8a\xcc\xfb\x7e\xd7\x65\x0b\x26\x8e\xa0\x2c\x46\x20\x8c\xb3\xe3" +
	"\x9e\x1f\x04\x60\x42\xa5\x80\x84\xb3\x2b\x09\x3b\xf2\xa6\x3e\x55\xf8\xde\x11\xb6\x34\x4d\x95\xc4\x9c\x54\x25\x21" +
	"\x92\xc0\x3b\x95\x3b\x20\x90\x23\x11\x9c\x91\x97\x14\x21\xde\x71\x1a\xa3\x33\x31\x71\x64\x0e\xa1\x1f\xf7\x17\xa9" +
	"\x3f\x63\xd6\x76\xc1\x3a\xcd\x8c\x38\x47\x22\x29\x67\xa5\x86\xb5\x53\x56\x55\x5e\x4b\xdd\x2b\x20\x03\x25\xa4\xd1" +
	"\x62\xda\xbf\x3a\xdf\xef\xad\xe7\xf1\x49\x17\x7a\x25\x25\xb9\x24\xa9\x41\x03\xea\x41\x54\x39\x68\xc5\xe3\xc2\x2b" +
	"\x32\xcc\x89\xc4\x67\x81\x39\x45\xa1\x63\x70\xcb\x39\x64\xc3\x73\x11\x53\x1b\x74\x81\xe3\x7c\xa2\x1b\x4d\x3f\x10" +
	"\xaa\x09\x9a\x6e\xbe\x64\x7b\xa9\xbf\x52\xfe\x3a\xca\xe2\x71\x6d\x75\x72\xc8\xc7\x75\xc1\xd2\x64\xdb\x73\xd3\x48" +
	"\x71\x16\xc3\xdf\xcb\x20\x3c\xd7\x20\x87\x1c\x36\x51\x10\xde\x41\x99\x06\xdb\xb5\xd4\xd7\xe1\x32\x98\x23\x93\xaa" +
	"\x07\xbc\xe8\x8c\xb8\x5e\x90\xc3\xb3\xba\xab\x51\x2b\x86\x95\x59\x99\x23\x9e\x80\x96\x6e\x6c\xb3\x4c\x96\x78\x06" +
	"\x8f\x2c\x67\x80\x4c\xd9\x85\xfe\x6a\x09\x30\xeb\x4a\x27\xf4\x3a\xe2\x46\x59\xd4\xc7\x6b\x97\xc6\x5c\x9b\x64\x71" +
	"\x53\xa2\x36\x4f\xb2\x42\xc6\xcd\x44\x55\x77\xba\x61\x23\xf9\xd7\xe9\x74\xea\x54\xf8\x1d\x9a\x6c\xed\x49\x3b\xf0" +
	"\x77\xa4\xaf\x3b\x25\x91\x72\xab\xaa\xf7\x85\x08\x4c\xd4\x45\x54\xc7\x01\x94\x09\x89\x24\x01\xbe\x05\x89\xf9\x5e" +
	"\x34\xb5\xce\x5c\x59\x9a\x68\x65\xa9\x51\x88\x15\x71\x05\xcb\x7a\x4b\x87\x82\x76\x35\x14\xf0\xed\x4f\x26\xca\xa7" +
	"\x17\x81\x0e\x37\xc6\x4a\x39\x73\x83\xe9\xb5\x7f\x91\x9f\xff\xc0\xf1\xb0\xd1\x67\x80\xa1\xba\xb6\x78\x1f\x74\xc9" +
	"\xbf\x0d\xa2\x75\x10\xb6\xc1\x27\x98\xc9\x5d\x73\x52\x18\xfa\x4d\xf4\x9a\xad\xec\x81\xa6\x7e\xf5\xdd\x55\xa8\xca" +
	"\xcb\x7f\x2d\x93\xe5\x97\x42\x26\xaa\x1e\x35\xe1\xe9\x8a\x7a\x05\xa9\x91\xb2\xfa\x1c\xfc\x06\xdf\xe0\x3c\x67\x26" +
	"\xd9\x1d\x3b\xee\x25\x0c\xc6\xc1\x78\x39\x41\x2a\xc9\xea\xbf\x71\x8e\x76\x78\x33\x22\x70\x9b\x93\xa7\x2a\x9e\x76" +
	"\xce\x35\x8c\x82\xed\x26\x04\x7d\xde\x76\xf5\xc9\x6e\x0a\x87\x4f\xc0\x21\x85\x7f\x06\xf9\xb4\x7f\x2d\xf8\x22\x78" +
	"\xcb\xb6\x2e\x78\x2c\xa6\x6b\x46\xe3\x9e\xf7\xce\x7b\xa2\xe8\xc1\xf2\x39\x51\x36\x64\xab\xda\x57\xc1\xdd\xfd\xba" +
	"\x86\x53\xb1\x56\xa2\x32\x34\x59\xe3\x49\x1c\x84\xb7\xfe\x0f\x58\x86\x86\x17\x60\x55\x0f\xfa\x19\xba\x51\xd2\xf8" +
	"\x72\x84\xb9\x7a\x3b\x7a\xf3\x52\xea\x18\xfc\x73\xd0\x44\xd4\x8f\xcb\xcf\x2c\x96\x7a\x7b\xeb\x47\xb3\x53\x9c\x75" +
	"\x0e\xba\x7d\x6d\xdf\x58\x5e\xe8\xcd\x9f\x7e\xfa\x7d\x53\x37\xff\x06\x00\x00\xff\xff\xa9\x8c\x64\xc0\x57\x10\x00" +
	"\x00")

func bindataDbIndicessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbIndicessql,
		"db/indices.sql",
	)
}



func bindataDbIndicessql() (*asset, error) {
	bytes, err := bindataDbIndicessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/indices.sql",
		size: 4183,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1528365877, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbQuerypagessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x5d\x73\x9b\x38\x14\x7d\xf7\xaf\xb8\x8f\x90\x65\x93\x8d\x1f\xb3" +
	"\xbb\x0f\xd4\x26\x09\x1d\x02\x19\xc0\xcd\x64\x32\x19\x46\x06\x85\x28\x05\xc1\x48\x72\x1d\xff\xfb\x8e\x24\xbe\x8c" +
	"\x21\x4d\xfb\x66\xe9\x7e\x9e\x7b\xce\x15\xbe\x38\x23\xf4\xa5\x62\x25\x12\xa4\xa2\x1c\x5e\x2a\x06\x88\x09\x92\x16" +
	"\x98\x5b\x20\xaa\x9a\xa4\x1c\x10\xcd\x20\x2f\xaa\x2d\x2a\xce\x2e\x16\x0f\x6e\x7c\xdb\x1a\xec\x08\x8c\x05\x00\x40" +
	"\xe4\x78\xce\x2a\x86\x1a\xe5\x38\x21\x99\xbc\x57\x1e\x09\xc9\x94\xf9\x3a\x0c\xee\x60\xbf\xac\xce\xa5\x03\x57\x57" +
	"\x0f\xb7\x4e\xe8\xe8\x80\x0c\xd7\xe2\x15\xfe\x87\xcb\x85\x69\x41\x8d\x59\x8a\xa9\x20\x05\xce\x08\xcd\x48\x8a\x4f" +
	"\xab\x88\x43\x8d\xad\xb6\x96\x05\x07\x8c\x98\x05\x7b\x4c\xf2\x57\x61\x29\xbf\x26\x47\xc2\x10\xfd\x6e\x98\x10\x7c" +
	"\x73\x42\xd8\xcb\x34\x7d\x72\xed\x68\x64\x98\x72\x3c\xf2\xfb\x1b\x2e\xcf\xff\x31\x2f\x6e\x42\xc7\x8e\x9d\x28\x36" +
	"\xa6\x9c\x32\xf8\x0b\xa6\x63\x97\xa6\x75\x69\xca\x5a\xda\x3c\xae\x38\xca\x62\x47\xea\x66\xb6\x1b\xf1\xa9\x76\xc4" +
	"\x4c\x3f\xe2\xa8\x21\xcd\xc8\x74\x5b\x53\x13\x13\xfb\x3e\xea\x23\x18\x62\x3f\x20\x5c\x1a\x8e\x29\x6f\x58\xdc\x1e" +
	"\x24\x4f\x9a\x7a\xd7\x5f\x07\x0f\x9a\x11\xe3\xde\x0e\x63\x37\x76\x03\x1f\xbe\x3c\x36\xcc\x6a\x42\x07\xd2\x08\xc2" +
	"\xb5\x13\x4a\xbb\x26\xd9\xd4\x3d\xe8\xb2\x7f\x92\x00\xd6\x4e\xb4\x6a\xb2\x88\x4f\xb7\x61\x75\x9a\x9e\x69\x48\x7c" +
	"\xbe\xa3\xf9\x5c\xba\xb7\xe9\x4d\x40\x79\x3e\xb7\x72\x96\x2e\x84\x18\x43\x87\x04\xe5\xb9\xb1\xb2\xa5\x56\x9a\xad" +
	"\x18\x0a\xff\x54\x98\x5a\x82\xa7\x4c\xcf\x29\x66\x40\xb5\x46\xa6\xe4\x25\xb9\x96\x87\x12\x23\xbe\x63\xb8\xc4\x54" +
	"\x98\x3d\x38\x69\x01\x3b\x5a\x29\xd7\x81\x0b\xef\xc5\x72\x8a\x57\xd9\x6e\xc2\x60\x73\x2f\x53\x1c\x21\x9d\x1d\xd0" +
	"\x87\x33\x1a\x8f\x47\x93\x33\x6c\xa7\x83\x42\x68\x86\xdf\xa5\x7d\x79\x6c\xee\x10\x49\x5b\x87\x88\x0b\xf4\x31\x14" +
	"\x94\xe7\x93\x68\x14\x0e\x94\xe3\x94\x61\xf5\x02\xcb\x39\xcd\xbe\xab\x16\x94\x84\x76\x6b\xd4\x6d\x98\x20\x25\xde" +
	"\x56\x3b\x9a\x71\xeb\x57\x8f\xec\x7f\xb0\x04\x65\xd9\xf8\x52\x9f\xb6\xe7\x4d\x96\xb9\x73\x7d\xa3\x23\x76\xb2\x26" +
	"\xc3\x3f\x08\x97\x5f\x8c\x19\x54\x6d\x4a\x56\xed\x13\x51\x25\x6f\xbc\xa2\xcd\xcc\x55\x80\xfe\xa9\xbc\x05\x11\x45" +
	"\xfb\x9c\xa3\x2d\x17\x0c\xa5\xa2\x95\x58\x63\x23\x5c\x1d\xdb\xdb\x97\x5d\x51\x0c\xa3\x76\xac\xe8\x26\x63\xf5\x60" +
	"\x3b\x2a\xcb\x03\x7e\x17\x98\x66\x38\x93\xc6\x66\x59\x57\x81\xed\x39\xd1\xca\x31\x14\x75\x7a\x71\x9e\x9e\xaf\xae" +
	"\xe6\xb9\x7f\x7a\x3e\x09\xad\x52\x82\x8a\xb7\x5d\x59\x8f\x12\x94\x07\x59\xe9\xe9\xd9\x5c\x74\x4d\xc8\x0b\xf9\xa5" +
	"\x35\xcd\x45\x4f\x9c\x84\xa3\xd8\x02\x51\x83\xe7\x5c\xc7\xf0\x35\x70\x7d\xf0\xec\xd8\x09\x6d\xef\x58\x03\x63\xed" +
	"\xfe\xe6\xf0\x06\xd3\x50\x53\xe8\x85\x4c\x35\xcd\x03\x30\x3d\xd5\x3b\x4a\x31\x17\x86\xa8\x55\xff\xc9\xc0\xc7\x04" +
	"\xf5\x47\x20\x08\xd7\xae\x6f\x7b\x6e\xfc\x08\x89\xd1\xe9\x47\xa6\x54\x48\x46\x28\x37\x91\xeb\xdf\x40\xeb\x27\xa7" +
	"\x93\x40\xe0\x43\x1c\x6e\x9c\x45\x0f\x7f\x76\xaf\xc7\xe1\xda\xfb\x64\x7b\xc6\x6e\xfd\xca\x36\x30\xf4\x13\xdc\x9e" +
	"\xd4\x9c\xfe\x5d\xfc\x0c\x00\x00\xff\xff\x70\x5e\xd3\x18\x09\x09\x00\x00")

func bindataDbQuerypagessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbQuerypagessql,
		"db/query-pages.sql",
	)
}



func bindataDbQuerypagessql() (*asset, error) {
	bytes, err := bindataDbQuerypagessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/query-pages.sql",
		size: 2313,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1525703856, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbQuerytoptenbyyearsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x41\x6f\xa3\x3c\x10\xbd\xe7\x57\xcc\x11\x2a\x94\x26\xbd\x7e\xca" +
	"\x81\x2f\x61\x5b\x56\x14\x56\x40\x54\xed\xc9\x72\xc2\x88\x7a\x37\x31\x2c\x76\x94\xf2\xef\x57\x33\x80\xd3\x34\xd1" +
	"\x9e\x90\xdf\x3c\xcf\x3c\xbf\x37\x3c\x3e\xc8\xce\xaa\xfd\x01\xc1\x36\x2d\x58\xd4\xb0\xeb\xa1\x47\xd9\xc1\x9f\x13" +
	"\x76\xfd\xc3\xe3\xec\x2d\x2e\x5f\x18\x31\x10\x16\xe0\xcd\x00\x00\x8a\x28\x89\xd6\x25\xa3\x7c\xfe\x96\x67\xaf\x70" +
	"\x7e\x6a\xe6\x56\x1d\x71\xd7\x9c\x74\x65\x02\xa8\x51\x63\x27\x2d\x0a\x83\x9d\x42\xe3\x1d\x95\xa6\x0b\xc1\x51\x7e" +
	"\xd0\xd7\x07\xe1\xf1\x97\x3b\x6c\xd3\x38\x4b\x21\x4c\x92\xcf\xfd\x17\x34\x91\x87\xf8\x01\xe9\x53\xfb\x5b\x0d\xad" +
	"\xac\x51\xa8\x8a\x70\x66\x08\x55\x5d\x4b\x22\x82\x61\xe8\xed\x25\xca\xa3\xe1\x42\x85\xad\x7d\x87\x15\x2c\xb9\x73" +
	"\xdf\xe2\x6d\xe3\x4d\x5c\x94\x71\xba\x2e\xb9\x7c\xdd\x52\xe9\x4a\xed\xd1\xec\x7a\x67\xc0\x9d\xd6\x4f\xa3\xe8\xe5" +
	"\xe2\xa6\xb5\x98\xb3\x11\x20\xe6\xd4\x3b\x00\xd9\x75\xb2\x17\xb2\xae\xbd\x75\x58\x94\x9e\x67\x5b\x56\x2d\xac\xb2" +
	"\x07\x0c\x60\x3a\xca\x9d\xb1\x9d\xdc\x5b\x46\x86\xc7\x5e\x18\xca\x30\xe2\xd3\x30\xd2\x78\xec\xe9\x8e\x0f\x59\xbe" +
	"\x89\x72\xf8\xff\x27\x9c\x51\xd5\xef\x16\x36\x51\xb1\x66\x12\xfb\x02\x97\x87\x71\xc4\x93\xcd\xa3\x29\x01\x97\x93" +
	"\xb0\x8c\xf2\x30\x19\xdf\xf0\x25\xff\x81\x19\x4c\x39\x04\xe3\x1c\x47\xfd\x87\x69\x17\xe3\x78\xe1\x56\x83\x04\xf6" +
	"\x06\xc2\x74\xe3\xf2\x84\xd5\xa8\x6a\xee\x10\x2e\xf7\x2d\x52\x89\x84\xb2\x91\x8c\x7e\xc9\x60\x9a\x73\xcf\x06\x57" +
	"\x4c\xe2\xd7\xb8\x84\xe5\x82\x01\x1f\x04\x7c\xcf\xe2\x74\xd8\x67\x1a\x38\x38\x65\x5b\xd8\x16\x71\xfa\x0c\xde\xf8" +
	"\xd4\x61\x71\x9f\xf3\x6c\xfb\x83\x1a\x5f\x87\x4a\xe1\xd3\xf9\x97\x69\xf4\xdd\xff\x26\x80\xae\x39\x0b\xdb\x08\x62" +
	"\x8c\xb9\x0f\xf8\xcd\x36\x38\x7f\x8d\x4b\x57\xe9\x0a\x3f\x3a\xa9\x7f\x2b\x5d\x7f\xca\x98\xa8\xbe\x23\x49\xad\x4f" +
	"\xf2\xc0\x54\x34\x13\x99\xab\x34\xf3\x92\x3c\x2f\xe9\xf5\x63\x86\x9f\x6e\xd2\xcb\x74\xb7\x24\x7c\x72\x23\x09\xf9" +
	"\x6f\xf6\x37\x00\x00\xff\xff\xba\x35\x83\xe7\x47\x04\x00\x00")

func bindataDbQuerytoptenbyyearsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbQuerytoptenbyyearsql,
		"db/query-toptenbyyear.sql",
	)
}



func bindataDbQuerytoptenbyyearsql() (*asset, error) {
	bytes, err := bindataDbQuerytoptenbyyearsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/query-toptenbyyear.sql",
		size: 1095,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1525948399, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbTestsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\xbd\x09\x02\x8e\xa0\xc7\x8a" +
	"\x9e\xfa\x09\x85\x9e\x74\x59\x2b\xeb\x76\x8b\x6a\xc9\xda\x8d\x41\x7f\x5f\x9c\x34\x46\x04\x7c\xdb\xd9\x99\x37\x30" +
	"\xee\x64\x8a\x2c\x09\x86\x15\x2e\xa8\x38\x71\xa2\x82\xfa\xfd\x66\x71\x14\xb7\x5d\xee\xc5\xbd\x7f\x7c\x5a\x18\x22" +
	"\xd8\xc0\xa0\x24\x7a\x96\x25\x59\x6f\x4e\xce\x98\x50\x84\x14\x0a\x7e\x51\x85\x3c\x4d\xde\x98\xf0\x78\xc8\xa3\x0b" +
	"\x5e\xfb\x66\xb0\x37\xf3\x1c\x65\xb5\xfe\x9e\xae\xb4\xb2\x70\x9e\x0f\x89\x3d\xd0\x53\x92\x23\x63\xfa\xb9\xfe\x96" +
	"\x43\xae\x8b\xfc\x93\x26\x30\x8c\x28\xb4\x4d\xf0\x9b\xe0\xf9\xc2\x91\x64\xd7\xda\x4a\xa7\x96\x2b\xd5\x36\x68\x2e" +
	"\x4a\xf3\xd8\x1a\x61\x7d\xb2\xee\x5b\x6e\xbf\xbf\x00\x00\x00\xff\xff\xf3\xcc\x98\x6f\x4a\x01\x00\x00")

func bindataDbTestsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbTestsql,
		"db/test.sql",
	)
}



func bindataDbTestsql() (*asset, error) {
	bytes, err := bindataDbTestsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/test.sql",
		size: 330,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1525705070, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbTypessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\x3d\x6f\xf2\x30\x10\x9e\xc9\xaf\xf0\x08\x12\x7a\xa5\x17\xa9\x53" +
	"\x27\x17\x4c\x8b\x44\x01\x05\x97\x16\x21\x86\x2b\xb9\x52\x2b\x89\x13\xd9\x8e\x4a\xfe\x7d\x15\x3b\x11\x26\x84\x76" +
	"\x6b\x46\x3f\x5f\x7e\xee\x9c\x71\xc8\x28\x67\x84\x6f\x57\x8c\x7c\x8d\xb2\x7f\x25\x82\x4a\x11\x74\xa1\x30\x45\x69" +
	"\x08\x5d\x93\x7e\xd0\xdb\x40\x52\x20\xf1\xbe\xe9\x7c\x49\xf9\x30\xe8\xad\x50\x1d\x50\x1a\x91\x60\x0b\x98\xa0\xd4" +
	"\xe8\xa3\x0d\x10\x82\x8c\x7d\x27\x32\x5b\x54\xc7\x3c\xcb\xc5\xa1\x8b\x6f\x81\x9b\x6e\x16\xf5\x2d\x9d\xdb\x16\x41" +
	"\xb5\x43\x82\xc1\x7d\x10\xb4\xeb\x0a\x19\xe1\xc9\x94\x39\x8e\xbc\xd2\xda\xb5\xb6\xba\x06\xaf\x7d\x2a\x4d\x5a\x5a" +
	"\xd5\xd0\x12\x9e\x7d\x59\x4d\x68\xcd\x70\xb7\xef\x8c\x4e\xcb\x1c\x8e\x78\x8e\xe2\xc2\xb8\x29\x6e\x68\x38\x7e\xa2" +
	"\x61\xff\xee\xff\x68\xe0\x42\xe8\xbb\x36\x0a\x0e\x86\x10\xce\xde\xb8\x3b\xb3\xcd\xbb\xe9\x33\xed\xc0\x87\xe5\x72" +
	"\xce\xe8\xe2\x46\x3a\x9e\x0c\xca\x08\xa3\x3f\xba\x85\x3b\x9c\x16\x49\xf2\x83\xe6\x55\xc4\x22\xc7\x48\xc0\x8b\x4a" +
	"\x3a\xe0\xb1\x42\x30\x22\x93\x6e\xbd\xb3\x05\x67\x8f\x2c\x74\xd0\x0a\x8e\x38\xc1\xdc\x7c\x36\xeb\xae\x20\xdb\xfc" +
	"\xaa\x7a\x55\x58\xc8\x8f\x8c\x9c\x5b\x57\x6a\x72\xb1\x62\x7f\x3a\x2e\x61\x6d\xc0\xad\xb8\xe6\x74\x3f\x9d\xdd\xde" +
	"\xb1\xe7\x42\xc6\xfa\xc2\xb1\x72\xba\xf1\x14\xac\x95\x02\x19\x0b\x79\x3c\x5f\xca\x9e\x76\x3e\xba\x86\xfa\xbb\x33" +
	"\x48\x59\x40\x62\xa5\xa8\xaf\x12\xca\xfa\x37\xb9\x98\x64\x8b\xdc\xbe\x9f\x0b\xfa\x0e\x00\x00\xff\xff\xe1\xb2\x0d" +
	"\x3e\x37\x04\x00\x00")

func bindataDbTypessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbTypessql,
		"db/types.sql",
	)
}



func bindataDbTypessql() (*asset, error) {
	bytes, err := bindataDbTypessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/types.sql",
		size: 1079,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1525703624, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesDatahtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x51\x4b\xc3\x30\x14\x85\xdf\xf3\x2b\x2e\xf7\x49\x25\x74\xf5\x79" +
	"\xeb\xa0\x32\x19\x22\x0e\xd9\x54\x90\xd1\x87\xeb\x7a\x29\xd1\xf6\xb6\xb4\xd9\xac\x84\xfc\x77\x69\x02\x8a\xe2\x8b" +
	"\x6f\x27\x5f\xc2\xf9\x0e\x59\x0c\x87\xde\x74\x16\xec\x47\xc7\x19\x5a\x1e\xed\xec\x95\x4e\x14\x29\x2e\x95\xda\xe3" +
	"\x96\xe4\x0d\x35\xde\x73\x7f\x60\xb1\xa6\x66\xd4\xb8\x62\x19\xf8\x07\xb9\x91\x92\x47\xd4\x98\x37\xad\x54\xa8\x71" +
	"\xd7\x91\xa0\xc6\x27\xaa\x8f\x8c\x85\x3a\x51\x0f\x9b\xeb\x75\xbe\xcd\x37\xb7\x3b\xc8\x60\xef\x5c\x4f\x52\x31\x24" +
	"\x53\xbd\x91\x6a\xf0\x5e\x01\xc0\x74\x11\x90\xf7\xda\xb9\xe4\x5b\x11\xcf\xbf\xbc\x11\x06\x75\x8c\xc1\x1e\xe3\x34" +
	"\x20\xa6\xb0\xc1\xfb\x42\x3b\xc7\x52\x06\x4f\x31\x57\x61\x52\x63\x64\x5d\xb7\x2f\x54\x3f\x98\x86\x07\x4b\x4d\x07" +
	"\x19\x08\xbf\xc3\x8a\x2c\x9f\x39\x97\x5c\xb5\x47\x29\x8d\x54\xcf\x4c\xfd\x90\xdc\x19\xf9\x7a\x98\x3c\x8a\x19\xbd" +
	"\xbf\xb8\x4c\xd3\xf4\x5c\x43\x43\xe3\xbf\x9a\x68\xfc\xbb\x69\xae\x16\xb3\xf8\xfb\xcb\xcf\x00\x00\x00\xff\xff\x75" +
	"\x79\x6d\x32\x9c\x01\x00\x00")

func bindataTemplatesDatahtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesDatahtml,
		"templates/data.html",
	)
}



func bindataTemplatesDatahtml() (*asset, error) {
	bytes, err := bindataTemplatesDatahtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/data.html",
		size: 412,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1527700664, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesPagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x8c\xcf\x5b\x9b\xbd\xa1\x2a\xa9" +
	"\x84\x16\x90\x90\x56\x80\xd0\xee\x81\x13\xf2\xda\xd3\x64\xba\x8e\x6d\xd9\xb3\x0d\x95\x95\x7f\x47\x4e\xda\x26\x2c" +
	"\x1c\x38\xb9\x7e\x9a\x79\xe3\x79\xef\x35\xf5\x9b\x0f\x5f\xef\x1e\x7e\x7c\xfb\xc8\x3a\xea\xed\xae\xaa\xcb\xc1\xac" +
	"\x72\x6d\xc3\x73\x16\xf7\xca\xb5\xe3\xc8\x0b\x0e\xca\x30\x34\x13\xfa\x70\x0a\x30\x8e\x9c\x19\x45\x6a\x43\x3e\xa0" +
	"\x9e\xe1\xf2\x6b\xae\xee\x81\x14\xd3\x9d\x8a\x09\xa8\xe1\x8f\x0f\x9f\x36\xef\xb8\xbc\xe0\x4e\xf5\xd0\xf0\x23\xc2" +
	"\x10\x7c\x24\xce\xb4\x77\x04\x8e\x1a\x3e\xa0\xa1\xae\x31\x70\x44\x0d\x9b\xe9\x72\xc3\xd0\x21\xa1\xb2\x9b\xa4\x95" +
	"\x85\xe6\x56\xbc\xbd\x61\x3d\x3a\xec\x5f\xfa\x05\x5a\xa8\x43\xf4\x01\x22\x9d\x1a\xee\xdb\x2d\xf6\xaa\x85\x15\x7d" +
	"\x47\x14\xb6\x52\x5e\xd7\x12\x0e\x5a\x15\xc0\xa0\x12\x3e\xb6\x72\x2a\x4f\xd2\xfa\xd6\x8b\xe0\xda\x42\x5a\xd5\x84" +
	"\x64\x61\x97\x33\xee\x99\xf8\x9c\xce\x1b\xde\x29\x82\xd6\xc7\xd3\x96\xe5\x0c\xce\x8c\x63\x59\xbe\x14\x8e\x23\xdb" +
	"\xb0\x2f\x17\xd6\x5a\xce\xdd\x55\x55\x5b\x74\xcf\x2c\x82\x6d\x78\xa2\x93\x85\xd4\x01\x10\x0b\x11\xf6\x40\xba\xe3" +
	"\x8c\x4e\x01\x1a\x4e\xf0\x8b\xa4\x4e\x89\xb3\x2e\xc2\xbe\xe1\x42\x94\x9b\xd4\x3e\x82\x28\xf0\x6e\xcd\xa3\x95\xf3" +
	"\x0e\xb5\xb2\x97\xea\x9c\xc5\xdd\x05\x7b\xfc\x7e\x3f\xf9\x50\xd5\x49\x47\x0c\xb4\x1e\x70\x50\x47\x35\xa3\x9c\xa5" +
	"\xa8\x67\x59\xd2\x56\xca\x61\x18\x44\x9b\x48\x11\x6a\xa1\x7d\x2f\x8b\x7d\x54\xf4\x50\x06\xa2\x38\x24\xbe\xab\xe5" +
	"\xdc\xb8\xab\xaa\x9c\x09\xfa\x60\x15\x01\xe3\x25\x06\xa2\xe4\x86\x33\x31\x8e\x55\x55\x3f\x79\x73\x2a\xc3\x0d\x1e" +
	"\xa7\xc8\xf4\xe0\x5e\x4a\xb7\xc1\xe3\x1a\x3e\x1b\x33\xbd\xb3\xbb\x65\x93\xc8\xce\xd3\x4a\xe8\x39\x61\x73\x5e\x72" +
	"\x16\x8f\xce\x40\x4c\x45\x0f\x73\x96\x9b\x9f\x0d\xd8\x2d\x0e\xd4\xb2\xbb\x5d\x4f\x41\x47\xd1\x2f\xd3\xff\x31\x65" +
	"\xa9\x1d\xf0\x19\x27\xeb\x36\xfb\xe8\x7b\x5e\x58\xdf\x3f\x25\x8a\x4a\x53\x21\x7e\xf5\xfe\x12\x9f\x41\x45\x93\x5e" +
	"\xb1\x8b\x7b\x74\xcf\x69\xcd\x9b\xbc\x2e\x19\x3e\xbc\xf4\xa1\xd8\xb8\x16\x2f\xa8\x16\x2c\x26\xba\x08\x78\xed\x9d" +
	"\x18\xaf\xf9\x9a\x8e\xaa\xfa\xeb\x0d\x11\x92\xb7\x47\x88\x25\x1c\xff\xe1\xb5\x10\xf2\x90\xe4\xa5\xe9\xe7\xf2\x57" +
	"\xf8\xd3\xde\xeb\x18\x39\x59\x59\xcb\xf9\xe3\xf0\x3b\x00\x00\xff\xff\x92\xd5\x9c\x42\x2d\x04\x00\x00")

func bindataTemplatesPagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesPagehtml,
		"templates/page.html",
	)
}



func bindataTemplatesPagehtml() (*asset, error) {
	bytes, err := bindataTemplatesPagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/page.html",
		size: 1069,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1527682586, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesPagelisthtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xc1\xad\x83\x30\x0c\x80\xe1\x3b\x53\x58\xb9\x03\x0b\x84\x48\x6f" +
	"\x07\xde\x00\x6e\x6c\xb5\x56\xd3\x80\x62\x4b\x3d\x44\xde\xbd\x82\xd2\xdb\x7f\xf8\xf5\x45\x2a\x90\x0b\xaa\x2e\xa1" +
	"\x88\xda\xc8\xd5\x9a\xb0\x86\xd4\x7b\xc3\x7a\x67\x98\xdc\x07\x00\x80\x48\x06\x84\x86\xa3\x6d\xbb\xe4\x25\xf4\x3e" +
	"\xad\x47\xb9\x1f\xef\xb4\x8a\x15\x76\x8f\x33\x59\xba\x7e\xfa\xc1\x6f\x79\xca\xce\x24\x38\xea\x63\x6b\x16\xbe\x4e" +
	"\xc5\x17\x9f\xcc\x7f\x25\x6e\x9a\xb7\xc6\x74\x29\xa7\xf8\x77\x53\x6b\x98\xed\x44\x29\xf5\xce\x95\xdc\x87\x38\x53" +
	"\x49\xc3\x27\x00\x00\xff\xff\x4f\xdb\xa9\x56\xb7\x00\x00\x00")

func bindataTemplatesPagelisthtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesPagelisthtml,
		"templates/pagelist.html",
	)
}



func bindataTemplatesPagelisthtml() (*asset, error) {
	bytes, err := bindataTemplatesPagelisthtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/pagelist.html",
		size: 183,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1489957171, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesToptenhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x93\x41\x6f\xdc\x20\x10\x85\xef\xfe\x15\x94\x73\x16\x9a\x5b\x15\xe1" +
	"\xbd\xa4\xad\x54\x29\x6a\xab\x34\x39\xf4\x54\x4d\x61\x62\xcf\x06\x03\x82\x89\x93\x95\xe5\xff\x5e\x61\x67\x77\xad" +
	"\x4a\x2b\x31\xfb\x66\xde\x87\x79\xd8\xe6\xc3\xe7\x1f\xb7\x0f\xbf\x7f\x7e\x11\x3d\x0f\x7e\xdf\x98\xba\x08\x0f\xa1" +
	"\x6b\xe5\x34\xa9\x3b\x08\xdd\x3c\xcb\xaa\x23\x38\x41\xae\x95\x1c\x13\x63\x90\xc2\x01\xc3\x8e\x8f\x09\x97\xc1\x6f" +
	"\xc1\xe1\xdb\x3c\xbf\xcb\x09\x33\x45\xb7\x34\x7e\x25\x08\x67\x9d\x63\x22\xbb\xc8\x0f\xb5\x5a\xc9\x03\x32\x08\xdb" +
	"\x43\x2e\xc8\xad\x7c\x7c\xf8\xba\xfb\x24\xf5\x49\x0f\x30\x60\x2b\x47\xc2\xd7\x14\x33\x4b\x61\x63\x60\x0c\xdc\xca" +
	"\x57\x72\xdc\xb7\x0e\x47\xb2\xb8\x5b\xfe\x5c\x09\x0a\xc4\x04\x7e\x57\x2c\x78\x6c\xaf\xd5\xc7\x2b\x31\x50\xa0\xe1" +
	"\x65\xb8\x48\x17\x74\xca\x31\x61\xe6\x63\x2b\x63\x77\x43\x03\x74\xb8\xc1\xf7\xcc\xe9\x46\xeb\x73\x04\x2a\x60\x07" +
	"\x09\x1d\x81\x8a\xb9\xd3\xcb\x78\xd1\x3e\x76\x51\xa5\xd0\x55\x68\x63\x98\xd8\xe3\xbe\x1e\xae\x16\xf3\x2c\x76\xe2" +
	"\xfb\xc9\x65\xf4\xda\x6d\x1a\xe3\x29\x3c\x8b\x8c\xbe\x95\x85\x8f\x1e\x4b\x8f\xc8\x22\x65\x7c\x42\xb6\xbd\x14\x6b" +
	"\xa4\x8c\x6f\xac\x6d\x29\x52\xf4\x19\x9f\x5a\xa9\x94\x5e\x7f\xb6\x14\x6d\x63\x46\x55\x9b\xfb\x2d\xcd\x42\x88\x81" +
	"\x2c\xf8\x93\x67\x9a\xd4\xed\x49\x7b\xbc\xbf\x5b\xd2\x6e\xcc\xdf\xe8\x8e\x75\x75\x34\x2e\xf7\x39\x60\x78\x91\x7b" +
	"\xa3\x1d\x8d\x5b\xf9\x3d\x89\xc5\xd2\x5f\x6f\x4e\x65\x74\x7f\xbd\x1d\xa4\xc0\x39\x9e\x01\xd3\xc4\x38\x24\x0f\x8c" +
	"\x42\x26\xe8\xd0\x53\x61\x55\xdf\x29\x29\xd4\x3d\x84\x67\xaa\x61\x36\x8d\x79\x8a\x91\x31\x2f\x80\xb5\xac\x84\xb5" +
	"\xaa\xf0\xff\x9f\x26\x63\x89\x7e\xac\x53\x8d\x29\x36\x53\xe2\x6d\x4e\x07\x18\x61\x55\xa5\x28\xd9\x6e\xd2\x3a\x14" +
	"\x7d\xb2\xfe\xb9\xdc\xe5\xa1\xd4\xdd\x56\xc7\xfe\xb2\x99\x5e\xa2\x31\x7a\xfd\x12\xfe\x05\x00\x00\xff\xff\xca\xbe" +
	"\x65\xb5\x1a\x03\x00\x00")

func bindataTemplatesToptenhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesToptenhtml,
		"templates/topten.html",
	)
}



func bindataTemplatesToptenhtml() (*asset, error) {
	bytes, err := bindataTemplatesToptenhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/topten.html",
		size: 794,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1526224461, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"db/base.sql":               bindataDbBasesql,
	"db/indices.sql":            bindataDbIndicessql,
	"db/query-pages.sql":        bindataDbQuerypagessql,
	"db/query-toptenbyyear.sql": bindataDbQuerytoptenbyyearsql,
	"db/test.sql":               bindataDbTestsql,
	"db/types.sql":              bindataDbTypessql,
	"templates/data.html":       bindataTemplatesDatahtml,
	"templates/page.html":       bindataTemplatesPagehtml,
	"templates/pagelist.html":   bindataTemplatesPagelisthtml,
	"templates/topten.html":     bindataTemplatesToptenhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"db": {Func: nil, Children: map[string]*bintree{
		"base.sql": {Func: bindataDbBasesql, Children: map[string]*bintree{}},
		"indices.sql": {Func: bindataDbIndicessql, Children: map[string]*bintree{}},
		"query-pages.sql": {Func: bindataDbQuerypagessql, Children: map[string]*bintree{}},
		"query-toptenbyyear.sql": {Func: bindataDbQuerytoptenbyyearsql, Children: map[string]*bintree{}},
		"test.sql": {Func: bindataDbTestsql, Children: map[string]*bintree{}},
		"types.sql": {Func: bindataDbTypessql, Children: map[string]*bintree{}},
	}},
	"templates": {Func: nil, Children: map[string]*bintree{
		"data.html": {Func: bindataTemplatesDatahtml, Children: map[string]*bintree{}},
		"page.html": {Func: bindataTemplatesPagehtml, Children: map[string]*bintree{}},
		"pagelist.html": {Func: bindataTemplatesPagelisthtml, Children: map[string]*bintree{}},
		"topten.html": {Func: bindataTemplatesToptenhtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
