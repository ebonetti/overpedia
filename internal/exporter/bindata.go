// Code generated by go-bindata. DO NOT EDIT.
// sources:
// db/base.sql
// db/indices/alternate.sql
// db/indices/default.sql
// db/query-pages.sql
// db/query-toptenbyyear.sql
// db/test.sql
// db/types.sql
// templates/data.html
// templates/homepage.html
// templates/page.html
// templates/pagelist.html
// templates/topten.html

package exporter


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDbBasesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xdf\x6f\xa3\x38\x10\x7e\xe7\xaf\x98\x7b\x0a\x54\x5c\xda\x46\x3a" +
	"\xe9\x74\xd9\x3c\x78\x89\xd3\x72\x47\x20\x02\xd2\x6d\xf6\xb4\x8a\x68\x70\x5b\xef\x92\x80\xb0\xd3\x6e\x75\xba\xff" +
	"\xfd\x64\x03\xc6\x04\x9a\x5d\xe9\xa4\x7d\xd8\xd8\xdf\xcc\x7c\x9e\x1f\xdf\xd0\x79\x18\xac\x20\x72\x6e\xf1\x12\x81" +
	"\xbb\x00\x7c\xef\x46\x71\x04\xaf\x93\x1c\x1c\x14\x39\x68\x8e\xa7\x86\x13\x62\x14\xe3\x06\xf4\x3a\xc9\xa7\x46\x73" +
	"\xe6\x04\x9e\x87\x62\x37\xf0\xc5\xf1\x78\xff\xb6\xcb\xb3\x2c\xe1\x04\x4c\x2f\x70\x90\x87\x61\x06\x23\x72\xd8\xae" +
	"\xa3\xf1\x3a\x5e\xfc\xfa\xfb\xc8\x9a\x1a\xc6\xe5\xc5\x2a\x79\x22\x0c\x4a\x52\x94\x84\x91\x03\x67\xf0\x4a\xbf\xd1" +
	"\x82\xa4\x34\x81\xa4\xe4\x74\x97\x11\x06\xc9\x21\x85\xfc\x85\x94\xd5\x31\xcf\x0b\xba\x63\x17\x97\x4d\xd8\x18\x7d" +
	"\xf4\xb0\x0c\x59\x48\x5f\xa6\x01\x00\x20\xfe\xbf\xa5\x29\xb8\x7e\x8c\x6f\x70\x08\x7e\x10\x83\xbf\xf6\x3c\xbb\xbd" +
	"\xe5\x94\x67\x04\xee\x50\xe8\xdc\xa2\xd0\xfc\xed\x7a\x62\xd5\x4f\xc0\xdd\x07\x68\x26\xc9\x03\xe3\x65\xb2\xe3\x10" +
	"\xe3\xfb\xf8\x3c\xba\x24\x07\xfe\x03\x02\x2c\xdf\xd1\x24\xfb\x7a\xdc\x17\xac\x81\xfd\xfd\x45\x01\x61\x8e\x17\x68" +
	"\xed\xc5\x30\xfa\xe7\xdf\x91\x66\x95\x92\x82\x3f\xf7\xdc\x2a\xf4\x44\x83\xee\x4a\x92\x70\x9a\x1f\xde\x48\x52\x36" +
	"\x16\x46\x95\xf7\x90\xbc\x50\x46\xf3\xc3\xf9\xdc\x03\x49\x29\x67\x30\x94\xec\x52\x39\xf8\x99\x84\x97\xe4\x65\xcb" +
	"\x48\x49\x93\xec\x5d\xc8\x91\x91\x52\x73\xa0\x1f\xb2\x87\x9c\xc3\xc7\x20\xf0\x30\xf2\x07\x1c\xef\x9e\x93\xf2\x95" +
	"\xd0\xa7\x67\x0e\x0b\x2f\x40\xf1\x3b\x90\x94\x3e\x3e\xbe\x0b\xa0\xac\x24\x2f\xa4\xe4\x67\xf8\x37\x10\x92\x9e\xe1" +
	"\xc2\xe9\x9e\x30\x9e\xec\x0b\x88\xdd\x25\x8e\x62\xb4\x5c\x0d\xa0\x7a\x05\xe9\xa5\x57\xef\x8d\x9f\xee\xe8\xa1\x86" +
	"\xba\xbe\xfa\x22\x22\x08\x8c\x71\x79\x31\x3f\xee\xf7\x6f\x12\x2c\x52\x9b\xc2\x63\x5e\xc2\x53\x96\x3f\x24\x19\x30" +
	"\x9e\x70\xca\x78\x35\x5b\xae\x1f\xe1\x30\x16\x4e\x82\x76\xb4\xcc\x9a\x82\xdd\xb6\xb7\xad\xf5\xa4\x05\x77\xc8\x5b" +
	"\xe3\x08\xcc\x2b\x1b\xc4\x3f\x6b\x6a\x5c\x5e\x78\x79\x92\xd2\xc3\x13\xa4\x09\x4f\xc6\xe3\xb1\x68\xa5\x60\xb5\x19" +
	"\x70\xda\xce\xa4\xdd\x99\x35\x5b\x05\xb3\x60\x11\x06\x4b\xf8\x63\x24\x0d\x1f\x69\x46\x8a\x84\x3f\x8f\xe0\x93\x1b" +
	"\xdf\x82\x13\xdd\xc1\x2d\x46\x73\x1c\x4e\xdb\x08\xaa\x49\x55\x14\xbd\x11\xed\xba\xe5\xec\xb6\xcb\xec\x6e\x3f\xd9" +
	"\x7a\xef\xd8\x9d\x2e\xb0\x4f\x7a\xc2\xee\x96\x5f\x71\x55\x14\xce\xf0\x35\x90\x17\xe3\xf0\x54\xc9\x64\xcd\xd0\x7c" +
	"\x0e\xab\xd0\x5d\xa2\x70\x03\x7f\xe1\x0d\x34\x0f\xb1\x6c\x75\xbd\x08\x42\xec\xde\xf8\xcd\xb5\x4a\x56\x88\x17\x38" +
	"\xc4\xbe\x83\x23\x5d\x1d\x1b\xfb\xa9\xb1\x5e\xcd\x1b\xf5\xaa\xee\x22\x1c\xeb\x12\x33\x83\x6b\xf8\x74\x8b\x43\xdc" +
	"\x96\x7b\x76\x05\xc8\x9f\x37\xad\xf8\xcb\xec\x6a\x6a\x38\xde\x3a\x12\xe4\x5b\x37\xeb\xc8\xf5\x6f\x24\x86\x6d\x8b" +
	"\x6f\xe4\x6d\x6a\x20\x1f\x79\x9b\xcf\x5a\x28\xb5\x47\x5c\x7f\x8e\xef\xa1\x5e\x19\x3a\x43\x49\xc1\xd6\x84\x5a\x4c" +
	"\x89\xc6\xb8\x95\x1f\xc1\x5a\xcd\xd4\x4c\x6c\xaa\x18\x4c\x7c\x1f\x87\xc8\x89\xcd\x0d\x46\x61\x55\x89\x34\xe1\x64" +
	"\xcb\xcb\xe3\x61\x67\x8e\x04\x74\x74\x5a\x30\x0b\x50\xd4\x4c\x8d\x35\xed\x95\x44\x05\x3c\x5b\x96\x4e\x7f\xbd\x5f" +
	"\xa3\xaa\x04\x3f\xa8\x50\x6d\x2d\x79\x38\x81\xb7\x5e\xfa\xed\x3b\xc5\xa3\x1b\x01\xe8\xd6\xa0\x4d\x4c\x55\x07\xf5" +
	"\x7b\xa0\x16\xea\x6e\xb8\x1e\x9a\xc4\xd7\x93\x32\x28\x55\x22\x85\x0f\xf9\xf1\x90\x32\x40\x91\x11\x61\x0f\x3b\x31" +
	"\x2c\x5d\xdf\x6c\xd8\xca\xcc\xee\xa9\x5c\x43\x36\x2c\xd1\xfd\xc9\x4d\xf2\x5d\xde\x18\x8d\x8d\x36\x44\x95\xa1\x3a" +
	"\x68\xad\x4f\x30\xc9\x77\x75\x60\xc8\x72\x9f\x3c\xaf\x95\x04\x5d\x23\xeb\x11\xd5\x8e\xce\x0c\xe9\xe0\xb8\x98\xa7" +
	"\xba\x6b\xf7\x16\xaf\x05\x33\x30\xb7\xe3\x1e\x10\xea\xb3\x0e\xd6\x80\x8a\x54\x25\xf9\x92\x83\x00\x35\x18\xf1\xd6" +
	"\xea\xaa\x4e\xb3\x52\xe4\x3a\xbd\x02\xd0\xf3\x2a\x0d\x54\x56\xda\x72\xd9\x27\x5a\xd3\x0c\xbb\x52\x80\x0f\x30\x01" +
	"\x79\xb3\xf6\xc5\x67\x1d\xf2\xbc\xc1\xd8\xbd\x5a\xff\x80\x41\x77\x94\x6e\xc2\x60\xbd\x82\x8f\x9b\xc6\x9f\x35\x18" +
	"\xc3\x09\x90\x87\x23\x07\x9b\xec\x6b\x3f\x95\xe2\x0b\xa9\x0d\xdc\x49\xf2\x19\x2a\x9d\xc4\x7a\x78\x11\xc3\x9f\x81" +
	"\xeb\xf7\x9a\x84\x7d\xad\x27\xc9\xd4\x08\x5a\xb0\xad\xd3\x55\x57\x91\xa6\x30\xab\x34\xaf\xf9\x3d\x35\xe4\xe7\xf4" +
	"\xe0\x4a\xef\xcb\x8b\xa6\xf8\xfa\xc0\xf7\x3f\xe3\xba\x93\xdf\x4c\xe3\x12\xc5\x38\x74\x91\xe7\x7e\xc6\x73\xb8\x73" +
	"\xf1\x27\xe5\x94\x97\x84\x68\x73\xd9\x5f\xe1\xed\xbc\x54\x1c\x64\xad\x15\x7c\x32\x6e\x2d\xae\xc7\xef\x19\x41\x71" +
	"\xdd\x26\xaf\x3e\x99\x08\x19\x91\x36\xd2\x7e\x26\x5d\xd5\xe6\x2d\xf1\x4a\x70\x1a\xa2\xdb\x5d\x76\x64\x5c\x48\xcd" +
	"\x21\x25\xdf\xf5\xbd\x20\x9f\x31\xf0\x01\x62\xf5\x37\x90\x84\xb6\x4b\xa8\xef\xb7\xbf\x90\x04\xa6\xe5\xa4\xf2\x27" +
	"\xff\xd4\xa8\x9e\xa3\x65\x70\x32\xbe\xb0\x55\x62\xe4\xa0\x7c\x98\x88\xe6\xa3\x4c\xe2\xb5\x5e\x6d\x5e\x5f\x7d\xd5" +
	"\x28\x9b\x6a\x9f\x09\x13\x69\xb0\x7d\x3c\x66\x59\x05\x31\xb2\xfc\x95\x94\x26\x2b\x32\xca\xb7\x45\x52\x72\xf3\xe7" +
	"\x7c\xd9\x23\x18\xd9\xd7\x96\xe6\x53\x9e\xff\xef\x2a\xfd\x17\x00\x00\xff\xff\xda\x08\xb8\x7e\x11\x0e\x00\x00")

func bindataDbBasesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbBasesql,
		"db/base.sql",
	)
}



func bindataDbBasesql() (*asset, error) {
	bytes, err := bindataDbBasesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/base.sql",
		size: 3601,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1533123121, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbIndicesAlternatesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xd1\x6e\xab\x38\x10\x7d\xe7\x2b\xe6\xad\x38\x8b\x1a\xf6\x3e\xa6" +
	"\xda\x4a\xdc\xc4\x6d\x59\x51\xa8\x80\xec\xbd\xdd\x97\x88\xc2\xdc\xd6\x52\x62\xb2\xd8\x69\x9b\xbf\x5f\xd9\x4e\x88" +
	"\x49\xa0\x6d\x56\xda\xa7\x28\xc8\x33\x73\xce\x99\x63\xcf\x8c\x47\x29\xae\x1b\x14\xc8\xa5\x00\xc6\x2b\x7c\x07\xb9" +
	"\x5d\xa3\x00\xf9\x52\x48\x10\xb2\x90\x4c\x48\x56\x0a\xa8\x39\xac\x8b\x67\x14\xe0\x16\x8d\x64\xe5\x12\x05\x14\xbc" +
	"\x02\x59\xaf\x59\x29\xc8\x68\xec\x38\xd3\x94\x06\x39\x85\xfc\xf1\x81\xc2\xdb\xb7\xfa\x72\xb5\x35\xf9\x82\x0c\x68" +
	"\x3c\xbf\x07\xf7\xa2\xac\xf9\xaf\x25\x2b\xe5\x85\x07\x17\xeb\x7a\x89\x2b\x56\x5e\x90\x2b\xc7\x19\x8f\x42\x5e\xb1" +
	"\x12\x05\xac\x36\x42\x42\x85\xbf\x18\xc7\x0a\x18\x87\x02\xde\x8a\xad\xc1\xb2\x62\x42\x30\xfe\x0c\xc8\x65\xc3\x50" +
	"\x40\x59\x37\x0d\x96\x72\xb9\x55\xe7\x8b\xcd\x52\x82\xac\xc1\xbf\xf4\x47\xe3\x16\x49\xf0\x3d\x32\x50\x98\x49\xff" +
	"\xb4\xdd\x62\xd1\x40\x90\x39\x3f\xc2\xfc\x0e\x18\x2f\xeb\xd5\x7a\x89\x12\x77\x94\xf6\xf8\x14\x64\xd7\x01\x00\xc8" +
	"\x68\x44\xa7\x39\xcc\xc2\x2c\x0f\xe3\x69\xae\x25\x58\xb0\xca\x83\x06\x5f\x17\xbb\x64\xa0\x7e\x3d\xd8\x08\x6c\x16" +
	"\xac\xd2\x61\x37\x69\x72\xaf\x0b\x37\xf8\xca\x04\xab\xb9\xd0\x9f\x7f\xdc\xd1\x94\x82\xab\x62\x99\x68\xf0\x15\x1b" +
	"\x09\xd7\xe0\x43\x92\x82\xfd\x0d\x2b\x02\x41\x3c\xdb\x67\x84\x30\x83\x38\xc9\x21\x9e\x47\x91\x43\x3c\x38\x1f\xac" +
	"\xff\x01\xca\x41\x11\xf4\x91\x79\x1c\x26\x31\x04\x51\x64\x17\x18\x7d\x25\x9a\x78\xba\xfe\x20\xca\x75\xd1\x20\x97" +
	"\x8a\x5e\x90\x1d\x90\x1a\x90\xd3\x64\x1e\xe7\x6e\xcb\x63\x87\x99\x4c\x26\x37\x51\x12\xe4\x2a\xe0\x0d\xd9\xf3\x8b" +
	"\x3c\xe0\x38\xd6\xe4\xcf\x24\x8c\x75\x03\x54\x66\xd9\x20\xc2\x3c\x0b\xe3\x5b\x70\x77\x95\x88\x0e\xbd\x4d\x93\xf9" +
	"\x03\x7c\x7f\x3c\x80\x31\x08\x86\xa9\xf7\x02\x3d\x1f\xdf\x71\x75\x2b\xa9\x43\x3c\xe7\x44\x55\xac\x98\x14\x65\xbd" +
	"\xe1\x7d\x3a\x0e\x3a\xd2\xa0\x1b\x11\xb8\x09\xa3\x9c\xa6\xe0\x1a\xff\x75\xec\xf7\x07\xf8\x44\x77\xa0\x16\x4c\xb2" +
	"\x57\xd4\x45\x3c\x5d\xe0\x2b\xe1\xd7\xbb\x70\xf3\x57\x07\x7f\x7e\x01\x94\x99\xbb\x7e\x1f\xd0\x63\x4f\xc9\x72\xfd" +
	"\x57\x94\xb0\xec\x9e\xcd\xef\xdd\x0e\xb5\x1e\xb2\xfa\x90\x45\x60\x98\xd0\x07\x7d\xe9\x65\xf0\xdf\xae\x90\x95\x74" +
	"\x77\x89\x3e\x24\xdd\x77\x8d\xdc\xf6\xf3\xb5\x4f\x26\x93\x30\xce\xe9\x2d\x4d\xdb\x23\x15\xae\xe5\xcb\xce\xc3\x26" +
	"\xd9\x89\x4c\x96\x97\x3f\x51\xcb\x3a\xd9\x2b\xda\x69\xe3\xfe\xf7\xcb\xf9\x6d\x98\x69\x87\xcc\x30\x49\x8b\xc9\xd9" +
	"\xfc\xcc\x0d\x36\xf3\xec\xb8\x5d\x87\x11\x38\x99\x1c\xcd\x48\x35\x76\x3d\xdb\x18\xf6\xf3\x39\x4c\xba\x1d\xa4\x03" +
	"\x09\xbb\x2f\x96\x8e\xfc\xdd\xf7\xfd\x91\xc5\x65\xdc\xed\x3d\xfc\x06\xf7\xc1\xcf\xee\x8d\x48\xfe\xa2\xa9\xfb\x10" +
	"\xa4\x79\x98\x2b\x0c\x7b\x8b\x5b\xf2\x12\xd2\xf7\xee\x75\xdd\xab\x94\x31\xdb\xc5\xe0\xcc\xb2\x40\xeb\xe4\xf6\x3d" +
	"\x31\x92\x76\xdc\x23\x4e\xac\x43\x3c\x9d\x43\xfd\xdf\xbf\x86\x9d\x4a\x47\xaa\x58\xe6\xb2\x19\x2d\x2e\x5b\xab\xb5" +
	"\x4f\x99\xa9\xa7\xcb\x1b\x12\x76\x69\x1d\x47\x8c\xbe\xea\xb0\x64\x2b\x7c\xaa\x37\xbc\x12\x1e\x3c\x23\xc7\xa6\x90" +
	"\xb8\x10\xa8\x36\x17\x13\x50\x36\x58\x48\x56\x73\xdd\x96\x55\xf1\xae\x35\x84\x85\xab\x7f\x87\xdb\xfd\x35\xf8\xed" +
	"\x0b\x78\x36\x03\x87\x38\x9f\x54\xd2\xd6\x52\x5b\xdf\x49\xd5\xfd\xd4\x09\x22\x9a\x4d\xa9\x6b\xbc\xe0\xf9\xb6\x31" +
	"\x3a\x9d\x4c\xc3\xdb\xbb\xfc\x00\xa7\x6d\xd9\x0e\x55\x8f\x7f\xd5\xb2\x38\x4b\x93\x07\x6b\xb5\x6b\x07\xcc\x55\xbb" +
	"\x81\x86\xf1\x8c\xfe\x84\x24\xee\x59\xfd\x5a\x9f\xe8\xad\x73\x2e\xb0\x82\xa7\x2d\x44\x41\x4e\xd3\x20\x32\x50\x18" +
	"\x87\x7f\x36\xba\x51\x87\x4d\xf2\xa3\x8c\x86\x19\xcc\x68\x36\xdd\x4b\x70\x90\xe7\xd8\xce\xe4\xca\x09\xe2\x20\x7a" +
	"\xfc\xbb\x67\x2f\xbd\xfa\x37\x00\x00\xff\xff\x42\x7b\x33\xff\x8c\x0b\x00\x00")

func bindataDbIndicesAlternatesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbIndicesAlternatesql,
		"db/indices/alternate.sql",
	)
}



func bindataDbIndicesAlternatesql() (*asset, error) {
	bytes, err := bindataDbIndicesAlternatesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/indices/alternate.sql",
		size: 2956,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1533003895, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbIndicesDefaultsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xdb\x6e\xa3\x48\x13\xbe\xe7\x29\xea\x2e\xc0\xcf\xf8\x10\xfd\x5a" +
	"\xad\x12\xcd\x4a\xc4\x26\x09\x2b\x82\x33\x80\x77\x92\xbd\xb1\x3a\xd0\x93\xb4\xd6\x1c\x96\x6e\x27\xf1\xdb\xaf\xba" +
	"\x9b\xb3\xc1\x38\xd1\xec\x5e\x59\x86\xea\xaa\xaf\xbe\x3a\x50\xd5\x53\xdd\xc3\x59\x8e\x29\x4e\x18\x05\x92\x44\xf8" +
	"\x1d\xd8\x3e\xc3\x14\xd8\x0b\x62\x40\x19\x62\x84\x32\x12\x52\x48\x13\xc8\xd0\x33\xa6\xa0\xa2\x9c\x91\x70\x8b\x29" +
	"\xa0\x24\x02\x96\x66\x24\xa4\x9a\x3e\x55\x94\x85\x67\x99\x81\x05\xc1\xe3\xbd\x05\x6f\xe7\xe9\x24\xde\x4b\x7d\xa6" +
	"\x0f\x96\xbb\xbe\x03\xf5\x2c\x4c\x93\x1f\x5b\x12\xb2\x33\x03\xce\xb2\x74\x8b\x63\x12\x9e\x69\x97\x8a\x32\xd5\xed" +
	"\x24\x22\x21\xa6\x10\xef\x28\x83\x08\xff\x20\x09\x8e\x80\x24\x80\xe0\x0d\xed\x25\x96\x98\x50\x4a\x92\x67\xc0\x09" +
	"\xcb\x09\xa6\x10\xa6\x79\x8e\x43\xb6\xdd\x73\x79\xb4\xdb\x32\x60\x29\xcc\x26\x33\x7d\x5a\x21\x31\xaf\x1c\x09\x85" +
	"\x48\xf5\x4f\xfb\x3d\x46\x39\x98\xbe\xf2\xdd\x0e\x6e\xa1\x70\x64\x47\x71\x4e\xd3\x90\xa0\x6d\x21\xc6\x11\xab\x0a" +
	"\x00\x80\x6f\x39\xd6\x22\x80\xa5\xed\x07\xb6\xbb\x08\xc0\x5d\x3b\xce\xc5\x45\xd3\xb9\xa9\x8e\xdf\xc1\x9f\xc0\x7d" +
	"\x9a\xed\xb6\x28\x27\x6c\xaf\x4f\xf9\x79\x4e\xa2\x21\x18\xdb\x90\xc8\x80\x1c\xbf\x6e\x0a\xdb\xc0\x7f\x0d\xe0\x56" +
	"\x37\x24\x12\x66\xae\xbd\xd5\x9d\xc0\x99\xe3\x57\x42\x49\x9a\x50\xf1\xf8\xfb\xad\xe5\x59\xa5\x20\xd8\x3e\xb8\x2b" +
	"\x09\x41\xbc\x5d\xbb\xf6\xca\x05\xb3\xf8\xd7\x45\x5a\x73\xdd\xc6\xfb\x6f\x43\x03\xd3\x5d\x0a\x95\x84\xe6\xf8\x15" +
	"\xe7\x0c\x7e\x83\x99\xa2\x19\x40\x92\x30\x8d\xb3\x2d\x66\x98\x5b\xfe\x00\xe7\x25\xdc\x1c\x27\x8c\x1b\x33\xfd\x1a" +
	"\xfb\x00\xde\xc1\xc0\xfe\xbe\xb2\x5d\xe1\x0d\xd7\xc0\x72\x8c\x61\xed\xdb\xee\x0d\xa8\x85\x46\x6d\x98\x59\x7d\x5c" +
	"\x3d\x77\xf3\x93\xce\x15\xfe\xcc\x8e\x04\x61\x84\xc0\x93\x90\x8f\xe9\xd0\x0c\xa5\x70\x2e\x4c\x77\x09\xe3\x48\x0e" +
	"\xc1\x6f\x26\x12\xe1\x62\xb5\x76\x03\x55\xd7\x2e\x2e\xae\x9d\x95\x19\x88\xd4\x4a\x19\xda\x72\xd5\xe2\x78\x3b\x81" +
	"\x18\x89\xf1\x53\xba\x4b\x22\x6a\x54\x21\xa0\x06\x3c\xe3\x04\xe7\x88\xe1\x0d\xc5\xbc\xac\x65\x24\xc2\x1c\x23\x46" +
	"\xd2\x44\x18\x8a\xd1\x3b\xff\xd5\x60\xa3\x8a\xdf\x46\x02\x0a\xe1\x08\x67\xec\x05\xbe\xc2\xb9\x78\x71\xe3\xad\xd6" +
	"\xf7\x70\xf5\x58\xc0\x1c\xa6\xa5\xc1\xf5\x07\x3d\x11\xc8\x87\x51\x68\x86\xd2\xcb\xae\xd0\x74\xc0\x66\x27\x03\x06" +
	"\x01\xbd\x61\xf2\xfc\xd2\x00\x32\x9c\x04\x15\x03\x3d\xaa\x65\x8a\x92\x1c\x47\x65\x17\x1f\x47\xd8\xc1\x96\xcd\x27" +
	"\x12\x8b\xa8\xc4\xaa\xed\x19\x90\x9d\x37\x5e\x94\xed\xa7\x87\x39\x59\x85\x47\x28\xca\xe6\xbd\x65\x39\x7a\xec\xbc" +
	"\x73\x4c\x22\x6e\xe5\xcb\x7c\xc2\x49\x11\x0d\xab\x6c\x56\xd9\xb9\x7c\xf6\x75\xb8\x67\x72\xa9\x6e\x8c\xc1\xcf\x50" +
	"\x4e\xb1\xf5\xad\xee\xfc\xd6\xb7\x45\xa1\xe0\x80\xc3\x82\xba\x06\x5b\xa5\xad\x3a\xd8\x80\xf8\x47\xad\x3f\xdb\x20" +
	"\x2b\xdd\x3f\x1e\xbb\x01\xea\xaa\x94\x18\xc6\xc1\x5d\xaa\x5d\x19\xee\x58\x5d\x0d\x35\xd8\x63\x84\x70\xed\x83\xe4" +
	"\x74\x74\x1f\xa6\xce\x98\xe6\xc7\xde\x3e\x55\x95\x7f\x6f\x0b\xea\xf6\x9d\x98\x1c\xe9\x36\xc7\x1b\x08\x87\xf0\x53" +
	"\xf2\xc0\x74\x2c\x7f\x61\xa9\x22\x94\xc6\x4c\x93\x75\xd4\x4a\x08\xe9\xa9\x48\x85\x46\xb0\x8a\x90\xd7\x78\x85\x40" +
	"\x05\xe2\xe0\xb5\x63\x5d\x07\x52\xe6\x68\x12\x37\xce\xf5\x63\xd6\xba\x9e\xdf\x58\x9f\xf2\x5c\xca\xad\xef\xa4\xe7" +
	"\x1a\xac\xfe\xb0\x3c\x50\xef\x4d\x2f\xb0\x03\x4e\xfc\xd5\x63\xeb\xa0\x98\x56\x56\xde\xd2\xf2\xf8\x9b\x52\x0d\x2c" +
	"\x2d\x7f\xd1\x57\x44\xc3\x79\xe3\x58\xff\x05\xf4\x5a\xb8\x0d\xbc\x56\x38\x86\xba\xc6\xc6\x51\xef\x12\x9e\xc7\x55" +
	"\x13\x28\x06\xe9\xb1\xb6\xad\x96\x30\xa6\x0d\xbb\xfa\x36\x7d\x56\xdb\x9f\xba\x69\xe1\x48\xef\x27\xe7\x68\xf3\xa9" +
	"\x33\x6f\x80\xd7\x13\xf2\xa9\x52\x71\x38\x86\xb4\xb2\x58\x33\x40\x89\x49\x12\xa3\xf7\x42\x90\x53\x42\x19\x8a\xb3" +
	"\x61\x1e\xee\x6c\x57\x2d\x87\x5d\xe1\x5f\x59\xf2\x70\x67\x3e\x74\xde\xc8\x26\x60\x08\x3d\xe5\xb9\xca\x44\x79\xb8" +
	"\x7a\x50\x6b\xe8\xc8\xa0\xf7\xea\xc1\xb1\x69\xba\x6a\xcf\x05\x56\xee\x1e\x3f\x28\x03\x70\xd8\xd9\xda\xa1\x15\x6f" +
	"\xac\x87\xc0\x33\x17\x81\x8a\xb3\x34\x7c\x91\x76\x54\xc7\x32\xfd\x40\x6d\x82\x30\x62\xf4\x17\xde\x44\x88\x61\xc1" +
	"\xe3\xff\xe6\xc6\xdc\x98\x6b\xda\x97\x1b\xb1\x30\x71\xe1\xa6\x57\x6d\x61\x29\xaa\x69\xd3\x5f\x7f\xf9\xff\x6c\x36" +
	"\x99\xf5\x65\x48\x7f\x48\x7e\x46\xb3\xed\x1b\x91\xfb\x7c\x6e\x7a\xfb\xa5\xe9\xcd\x67\x80\xf3\x38\x8c\x95\x59\xb5" +
	"\xc8\x8e\xed\x59\x12\x33\xca\x8a\x21\x49\x67\x6f\x8d\x71\xa9\x8b\x67\xa0\xc6\x51\x31\x06\x34\x93\x83\xbd\x0d\x8c" +
	"\x3d\x9a\xa1\x0c\xed\x1f\xfa\xc8\x1c\x59\xd7\xb3\x9c\x9b\xaa\xa1\x69\x74\x01\xd5\x5b\x2b\x52\x09\x7c\x58\x7e\x9c" +
	"\xbe\xe1\xbd\x8f\xb7\x5d\xc9\x42\x6f\xbb\xea\x92\x77\xda\xf2\xd7\xa8\xc5\xc2\x72\x35\x39\x2b\xf2\x66\xe4\x94\x65" +
	"\x4e\x4c\x8a\xcd\xbd\xab\x67\xff\xa4\x07\xf6\x79\xd9\xef\x33\xb1\x9b\x95\x1b\xf9\xb1\x5d\xa1\x81\xb0\x36\x6a\x34" +
	"\x17\x9f\xbe\xc1\x5b\x3a\xd1\x34\x2d\xce\x69\xb2\x8f\x8c\x8d\x49\x27\xae\x67\xbd\xb1\x3e\x0d\x7e\x3d\x56\x7d\xd4" +
	"\x03\x45\x53\x46\x2c\xc9\xcd\x2e\x23\xe1\x81\xd5\x72\xef\x2a\x46\x30\x99\x4b\xc5\x0c\x56\x24\x56\x2b\x92\x9e\x7d" +
	"\x73\x1b\xd4\x70\xaa\x90\x15\xa8\x7a\x6a\x5f\xbb\x54\x94\xa5\xb7\xba\x6f\x5c\x4b\x55\x5f\x81\xcb\xea\xf6\xcc\x76" +
	"\x97\xd6\x03\xac\xdc\x9e\x6b\xab\x2a\x4f\xc4\x8d\xd9\x9a\xe2\x08\x9e\xf6\xe0\x98\x81\xe5\x99\x8e\x84\x42\x12\xf8" +
	"\x7b\x27\x02\x55\xdf\x82\x1d\xd3\x58\x34\x20\x3e\x39\x95\x14\xd4\xf4\x74\xd3\x59\xbb\x54\x4c\xd7\x74\x1e\xff\xec" +
	"\xb9\x53\xbb\xfc\x27\x00\x00\xff\xff\xeb\xc7\x1b\xe8\x48\x14\x00\x00")

func bindataDbIndicesDefaultsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbIndicesDefaultsql,
		"db/indices/default.sql",
	)
}



func bindataDbIndicesDefaultsql() (*asset, error) {
	bytes, err := bindataDbIndicesDefaultsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/indices/default.sql",
		size: 5192,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1533131369, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbQuerypagessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x5f\x6f\x9b\x3e\x14\x7d\xe7\x53\xdc\x47\xe8\x8f\x5f\xbb\xf6\xb1" +
	"\xd3\x1e\x58\xe2\xb6\x4c\x59\xa8\x80\xae\xaa\xaa\x0a\xb9\xe0\x52\x77\xc4\x20\x7c\xa3\x34\xdf\x7e\xb2\xcd\xbf\x10" +
	"\xa8\xba\xbd\x25\xbe\xff\xce\xb9\xe7\xd8\x9c\x9d\x70\xf1\x52\xd6\x1b\x8a\xbc\x14\x12\x5e\xca\x1a\x68\x8d\x3c\x2d" +
	"\x98\x74\x01\xcb\x8a\xa7\x12\xa8\xc8\x20\x2f\xca\x67\x5a\x9c\x9c\x59\xf7\x7e\x7c\xd3\x06\xbc\x08\x6c\x0b\x00\x20" +
	"\x22\x2b\xb2\x88\xa1\xa2\x39\x4b\x78\xa6\xce\x75\x46\xc2\x33\x1d\xbe\x0a\x83\x9f\xb0\xbb\x28\x4f\x55\x82\xd4\x47" +
	"\xf7\x37\x24\x24\xa6\x20\x63\x15\xbe\xc2\x37\x38\xb7\x1c\x17\x2a\x56\xa7\x4c\x20\x2f\x58\xc6\x45\xc6\x53\x76\x3c" +
	"\x05\xf7\x15\x73\xdb\x59\x2e\xec\x19\xad\x5d\xd8\x31\x9e\xbf\xa2\xab\xf3\x9a\x1e\x49\x4d\xc5\x6f\xdb\x81\xe0\x17" +
	"\x09\x61\xa7\xda\xf4\xcd\x4d\xa2\x9d\x31\x21\xd9\x28\xef\x7f\x38\x3f\xfd\xe2\x9c\x5d\x87\xc4\x8b\x49\x14\xdb\x53" +
	"\x49\x19\xfc\x07\xd3\xb5\x17\x8e\x7b\xee\xa8\x59\x26\x3c\x9e\x38\xea\xe2\x45\xfa\x64\x16\x0d\x7e\x0a\x0e\xce\xe0" +
	"\xc1\x03\x40\x46\x91\x69\x58\x53\x1b\xc3\x5d\x5f\xf5\x11\x0d\xdc\x0d\x04\x57\x81\x43\xc9\x1b\x15\x9f\xf7\x4a\x27" +
	"\x23\xbd\xbf\x5e\x06\xf7\x46\x11\xfb\xd6\x0b\x63\x3f\xf6\x83\x35\x7c\x7f\x68\x94\x35\x82\x0e\xac\x11\x84\x4b\x12" +
	"\xaa\xb8\x11\xd9\x31\x18\xcc\xd8\x7f\x69\x00\x4b\x12\x2d\x9a\x2e\xf8\x69\x18\x6e\xe7\xe9\x19\x40\xf8\x79\x44\xf3" +
	"\xbd\x0c\xb6\xe9\x9b\x40\xf3\x7c\xee\xca\xb9\x66\x10\xad\x6b\xba\x4f\x68\x9e\xdb\x0b\x4f\x79\xa5\xb9\x15\x43\xe3" +
	"\x1f\x1b\xd3\x58\xf0\x58\xe9\x39\xc7\x0c\xa4\x36\xcc\xb4\xbd\x94\xd6\xea\xcf\x86\x51\xb9\xad\xd9\x86\x09\x74\x7a" +
	"\x72\x2a\x02\x5e\xb4\xd0\xa9\x83\x14\xd9\x9b\xe5\x98\xaf\x8e\x5d\x87\xc1\xdd\xad\x6a\x71\xc0\x74\x76\x41\x1f\xee" +
	"\x68\xbc\x1e\x23\xce\x10\x4e\x47\x85\x8b\x8c\xbd\xab\xf8\xc5\x61\xb8\x63\xa4\x62\x1d\x23\x89\xf4\x63\x2a\x34\xcf" +
	"\x27\xd9\x58\x4e\x0b\xb2\x2e\x77\x09\x96\xc9\x9b\x2c\x45\x83\x4e\x17\x98\x9f\x3a\x1b\x39\x16\xed\xc3\x47\x9f\x25" +
	"\xd6\x34\xc5\x56\x8c\x26\xc6\xa5\xfe\xdb\x9e\xbe\x6c\x8b\x62\x58\x95\xd6\x4c\xbf\xf3\xda\x8e\xbd\x1b\x3b\xd2\x9b" +
	"\x3d\x7b\x47\x26\x32\x96\xa9\x60\x63\xeb\x45\xe0\xad\x48\xb4\x20\xb6\x26\x69\x2c\xf6\xf8\x74\x79\x39\xbf\xa5\xc7" +
	"\xa7\xa3\xd2\x32\xe5\xb4\x78\xdb\x6e\xaa\x51\x83\xcd\x5e\x4d\x7a\x7c\x72\xac\x0e\x84\x3a\x50\xdf\x24\xc7\xb1\xba" +
	"\x47\x44\xd3\xd1\x1f\x0f\xc0\x0a\x56\xe4\x2a\x86\x1f\x81\xbf\x86\x95\x17\x93\xd0\x5b\x1d\xca\x3d\x56\xf9\x2f\x97" +
	"\x37\xd8\x86\xde\x42\x2f\xb9\x30\x4e\x1f\x90\xe9\x25\xdf\x0a\xc1\x24\xda\x58\x69\xfc\xc9\x20\xc7\x01\xfd\xc9\x0c" +
	"\xc2\xa5\xbf\xf6\x56\x7e\xfc\x00\x89\xdd\x39\x52\xb5\xd4\x4c\x46\x2c\xef\x22\x7f\x7d\x0d\x6d\x9e\xda\x4e\x02\xc1" +
	"\x1a\xe2\xf0\x8e\x58\x3d\xfd\xd9\x1b\x30\x2e\xef\x5d\xdb\xe0\x33\xaf\x50\xfb\x4f\x2f\xe0\xab\xf5\x27\x00\x00\xff" +
	"\xff\x6b\x81\x46\x28\x0c\x08\x00\x00")

func bindataDbQuerypagessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbQuerypagessql,
		"db/query-pages.sql",
	)
}



func bindataDbQuerypagessql() (*asset, error) {
	bytes, err := bindataDbQuerypagessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/query-pages.sql",
		size: 2060,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1532621129, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbQuerytoptenbyyearsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x41\x6f\xa3\x3c\x10\xbd\xe7\x57\xcc\x11\x2a\x94\x26\xbd\x7e\xca" +
	"\x81\x2f\x61\x5b\x56\x14\x56\x40\x54\xed\xc9\x72\xc2\x88\x7a\x37\x31\x2c\x76\x94\xf2\xef\x57\x33\x80\xd3\x34\xd1" +
	"\x9e\x90\xdf\x3c\xcf\x3c\xbf\x37\x3c\x3e\xc8\xce\xaa\xfd\x01\xc1\x36\x2d\x58\xd4\xb0\xeb\xa1\x47\xd9\xc1\x9f\x13" +
	"\x76\xfd\xc3\xe3\xec\x2d\x2e\x5f\x18\x31\x10\x16\xe0\xcd\x00\x00\x8a\x28\x89\xd6\x25\xa3\x7c\xfe\x96\x67\xaf\x70" +
	"\x7e\x6a\xe6\x56\x1d\x71\xd7\x9c\x74\x65\x02\xa8\x51\x63\x27\x2d\x0a\x83\x9d\x42\xe3\x1d\x95\xa6\x0b\xc1\x51\x7e" +
	"\xd0\xd7\x07\xe1\xf1\x97\x3b\x6c\xd3\x38\x4b\x21\x4c\x92\xcf\xfd\x17\x34\x91\x87\xf8\x01\xe9\x53\xfb\x5b\x0d\xad" +
	"\xac\x51\xa8\x8a\x70\x66\x08\x55\x5d\x4b\x22\x82\x61\xe8\xed\x25\xca\xa3\xe1\x42\x85\xad\x7d\x87\x15\x2c\xb9\x73" +
	"\xdf\xe2\x6d\xe3\x4d\x5c\x94\x71\xba\x2e\xb9\x7c\xdd\x52\xe9\x4a\xed\xd1\xec\x7a\x67\xc0\x9d\xd6\x4f\xa3\xe8\xe5" +
	"\xe2\xa6\xb5\x98\xb3\x11\x20\xe6\xd4\x3b\x00\xd9\x75\xb2\x17\xb2\xae\xbd\x75\x58\x94\x9e\x67\x5b\x56\x2d\xac\xb2" +
	"\x07\x0c\x60\x3a\xca\x9d\xb1\x9d\xdc\x5b\x46\x86\xc7\x5e\x18\xca\x30\xe2\xd3\x30\xd2\x78\xec\xe9\x8e\x0f\x59\xbe" +
	"\x89\x72\xf8\xff\x27\x9c\x51\xd5\xef\x16\x36\x51\xb1\x66\x12\xfb\x02\x97\x87\x71\xc4\x93\xcd\xa3\x29\x01\x97\x93" +
	"\xb0\x8c\xf2\x30\x19\xdf\xf0\x25\xff\x81\x19\x4c\x39\x04\xe3\x1c\x47\xfd\x87\x69\x17\xe3\x78\xe1\x56\x83\x04\xf6" +
	"\x06\xc2\x74\xe3\xf2\x84\xd5\xa8\x6a\xee\x10\x2e\xf7\x2d\x52\x89\x84\xb2\x91\x8c\x7e\xc9\x60\x9a\x73\xcf\x06\x57" +
	"\x4c\xe2\xd7\xb8\x84\xe5\x82\x01\x1f\x04\x7c\xcf\xe2\x74\xd8\x67\x1a\x38\x38\x65\x5b\xd8\x16\x71\xfa\x0c\xde\xf8" +
	"\xd4\x61\x71\x9f\xf3\x6c\xfb\x83\x1a\x5f\x87\x4a\xe1\xd3\xf9\x97\x69\xf4\xdd\xff\x26\x80\xae\x39\x0b\xdb\x08\x62" +
	"\x8c\xb9\x0f\xf8\xcd\x36\x38\x7f\x8d\x4b\x57\xe9\x0a\x3f\x3a\xa9\x7f\x2b\x5d\x7f\xca\x98\xa8\xbe\x23\x49\xad\x4f" +
	"\xf2\xc0\x54\x34\x13\x99\xab\x34\xf3\x92\x3c\x2f\xe9\xf5\x63\x86\x9f\x6e\xd2\xcb\x74\xb7\x24\x7c\x72\x23\x09\xf9" +
	"\x6f\xf6\x37\x00\x00\xff\xff\xba\x35\x83\xe7\x47\x04\x00\x00")

func bindataDbQuerytoptenbyyearsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbQuerytoptenbyyearsql,
		"db/query-toptenbyyear.sql",
	)
}



func bindataDbQuerytoptenbyyearsql() (*asset, error) {
	bytes, err := bindataDbQuerytoptenbyyearsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/query-toptenbyyear.sql",
		size: 1095,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1532621129, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbTestsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xc1\x6a\xc4\x30\x0c\x44\xef\xfe\x0a\xdd\x0c\x0b\x59\x43\x8f\x0d" +
	"\x3d\xf5\x13\x0a\x3d\xf9\xa2\x38\x72\xab\xe2\xc6\x8e\xa5\x04\xfc\xf7\x25\xbb\xdd\x10\x16\x72\x93\x66\xe6\x0d\x8c" +
	"\xbb\x98\x22\x73\x82\x6e\x85\x11\x15\x23\x27\x2a\xa8\xdf\x6f\x16\x07\x71\xdb\xe5\x5e\xdc\xfb\xc7\xa7\x85\x2e\x80" +
	"\xf5\x0c\x4a\xa2\x57\x99\x93\xed\xcd\xc5\x19\xe3\x8b\x90\x42\xc1\x2f\xaa\x90\x63\xec\x8d\xf1\x0f\x41\x1e\x5d\xf0" +
	"\x7a\x6c\x06\x7b\x33\xaf\x41\x56\xdb\xdf\xd3\x95\x56\x16\xce\xd3\x29\xb1\x07\x8e\x94\xe4\xc0\x98\x7e\x96\xdf\x72" +
	"\xca\x1d\x22\xff\xa4\xf1\x0c\x03\x0a\x6d\x13\xfa\xed\xe1\x69\xe4\x40\xe2\x46\x8a\xb8\x24\xdd\x75\x6d\x85\x64\xff" +
	"\xe6\x85\x6a\xeb\x34\x17\xa5\x69\x68\x8d\xb0\x3e\x59\xf7\x4d\x37\xed\x2f\x00\x00\xff\xff\x08\x98\x32\x0e\x52\x01" +
	"\x00\x00")

func bindataDbTestsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbTestsql,
		"db/test.sql",
	)
}



func bindataDbTestsql() (*asset, error) {
	bytes, err := bindataDbTestsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/test.sql",
		size: 338,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1533003895, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbTypessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\xcd\x6e\xe2\x30\x10\x3e\x93\xa7\xf0\x11\x24\xb4\xd2\x22\xed\x69" +
	"\x4f\x5e\x30\x5b\x24\x0a\x28\x58\xa8\x08\x71\x70\x61\x4a\x2d\x92\x49\x64\x3b\x2a\x79\xfb\x2a\x9e\x44\x98\x10\xda" +
	"\x5b\x73\x9c\xef\xcf\x9f\xc7\x19\xc7\x82\x4b\xc1\xe4\x76\x25\xd8\xc7\x28\xfb\x55\x82\x32\x29\x28\x5b\x18\x48\x01" +
	"\x1d\xe3\x6b\xd6\x8f\x7a\x1b\x95\x14\xc0\x82\x6f\x3a\x5f\x72\x39\x8c\x7a\x2b\x30\x07\x40\xa7\x13\x68\x01\x13\x40" +
	"\x0b\x21\xda\x00\xb1\xc2\x73\xe8\xc4\x66\x8b\x6a\x2c\xb3\x5c\x1f\xba\xf8\x1e\x78\xe8\xe6\xd1\xd0\x92\xdc\xb6\xa0" +
	"\x4c\x3b\x24\x1a\xfc\x8d\xa2\x76\x5d\x8d\x47\xb8\xb8\x32\x87\x51\x50\xda\x52\x6b\xaf\x6b\xf0\xda\xa7\xd2\xa4\xa5" +
	"\x57\x0d\x3d\xe1\x39\x94\xd5\x84\xd6\x1d\xee\xf6\x9d\xd1\x69\x99\xab\x13\x5c\xa3\xa4\x76\x74\x8b\x1b\x1e\x8f\x9f" +
	"\x78\xdc\xff\xf3\x7b\x34\xa0\x10\xfe\x6a\x9d\x51\x07\xc7\x98\x14\x2f\x92\x66\xbe\x79\x37\x7d\x66\x09\xfc\xb7\x5c" +
	"\xce\x05\x5f\x3c\x48\x87\x8b\x03\x3c\xc2\xf1\x87\x4e\x41\xc3\x69\x91\x24\x5f\x68\xc6\x06\x94\xd3\x19\xd2\xfe\x66" +
	"\x0b\x29\xfe\x8b\x98\xa0\x95\x3a\xc1\x04\x72\xf7\xde\xec\xb3\x82\x7c\xb5\xbb\x6e\x55\x23\x8d\x6f\x19\xbb\xd6\xaa" +
	"\xd4\xec\x66\x87\x61\x7d\x4a\x58\x3b\x45\x3b\xac\x39\xdd\x6f\x63\xb7\x27\xf6\x5c\xe3\xd9\xde\x38\x56\x4e\x0f\x76" +
	"\xed\xad\x8c\xc2\xb3\xc6\xd3\xf5\x50\x7e\xda\xf9\xaa\x1a\xea\xf7\xce\x0a\xb1\x50\x89\x97\x82\xbd\x4b\x28\xeb\xff" +
	"\xe0\xe6\x26\x5b\xe4\xf6\xf9\x28\xe8\x33\x00\x00\xff\xff\xa6\x88\xd0\xeb\x18\x04\x00\x00")

func bindataDbTypessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbTypessql,
		"db/types.sql",
	)
}



func bindataDbTypessql() (*asset, error) {
	bytes, err := bindataDbTypessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/types.sql",
		size: 1048,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1532621129, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesDatahtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xc1\x0a\x82\x40\x10\x86\xef\x3e\xc5\xf0\x9f\x07\x5f\x20\x3a\x08" +
	"\x45\x44\x20\xa1\xd0\x45\x3c\x2c\x39\x88\x64\x53\x68\x45\x30\xcc\xbb\x87\xbb\x87\xa8\xdb\xb7\xdf\xc2\x7c\x7f\x83" +
	"\x2a\xe8\x05\x8c\xa3\x4c\x67\xd1\xc7\x30\x0a\x18\x1b\xd1\x59\x7e\xcc\x5e\x3b\x79\x83\x51\x5c\x6f\xda\x83\x51\xdf" +
	"\x83\x82\x71\x0a\xe3\x53\xd0\x66\xaf\x30\x51\xb9\xdd\x15\x55\x51\x1e\x6a\x5a\x53\x63\x36\x05\xed\x85\xf2\xe5\xfc" +
	"\xa0\xfd\xec\x9e\x11\xd1\xf2\x11\x95\x3b\x9b\xe5\xdf\x44\x7a\xff\x75\x93\x8c\xe9\x84\xb1\x9e\x70\x19\x90\x28\x6e" +
	"\x70\x6f\xd9\x4c\xb4\x73\xcf\xda\xd5\x27\x00\x00\xff\xff\xd1\x22\x18\x26\xd6\x00\x00\x00")

func bindataTemplatesDatahtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesDatahtml,
		"templates/data.html",
	)
}



func bindataTemplatesDatahtml() (*asset, error) {
	bytes, err := bindataTemplatesDatahtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/data.html",
		size: 214,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1533026363, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesHomepagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\xb1\x0a\x02\x31\x0c\x80\xe1\xbd\x4f\x11\x6e\x52\x91\x7a\xce\x9e" +
	"\x0e\x22\x38\xb9\xe9\xe0\x18\xbd\xa0\x81\x26\x77\xb4\x51\x0b\xa5\xef\xee\x20\x38\xb9\xb8\xff\x7c\xfc\x5d\xba\x46" +
	"\x1e\x0d\x5c\x29\x46\x32\x06\x34\x82\xa6\x47\x43\x7f\x37\x09\x0d\xf8\x5a\x9d\x7b\x62\x04\x61\xdd\x87\xe1\x82\xe1" +
	"\xc8\x42\xc9\x50\x46\x58\x83\xd2\x0b\x76\x68\x34\x29\xc5\x6f\x87\x87\xf6\xac\xb7\x33\x61\x4c\xfe\xc0\xfa\x0d\xfd" +
	"\x49\x39\xd7\x3a\x5b\xb6\x6d\x3b\x9d\x83\x60\xfe\x4b\xc2\xfc\x5b\x5a\xb9\x6e\xf1\xb9\xdf\xbc\x03\x00\x00\xff\xff" +
	"\xed\xae\x2e\xb4\xc6\x00\x00\x00")

func bindataTemplatesHomepagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesHomepagehtml,
		"templates/homepage.html",
	)
}



func bindataTemplatesHomepagehtml() (*asset, error) {
	bytes, err := bindataTemplatesHomepagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/homepage.html",
		size: 198,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1532683231, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesPagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xc1\x6a\xdc\x30\x10\xbd\xfb\x2b\x54\x9d\xb3\x52\x73\x2b\x8b\x6d" +
	"\x28\x69\x0b\x85\xd0\x96\x92\x1c\x7a\x2a\x8a\x34\x6b\xcf\x46\x96\x84\x34\x59\x77\x31\xfe\xf7\x22\x7b\x1d\x9b\x6d" +
	"\x21\x27\xad\x1e\x33\xef\x69\xe6\xbd\x75\xf9\xee\xd3\xf7\xbb\x87\x5f\x3f\x3e\xb3\x96\x3a\x5b\x17\x65\x3e\x98\x55" +
	"\xae\xa9\xf8\x30\x88\x7b\xe5\x9a\x71\xe4\x19\x07\x65\x18\x9a\x09\x7d\x38\x07\x18\x47\xce\x8c\x22\xb5\x23\x1f\x50" +
	"\xcf\x70\xfe\x35\x57\x77\x40\x8a\xe9\x56\xc5\x04\x54\xf1\xc7\x87\x2f\xbb\x0f\x5c\x2e\xb8\x53\x1d\x54\xfc\x84\xd0" +
	"\x07\x1f\x89\x33\xed\x1d\x81\xa3\x8a\xf7\x68\xa8\xad\x0c\x9c\x50\xc3\x6e\xba\xdc\x30\x74\x48\xa8\xec\x2e\x69\x65" +
	"\xa1\xba\x15\xef\x6f\x58\x87\x0e\xbb\x97\x6e\x85\x56\xea\x10\x7d\x80\x48\xe7\x8a\xfb\x66\x8f\x9d\x6a\x60\x43\xdf" +
	"\x12\x85\xbd\x94\xaf\x63\x09\x07\x8d\x0a\x60\x50\x09\x1f\x1b\x39\x95\x27\x69\x7d\xe3\x45\x70\x4d\x26\x2d\x4a\x42" +
	"\xb2\x50\x0f\x03\x1e\x98\xf8\x9a\x2e\x13\xde\x29\x82\xc6\xc7\xf3\x9e\x0d\x03\x38\x33\x8e\x79\xf8\x5c\x38\x8e\x6c" +
	"\xc7\xbe\x2d\xac\xa5\x9c\xbb\x8b\xa2\xb4\xe8\x9e\x59\x04\x5b\xf1\x44\x67\x0b\xa9\x05\x20\x16\x22\x1c\x80\x74\xcb" +
	"\x19\x9d\x03\x54\x9c\xe0\x0f\x49\x9d\x12\x67\x6d\x84\x43\xc5\x85\xc8\x37\xa9\x7d\x04\x91\xe1\x7a\xcb\xa3\x95\xf3" +
	"\x0e\xb5\xb2\x4b\xf5\x30\x88\xbb\x05\x7b\xfc\x79\x3f\xf9\x50\x94\x49\x47\x0c\xb4\x15\x38\xaa\x93\x9a\x51\xce\x52" +
	"\xd4\xf3\x5a\xd2\x5e\xca\xbe\xef\x45\x93\x48\x11\x6a\xa1\x7d\x27\xb3\x7d\x94\xf7\xa1\x0c\x44\x71\x4c\xbc\x2e\xe5" +
	"\xdc\x58\xbf\xc1\x5b\x17\xc3\x40\xd0\x05\xab\x08\x18\xcf\x29\x11\x39\x56\x9c\x89\x71\x2c\x56\x92\xa2\x28\x9f\xbc" +
	"\x39\xe7\x67\x1a\x3c\x4d\xe1\xea\xc0\xbd\x64\x1d\x83\xa7\x2d\x7c\xb1\x70\x9a\xa8\xbd\x65\x93\x1d\xce\xd3\xc6\x92" +
	"\x39\x8b\x73\xb2\x86\x41\x3c\x3a\x03\x31\xe5\xcd\x99\x8b\x31\xfc\x62\x55\xbd\x7a\x55\xca\xf6\x76\xab\x82\x8e\xa2" +
	"\x5f\xd5\xff\xa3\xb2\xd6\xf6\xf8\x8c\x93\xc9\xbb\x43\xf4\x1d\xcf\xac\x1f\x9f\x12\x45\xa5\x29\x13\x5f\xbd\x3f\x07" +
	"\xad\x57\xd1\xa4\x2b\x76\x71\x8f\xee\x39\x6d\x79\x93\xd7\x39\xed\xc7\x97\x2e\xa4\xab\x3d\x06\xd5\x80\xc5\x44\xcb" +
	"\x2e\x5f\x7b\x27\xc6\xd7\x24\x4e\x47\x51\xfc\xf3\x86\x08\xc9\xdb\x13\x44\xfe\x96\x7b\x73\x2a\x84\x90\xc7\x24\x97" +
	"\xa6\xdf\xeb\x9f\xe6\x2a\x08\x8b\x8c\x9c\xac\x2c\xe5\xfc\x19\xf9\x1b\x00\x00\xff\xff\xf4\x59\x23\xeb\x57\x04\x00" +
	"\x00")

func bindataTemplatesPagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesPagehtml,
		"templates/page.html",
	)
}



func bindataTemplatesPagehtml() (*asset, error) {
	bytes, err := bindataTemplatesPagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/page.html",
		size: 1111,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1533026363, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesPagelisthtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xc1\xad\x83\x30\x0c\x80\xe1\x3b\x53\x58\xb9\x03\x0b\x84\x48\x6f" +
	"\x07\xde\x00\x6e\x6c\xb5\x56\xd3\x80\x62\x4b\x3d\x44\xde\xbd\x82\xd2\xdb\x7f\xf8\xf5\x45\x2a\x90\x0b\xaa\x2e\xa1" +
	"\x88\xda\xc8\xd5\x9a\xb0\x86\xd4\x7b\xc3\x7a\x67\x98\xdc\x07\x00\x80\x48\x06\x84\x86\xa3\x6d\xbb\xe4\x25\xf4\x3e" +
	"\xad\x47\xb9\x1f\xef\xb4\x8a\x15\x76\x8f\x33\x59\xba\x7e\xfa\xc1\x6f\x79\xca\xce\x24\x38\xea\x63\x6b\x16\xbe\x4e" +
	"\xc5\x17\x9f\xcc\x7f\x25\x6e\x9a\xb7\xc6\x74\x29\xa7\xf8\x77\x53\x6b\x98\xed\x44\x29\xf5\xce\x95\xdc\x87\x38\x53" +
	"\x49\xc3\x27\x00\x00\xff\xff\x4f\xdb\xa9\x56\xb7\x00\x00\x00")

func bindataTemplatesPagelisthtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesPagelisthtml,
		"templates/pagelist.html",
	)
}



func bindataTemplatesPagelisthtml() (*asset, error) {
	bytes, err := bindataTemplatesPagelisthtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/pagelist.html",
		size: 183,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1532621129, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesToptenhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x93\x41\x6f\xdc\x20\x10\x85\xef\xfe\x15\x94\x73\x16\x9a\x5b\x15\xe1" +
	"\xbd\xa4\xad\x54\x29\x6a\xab\x34\x39\xf4\x54\x4d\x61\x62\xcf\x06\x03\x82\x89\x93\x95\xe5\xff\x5e\x61\x67\x77\xad" +
	"\x4a\x2b\x31\xfb\x66\xde\x87\x79\xd8\xe6\xc3\xe7\x1f\xb7\x0f\xbf\x7f\x7e\x11\x3d\x0f\x7e\xdf\x98\xba\x08\x0f\xa1" +
	"\x6b\xe5\x34\xa9\x3b\x08\xdd\x3c\xcb\xaa\x23\x38\x41\xae\x95\x1c\x13\x63\x90\xc2\x01\xc3\x8e\x8f\x09\x97\xc1\x6f" +
	"\xc1\xe1\xdb\x3c\xbf\xcb\x09\x33\x45\xb7\x34\x7e\x25\x08\x67\x9d\x63\x22\xbb\xc8\x0f\xb5\x5a\xc9\x03\x32\x08\xdb" +
	"\x43\x2e\xc8\xad\x7c\x7c\xf8\xba\xfb\x24\xf5\x49\x0f\x30\x60\x2b\x47\xc2\xd7\x14\x33\x4b\x61\x63\x60\x0c\xdc\xca" +
	"\x57\x72\xdc\xb7\x0e\x47\xb2\xb8\x5b\xfe\x5c\x09\x0a\xc4\x04\x7e\x57\x2c\x78\x6c\xaf\xd5\xc7\x2b\x31\x50\xa0\xe1" +
	"\x65\xb8\x48\x17\x74\xca\x31\x61\xe6\x63\x2b\x63\x77\x43\x03\x74\xb8\xc1\xf7\xcc\xe9\x46\xeb\x73\x04\x2a\x60\x07" +
	"\x09\x1d\x81\x8a\xb9\xd3\xcb\x78\xd1\x3e\x76\x51\xa5\xd0\x55\x68\x63\x98\xd8\xe3\xbe\x1e\xae\x16\xf3\x2c\x76\xe2" +
	"\xfb\xc9\x65\xf4\xda\x6d\x1a\xe3\x29\x3c\x8b\x8c\xbe\x95\x85\x8f\x1e\x4b\x8f\xc8\x22\x65\x7c\x42\xb6\xbd\x14\x6b" +
	"\xa4\x8c\x6f\xac\x6d\x29\x52\xf4\x19\x9f\x5a\xa9\x94\x5e\x7f\xb6\x14\x6d\x63\x46\x55\x9b\xfb\x2d\xcd\x42\x88\x81" +
	"\x2c\xf8\x93\x67\x9a\xd4\xed\x49\x7b\xbc\xbf\x5b\xd2\x6e\xcc\xdf\xe8\x8e\x75\x75\x34\x2e\xf7\x39\x60\x78\x91\x7b" +
	"\xa3\x1d\x8d\x5b\xf9\x3d\x89\xc5\xd2\x5f\x6f\x4e\x65\x74\x7f\xbd\x1d\xa4\xc0\x39\x9e\x01\xd3\xc4\x38\x24\x0f\x8c" +
	"\x42\x26\xe8\xd0\x53\x61\x55\xdf\x29\x29\xd4\x3d\x84\x67\xaa\x61\x36\x8d\x79\x8a\x91\x31\x2f\x80\xb5\xac\x84\xb5" +
	"\xaa\xf0\xff\x9f\x26\x63\x89\x7e\xac\x53\x8d\x29\x36\x53\xe2\x6d\x4e\x07\x18\x61\x55\xa5\x28\xd9\x6e\xd2\x3a\x14" +
	"\x7d\xb2\xfe\xb9\xdc\xe5\xa1\xd4\xdd\x56\xc7\xfe\xb2\x99\x5e\xa2\x31\x7a\xfd\x12\xfe\x05\x00\x00\xff\xff\xca\xbe" +
	"\x65\xb5\x1a\x03\x00\x00")

func bindataTemplatesToptenhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesToptenhtml,
		"templates/topten.html",
	)
}



func bindataTemplatesToptenhtml() (*asset, error) {
	bytes, err := bindataTemplatesToptenhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/topten.html",
		size: 794,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1532621129, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"db/base.sql":               bindataDbBasesql,
	"db/indices/alternate.sql":  bindataDbIndicesAlternatesql,
	"db/indices/default.sql":    bindataDbIndicesDefaultsql,
	"db/query-pages.sql":        bindataDbQuerypagessql,
	"db/query-toptenbyyear.sql": bindataDbQuerytoptenbyyearsql,
	"db/test.sql":               bindataDbTestsql,
	"db/types.sql":              bindataDbTypessql,
	"templates/data.html":       bindataTemplatesDatahtml,
	"templates/homepage.html":   bindataTemplatesHomepagehtml,
	"templates/page.html":       bindataTemplatesPagehtml,
	"templates/pagelist.html":   bindataTemplatesPagelisthtml,
	"templates/topten.html":     bindataTemplatesToptenhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"db": {Func: nil, Children: map[string]*bintree{
		"base.sql": {Func: bindataDbBasesql, Children: map[string]*bintree{}},
		"indices": {Func: nil, Children: map[string]*bintree{
			"alternate.sql": {Func: bindataDbIndicesAlternatesql, Children: map[string]*bintree{}},
			"default.sql": {Func: bindataDbIndicesDefaultsql, Children: map[string]*bintree{}},
		}},
		"query-pages.sql": {Func: bindataDbQuerypagessql, Children: map[string]*bintree{}},
		"query-toptenbyyear.sql": {Func: bindataDbQuerytoptenbyyearsql, Children: map[string]*bintree{}},
		"test.sql": {Func: bindataDbTestsql, Children: map[string]*bintree{}},
		"types.sql": {Func: bindataDbTypessql, Children: map[string]*bintree{}},
	}},
	"templates": {Func: nil, Children: map[string]*bintree{
		"data.html": {Func: bindataTemplatesDatahtml, Children: map[string]*bintree{}},
		"homepage.html": {Func: bindataTemplatesHomepagehtml, Children: map[string]*bintree{}},
		"page.html": {Func: bindataTemplatesPagehtml, Children: map[string]*bintree{}},
		"pagelist.html": {Func: bindataTemplatesPagelisthtml, Children: map[string]*bintree{}},
		"topten.html": {Func: bindataTemplatesToptenhtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
