// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../wiki2overpediadb/db/base.sql
// ../../../wiki2overpediadb/db/indices/alternate.sql
// ../../../wiki2overpediadb/db/indices/default.sql
// ../../../wiki2overpediadb/db/query-pages.sql
// ../../../wiki2overpediadb/db/query-toptenbyyear.sql
// ../../../wiki2overpediadb/db/test.sql
// ../../../wiki2overpediadb/db/types.sql
// templates/data.html
// templates/homepage.html
// templates/page.html
// templates/pagelist.html
// templates/topten.html

package exporter


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDbBasesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x4b\x6f\xe3\x38\x12\xbe\xeb\x57\xd4\x9e\x2c\x07\xda\x3c\x0c\x2c" +
	"\xb0\x58\xb7\x0f\x6c\x99\x4e\xb4\x23\x4b\x86\x24\xa7\x93\x1e\x34\x0c\xc6\xa2\x13\xa6\x65\x49\x43\xd2\x49\x1b\x83" +
	"\xf9\xef\x03\x52\x2f\xda\x56\xdc\x0d\x0c\x90\x43\x4c\x56\x15\xbf\x7a\x7c\x55\xa5\x69\x14\x2e\x20\x76\xef\xf0\x1c" +
	"\x81\x37\x03\xfc\xe0\xc5\x49\x0c\xef\xa3\x02\x5c\x14\xbb\x68\x8a\xc7\x96\x1b\x61\x94\xe0\x46\xe8\x7d\x54\x8c\x2d" +
	"\xeb\xea\x62\xbe\x67\x79\x4a\x7f\x00\xa7\x25\xa7\x82\xe6\x52\x40\x75\x20\xf7\x25\x15\x50\x6c\x40\x48\x22\x99\x90" +
	"\x6c\x2d\x2e\xae\x1a\x23\xc9\xe3\x02\x2b\x13\x97\xdb\x5a\x1d\xc5\x80\x83\xe5\x1c\xec\xc1\xba\xc8\x37\x19\x5b\xcb" +
	"\x81\x03\x83\xb2\xc8\xe8\x96\xad\x07\xc3\xb1\xd5\x68\xba\xa1\xef\xa3\xc4\x0b\x83\x5a\x7d\x5d\x64\x19\x91\x14\x6c" +
	"\x3f\x74\x91\x8f\x61\x02\x03\x9a\xaf\x96\xf1\xe5\x32\x99\xfd\xfb\xbf\x5a\xf3\xea\x62\x41\x9e\xa9\x30\x21\xbe\xb3" +
	"\xef\xac\xa4\x29\x23\x40\xb8\x64\xeb\x8c\x0a\x20\x79\x0a\xc5\x1b\xe5\xd5\xb1\x2c\xca\x43\xc0\xe8\xb3\x5f\x21\x2e" +
	"\xb5\x2d\xdb\x02\x00\x50\xff\xaf\x58\x0a\x5e\x90\xe0\x5b\x1c\x41\x10\x26\x10\x2c\x7d\xdf\xe9\x6e\x25\x93\x19\x85" +
	"\x7b\x14\xb9\x77\x28\xb2\xff\x73\x33\x1a\xd6\x2e\xe0\x43\x07\x0c\x15\xf2\x24\x24\x27\x6b\x09\x09\x7e\x48\xce\x4b" +
	"\x73\x9a\xcb\x9f\x00\x10\xc5\x9a\x91\xec\x75\xb7\x2d\x45\x23\xf6\xfb\xb7\x56\x10\xa6\x78\x86\x96\x7e\x02\x83\x3f" +
	"\xff\x1a\x18\x5a\x29\x2d\xe5\xcb\x89\xd9\x56\x7a\x64\x88\xae\x39\x25\x92\x15\xf9\x9e\x12\xde\x68\x58\x55\xdc\x23" +
	"\xfa\xc6\x04\x2b\xf2\xf3\xb1\x07\x9a\x32\x29\xa0\x2f\xd8\xbc\x35\xf0\x2b\x01\xe7\xf4\x6d\x25\x28\x67\x24\xfb\x50" +
	"\x64\x27\x28\x37\x0c\x98\x87\xe2\xa9\x90\xf0\x39\x0c\x7d\x8c\x82\x1e\xc3\xeb\x17\xc2\xdf\x29\x7b\x7e\x91\x30\xf3" +
	"\x43\x94\x7c\x20\x92\xb2\xcd\xe6\x43\x01\x26\x38\x7d\xa3\x5c\x9e\xc1\xdf\x88\xd0\xf4\x0c\x16\xc9\xb6\x54\x48\xb2" +
	"\x2d\x21\xf1\xe6\x38\x4e\xd0\x7c\xd1\x23\xd5\x93\x90\xd8\x28\x06\x26\x80\x80\xa4\xdb\xb2\xe0\x84\xef\x41\x92\xa7" +
	"\x8c\xaa\x50\xa4\xb0\x29\x38\x64\x05\x49\x59\xfe\x0c\x46\xf9\x38\xa0\x4a\x8f\x43\x4a\x24\x51\xda\x5b\xca\x9f\x69" +
	"\x0a\x2c\x97\x05\x54\xac\xd0\x36\xfa\xf2\x68\x16\xe1\x2f\x53\xa7\xaf\x72\x6f\xae\xbf\x69\x57\xac\xab\x0b\xbf\x20" +
	"\x69\x85\x45\x51\x37\xa5\x1b\x96\xd3\xda\x0b\xdd\x53\xa8\xa2\xaf\x75\x75\x31\xdd\x6d\xb7\x7b\x6d\xb1\xf3\xee\x39" +
	"\x2b\x9e\x48\x76\xd8\x9a\xbc\x20\xc6\x51\xa2\x5e\x0a\x3b\xa2\xdb\x35\x4e\xa7\x23\x9b\x63\x30\x64\x08\xf7\xc8\x5f" +
	"\xe2\x18\xec\x6b\x07\xd4\x9f\xee\x54\xe1\xe2\xb1\xc7\x42\xd7\x0e\x9c\x03\x9a\x3b\xad\xe5\x21\xcc\xa2\x70\x0e\xff" +
	"\x1b\x68\xc5\x0d\xcb\x68\x49\xe4\xcb\x00\xbe\x78\xc9\x1d\xb8\xf1\x3d\xdc\x61\x34\xc5\xd1\xb8\x7b\xa1\xe5\x47\xfb" +
	"\x8a\xc9\x01\xa7\xae\x76\xa7\x2b\x70\xe7\xb0\x94\x1d\xb3\x6c\x9d\x83\x02\x74\x8e\xca\xd1\x39\xac\xbc\x16\x6b\x0b" +
	"\xe1\x0c\x5e\x0b\xf9\x09\x8e\x8e\x9b\xa8\xce\x34\x9a\x4e\x61\x11\x79\x73\x14\x3d\xc2\x6f\xf8\x11\x1a\x47\x86\x4e" +
	"\x7b\x3d\x0b\x23\xec\xdd\x06\xcd\x75\x1b\xac\x08\xcf\x70\x84\x03\x17\xc7\x66\x63\x6e\xf4\xc7\xd6\x72\x31\x6d\x1a" +
	"\x67\x75\x17\xe3\xc4\xec\x6e\x13\xb8\x81\x2f\x77\x38\xc2\x5d\x6e\x27\xd7\x80\x82\x69\x53\x9c\xff\x9a\x5c\x8f\x2d" +
	"\xd7\x5f\xc6\x0a\x7c\x67\x66\x19\x7b\xc1\x6d\x55\xf1\xab\xf2\x3b\xdd\x8f\x2d\x14\x20\xff\xf1\xab\xf1\x54\x3b\x2d" +
	"\xbd\x60\x8a\x1f\xa0\x9e\x56\x26\x42\x0d\xc1\x31\x66\x84\xaa\x1c\x03\x71\xd7\xf9\x14\xea\x96\xce\x13\x35\x8f\x13" +
	"\xb0\xf1\x43\x12\x21\x37\xb1\x1f\x31\x8a\xaa\x4c\xa4\x44\xd2\x95\xe4\xbb\x7c\x6d\x0f\x94\xe8\xe0\x38\x61\x43\x35" +
	"\x64\x6b\x1e\x0d\xc7\x27\x29\x69\x1f\x3c\x9b\x96\x83\xfa\xfa\x38\x47\x55\x0a\x7e\x92\xa1\x5a\x5b\xe3\x70\x43\x7f" +
	"\x39\x0f\x3a\x3f\x95\xd3\x4d\x4b\x38\xcc\x41\x17\x98\x2a\x0f\xed\xef\x9e\x5c\xb4\x77\xfd\xf9\x30\xa6\x4b\xcd\x14" +
	"\x63\xd1\xe8\x22\xa3\x42\xf8\x54\xec\xf2\x54\x00\x8a\xad\x18\xfb\xd8\x4d\x60\xee\x05\x76\x83\x56\x47\x76\xcb\xf4" +
	"\x04\x74\x60\x8e\x1e\x8e\x6e\xc8\x0f\x7d\x63\x35\x3a\x06\x89\x2a\xc5\xf6\xa0\xd3\x3e\x92\x21\x3f\xda\x03\x4b\xa7" +
	"\xfb\xc8\xbd\xae\x25\x98\x5d\xb3\xa6\xa8\x71\x74\x86\xa4\xbd\x74\xb1\x8f\x3b\xb1\x73\x32\xf3\x87\x30\x01\x7b\x75" +
	"\x79\x22\x08\xf5\xd9\x81\xac\x05\x15\xa8\x6a\x08\x68\x0c\x4a\xa8\x91\x51\xbe\x56\x57\x75\x98\xdb\xf6\x5b\x87\x57" +
	"\x09\x9c\x58\xd5\x0a\x6d\x54\xba\x74\x39\x47\xbd\xa6\x21\x7b\xdb\x01\x3e\xc1\x08\xf4\xcd\x32\x50\x1b\x25\xf2\xfd" +
	"\xde\xb7\x4f\x72\xfd\x13\x04\x87\x54\xba\x8d\xc2\xe5\x02\x3e\x3f\x36\xf6\x86\xbd\x6f\xb8\x21\xf2\x71\xec\x62\x5b" +
	"\xbc\x9e\x86\x52\x2d\x67\xdd\xc3\x07\x41\x3e\x03\xe5\x20\xb0\x3e\x9e\x25\xf0\xff\xd0\x0b\x4e\x8a\x44\xbc\xd6\x4c" +
	"\xb2\x0d\x80\x43\x58\xd5\xe1\xaa\xb3\xc8\x52\x98\x54\x3d\xaf\xf9\x3d\xb6\xf4\x47\x43\xef\x90\x3f\x6d\x2f\x46\xc7" +
	"\x37\x09\x7f\xba\x41\x1e\x32\xbf\xd9\xde\x25\xa7\x14\xd6\x45\x2e\x09\xcb\x05\xc8\x17\xf5\x63\x5b\x66\x54\x52\x78" +
	"\xe6\xa4\x7c\x51\x1f\x1a\x55\x17\x07\x4e\x33\x6d\xcd\xd8\xde\xe7\x28\xc1\x91\x87\x7c\xef\x2b\x9e\xc2\xbd\x87\xbf" +
	"\xb4\x90\xb4\xdd\x8e\xd5\xa7\xd3\xbe\x63\x5b\xe5\x81\xae\x94\x56\x7c\x74\xd9\x69\xdc\x5c\x7e\xa4\x04\xe5\x4d\x17" +
	"\xfa\xfa\x64\xa4\x9a\x90\xd6\xd1\xfa\x13\x6d\xaa\x56\xef\x9a\x50\xd5\xae\x1a\xa0\xab\x75\xb6\x13\x52\x35\x2a\xfd" +
	"\xcd\x64\x4c\x15\xed\x46\xcf\xae\x32\x3c\x9d\x5f\x5a\xb4\x1b\x61\xa7\x76\x4f\xc7\x99\x92\xa9\x52\xa1\x3f\x8b\x2a" +
	"\x0f\xf4\xfa\xb8\x93\x2c\x63\x72\x0f\x6f\x8c\xbe\xeb\xc5\x4a\xb0\x6d\x99\xb1\x8d\xda\x1c\xff\xd8\x51\xce\xa8\x80" +
	"\xa7\x3d\xbc\x16\x2c\x57\x47\xcd\xc2\xaf\x16\x36\xb5\xf2\x6b\x73\xc0\xf2\x4d\xc1\xb7\x3a\x67\x5d\xca\xda\x2c\x19" +
	"\x4f\x1a\x79\x1a\x5d\x5e\x38\x6d\xf8\x35\x99\x3f\x8d\x14\x41\x98\xd0\xf2\x06\x9f\x9a\x18\x57\x9b\x57\xab\x53\xcd" +
	"\x5c\xa5\xa2\x15\x56\x9b\x5d\x96\x55\x22\x56\x56\xbc\x53\x6e\x8b\x32\x63\x72\x55\x12\x2e\xed\x5f\xb3\xe5\x0c\x60" +
	"\xe0\xdc\x0c\x0d\x9b\xfa\xfc\x1f\xd7\xc2\xdf\x01\x00\x00\xff\xff\x8c\x5e\xa4\x6d\x9b\x0f\x00\x00")

func bindataDbBasesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbBasesql,
		"db/base.sql",
	)
}



func bindataDbBasesql() (*asset, error) {
	bytes, err := bindataDbBasesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/base.sql",
		size: 3995,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1546868050, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbIndicesAlternatesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5d\x6f\xa3\x38\x14\x7d\xe7\x57\xdc\xb7\xe2\x2c\x6a\xd8\x79\xcc" +
	"\x6a\x2b\x31\x29\x4d\x59\x31\x30\x02\x32\xa3\x7d\x8a\x5c\xb8\x6d\x2d\x11\x13\x61\xa7\x9d\xfc\xfb\x95\x6d\x42\x4d" +
	"\x03\x6d\xb2\xd2\x3c\x55\xb8\xf7\xe3\x9c\x73\xcf\xb5\x33\x9f\xdd\xe2\x23\xe3\x08\x8c\x57\xac\x44\xf1\x70\x38\x20" +
	"\x6d\x41\xd2\x87\x1a\x41\x3e\x53\x09\x8f\x4d\x0b\x48\xcb\x67\xd8\xd1\x27\x84\xb2\xe1\x92\x32\x2e\x40\x85\xd5\x07" +
	"\xf5\xfd\x58\xb3\x52\x02\xe5\x15\xec\x9a\x1a\xb7\xac\x04\x21\xa9\x64\x42\xb2\x72\x36\x77\xe6\xb3\xc8\x54\x86\xed" +
	"\x5e\x48\xa8\x74\xb7\x0a\x18\x07\x0a\xaf\xf4\x60\x7a\x6c\x99\x10\x8c\x3f\x01\x72\xd9\x32\x14\x50\x36\x6d\x8b\xa5" +
	"\xac\x0f\x2a\x9e\xee\x6b\x09\xb2\x01\xff\xda\x9f\xcd\x9d\x65\x16\x06\x45\x08\x45\xf0\x35\x0e\xe1\xf5\x4b\x73\x3d" +
	"\x04\x1e\xe4\xce\xcf\xa8\xb8\x07\xc6\xcb\x66\xbb\xab\x51\x22\x6d\x25\x2b\x6b\xec\x81\x06\x39\xb8\x0e\x00\x40\x1e" +
	"\xc6\xe1\xb2\x80\xdb\x28\x2f\xa2\x64\x59\x68\x7e\x1b\x56\x79\xd0\xe2\xcb\xa6\x2b\xa6\x69\x7a\xb0\x17\xd8\x6e\x58" +
	"\xa5\xd3\xee\xb2\xf4\x9b\x6e\xdc\xe2\x0b\x13\xac\xe1\x42\x1f\xff\xbc\x0f\xb3\x10\x5c\x95\xcb\x44\x8b\x2f\xd8\x4a" +
	"\xb8\x01\x1f\xd2\x0c\xec\x33\xac\x08\x04\xc9\xed\xb1\x22\x44\x39\x24\x69\x01\xc9\x3a\x8e\x1d\xe2\xc1\xe5\x60\xfd" +
	"\x0f\x50\x4e\x8a\xa0\x43\xd6\x49\x94\x26\x10\xc4\xb1\xdd\x60\x76\x4e\x36\xf1\x74\xff\x49\x94\x3b\xda\x22\x97\x8a" +
	"\x5e\x90\xbf\x21\x35\x20\x97\xe9\x3a\x29\xdc\x9e\x47\x87\x99\x2c\x16\x77\x71\x1a\x14\x2a\xe1\x15\xd9\xd3\xb3\x7c" +
	"\xc3\xf1\x5e\x93\x7f\xd2\x28\xd1\x03\x50\x95\x65\x8b\x08\xeb\x3c\x4a\x56\xe0\x76\x9d\x88\x4e\x5d\x65\xe9\xfa\x3b" +
	"\x7c\xfd\xf7\x0d\x8c\x41\x30\x4d\x7d\x14\xe8\xe5\xf8\xde\x77\xb7\x8a\x3a\xc4\x73\x4e\x54\xc5\x8a\x49\x51\x36\x7b" +
	"\x3e\xa6\xe3\xa4\x23\x0d\xba\x19\x81\xbb\x28\x2e\xc2\x0c\x5c\xe3\xbf\x81\xfd\xfe\x06\x9f\xe8\x09\x34\x82\x49\xf6" +
	"\x82\xba\x89\xa7\x1b\x9c\x93\x7e\xd3\xa5\x9b\x4f\x9d\xfc\xf9\x02\x28\x33\x0f\xfd\x3e\xa1\xc7\x91\x92\xe5\xfa\x73" +
	"\x94\xb0\xec\x9e\xaf\xbf\xb9\x03\x6a\x23\x64\x75\x90\x45\x60\x9a\xd0\x07\x73\x19\x65\xf0\xff\x56\xc8\x2a\xda\x2d" +
	"\xd1\x87\xa4\xc7\xd6\xc8\xed\x8f\x6f\x7c\xb2\x58\x44\x49\x11\xae\xc2\xac\x0f\xa9\x70\x27\x9f\x3b\x0f\x9b\x62\x27" +
	"\x32\x59\x5e\xfe\x44\x2d\x2b\x72\x54\xb4\xd3\xc1\xfd\xf6\xe5\xfc\x32\xcd\x74\x40\x66\x9a\xa4\xc5\xe4\x62\x7e\x66" +
	"\x83\xcd\x7b\xf6\x7e\x5c\x57\xc7\x1b\xe0\x6a\xb1\x50\x0a\x6c\x0f\x8c\x57\xf8\x4b\xc5\xc9\xc3\x0e\x3d\xdb\x18\xf6" +
	"\xf5\x39\x4d\xfa\xaa\x7b\x50\xa7\x0a\x0e\x6f\x2c\x9d\xf9\xa7\xef\xfb\x33\x8b\xcb\x7c\xa5\xdf\xcb\xbc\x18\x7a\xe0" +
	"\x0f\x2b\xc4\x0b\x7e\xac\xa6\xff\x4b\x20\xfd\x11\x66\xee\xf7\x20\x2b\xa2\x42\x61\x3c\xae\x80\x25\x3f\x21\x63\xf7" +
	"\xe2\xd0\xdd\x4a\x39\x85\xfa\x54\xb7\xfe\x2d\xb0\x48\xe9\xe2\xf6\x1e\x19\xc9\x07\xee\x12\x27\xd6\x22\x9e\xae\xa1" +
	"\xbe\x8f\xb7\xe5\xa0\xd3\x3b\xd5\x2c\xf3\xd9\x8c\x36\xd7\xbd\x15\xfb\xab\xce\xf4\xd3\xed\x0d\x09\xbb\xb5\xce\x23" +
	"\x46\x7f\x15\x2c\xd9\x16\x1f\x9a\x3d\xaf\x84\x07\x4f\xc8\xb1\xa5\x12\x37\x02\xd5\x2f\x1b\x93\x50\xb6\x48\x25\x6b" +
	"\xb8\x1e\xdb\x96\xfe\xd2\x1a\xc2\xc6\xd5\x7f\xa7\xed\x70\x1e\xfc\xfe\x86\xbc\x98\x81\x43\x9c\x4f\x3a\x69\xeb\x35" +
	"\x3b\x56\x9e\x74\x3d\xbe\x4a\x41\x1c\xe6\xcb\xd0\x35\x5e\xf0\x7c\xdb\x18\x83\x49\x66\xd1\xea\xbe\x78\x83\xd3\x8f" +
	"\xac\x43\x35\xe2\x6f\xf2\xd7\x7f\x01\x00\x00\xff\xff\x92\x3e\x0c\xe9\xac\x0a\x00\x00")

func bindataDbIndicesAlternatesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbIndicesAlternatesql,
		"db/indices/alternate.sql",
	)
}



func bindataDbIndicesAlternatesql() (*asset, error) {
	bytes, err := bindataDbIndicesAlternatesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/indices/alternate.sql",
		size: 2732,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547163990, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbIndicesDefaultsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5b\x4f\xeb\x46\x10\x7e\xf7\xaf\x98\x37\x6c\xd7\x27\x17\x54\x55" +
	"\x15\xd5\xa9\x64\x82\x01\x57\x21\xe1\xc4\x4e\xcf\xe1\x29\x5a\xec\x05\x56\xf5\x4d\xf6\x06\xc8\xbf\xaf\xf6\xe2\x6b" +
	"\xbc\x76\x40\xa7\x7d\x8a\xe2\x9d\x9d\xf9\xe6\x9b\xcb\xce\x4c\xcd\x2b\xfc\x44\x12\x0c\x24\x09\x49\x80\x8b\xc7\xc3" +
	"\x01\xa3\x1c\x28\x7a\x8c\x30\xd0\x17\x44\xe1\x29\xcd\x01\xa3\xe0\x05\x32\xf4\x8c\x21\x48\x13\x8a\x48\x52\x00\x13" +
	"\x8b\x0e\xec\xff\x53\x44\x02\x0a\x28\x09\x21\x4b\x23\x1c\x93\x00\x0a\x8a\x28\x29\x28\x09\xcc\xa9\x36\x35\x5d\xa1" +
	"\x19\xe2\x7d\x41\x21\xe4\xd6\x42\x20\x09\x20\x78\x43\x07\x61\x23\x26\x45\x41\x92\x67\xc0\x09\xcd\x09\x2e\x20\x48" +
	"\xf3\x1c\x07\x34\x3a\x30\x79\xb4\x8f\x28\xd0\x14\x66\x93\x99\x39\xd5\x16\x1b\xc7\xf6\x1d\xf0\xed\xcb\xa5\x03\x6f" +
	"\xe7\xe9\xa4\x0d\xdc\xf6\xb4\xef\xae\x7f\x0b\x28\xa7\x24\x88\xf0\xbe\xc0\x79\x91\x06\x04\x45\x52\x0c\x6c\x0f\x74" +
	"\x0d\x00\xc0\x73\x96\xce\xc2\x87\x2b\xd7\xf3\xdd\xd5\xc2\x87\xd5\x76\xb9\xbc\xb8\x60\x1a\xe3\x03\x49\x42\xfc\x0e" +
	"\x53\x13\xbf\x83\x37\x81\xfb\x34\xdb\x47\x28\x27\xf4\x60\x4e\xd9\x7d\x7a\xc8\xb0\xc5\xe9\xd8\x91\xd0\x82\x1c\xbf" +
	"\xee\xa4\x6d\xce\x8a\x05\xcc\xea\x8e\x84\xdc\xcc\xf5\x66\x7d\xc7\x71\xe6\xf8\x95\x14\x24\x4d\x0a\xfe\xf9\xfb\xad" +
	"\xb3\x71\x4a\x41\x70\x3d\x58\xad\x05\x04\x7e\xba\x5d\xb9\xeb\x15\xd8\xf2\x5f\x17\xe9\x59\x49\xfa\x59\x1b\xef\x7f" +
	"\x0d\x0d\xec\xd5\x15\x57\x49\x8a\x1c\xbf\xe2\x9c\xc2\x9f\x30\xd3\x0c\x0b\x48\x12\xa4\x71\x16\x61\x8a\x99\xe5\x0f" +
	"\x70\x5e\xc2\xcd\x71\x42\x99\x31\xdb\xab\xb1\x2b\xf0\x2a\x03\xfb\xd7\xda\x5d\x71\x6f\x98\x06\x9a\x63\x0c\x5b\xcf" +
	"\x5d\xdd\x80\x2e\x35\x1a\x6a\x66\xcd\x71\xf5\xcc\xcd\x4f\x3a\x27\xfd\x99\x0d\x04\x61\x84\xc0\x93\x90\x8f\xe9\x30" +
	"\x2c\x4d\x3a\x17\xa4\xfb\x84\x32\x24\xc7\xe0\x77\x13\x81\x70\xb1\xde\xae\x7c\xdd\x34\x2e\x2e\xae\x97\x6b\xdb\xe7" +
	"\xa9\x95\x52\x14\x31\xd5\xfc\x7a\x3b\x81\x28\x89\xf1\x63\xba\x4f\xc2\xc2\xaa\x42\x50\x58\xf0\x8c\x13\x9c\x23\x8a" +
	"\x77\x05\x66\x65\x2d\x22\x11\xe4\x18\x51\x92\x26\xdc\x50\x8c\xde\xd9\xaf\x01\x3b\x9d\xff\x36\x12\x90\x0b\x87\x38" +
	"\xa3\x2f\xf0\x15\xce\xf9\xc1\xcd\x66\xbd\xbd\x87\xcb\x07\x09\x53\x4d\x4b\x83\xeb\x0f\x7a\xc2\x91\xab\x51\x18\x96" +
	"\xd6\xcb\x2e\xd7\x74\xc4\x66\x27\x03\x94\x80\xde\x30\x79\x7e\x69\x00\x51\x27\x41\xc5\x40\x8f\x6a\x91\xa2\x24\xc7" +
	"\xa1\x8c\xf3\x09\x08\x3b\xd8\xb2\xf9\x44\x60\xe1\x95\x58\xb5\x3d\x0b\xb2\xf3\xc6\x41\xd9\x7e\x7a\x98\x13\x55\x38" +
	"\x40\x51\x36\xef\x2d\xcb\xd1\x6b\xe7\x9d\x6b\x02\x71\x2b\x5f\xe6\x13\x46\x0a\x6f\x58\x65\xb3\xca\xce\xc5\xb7\xaf" +
	"\xea\x9e\xc9\xa4\xba\x31\x06\x2f\x43\x79\x81\x9d\x6f\x75\xe7\x77\xbe\x2d\xca\x97\xae\xcb\xa1\xa4\xae\xc1\x56\x69" +
	"\xab\x0e\x36\x20\xf6\xa8\xf5\x67\x1b\x64\xa5\xfb\xc3\xb1\x53\x50\x57\xa5\x84\x1a\x07\x73\xa9\x76\x45\xdd\xb1\xba" +
	"\x1a\x6a\xb0\x43\x84\x30\xed\x4a\x72\x3a\xba\x8f\x53\x67\x4c\xf3\x43\x6f\x9f\xaa\xca\xbf\xb7\x05\x75\xfb\x4e\x4c" +
	"\x06\xba\xcd\x70\x03\x61\x10\x7e\x4a\x1e\xd8\x4b\xc7\x5b\x38\x3a\x0f\xa5\x35\x33\x44\x1d\xb5\x12\x42\x78\xca\x53" +
	"\xa1\x11\x2c\x19\xf2\x1a\x2f\x17\xa8\x40\x1c\x1d\x2f\x9d\x6b\x5f\xc8\x0c\x26\x71\xe3\x5e\x3f\x66\xa3\xeb\xf9\x8d" +
	"\xf3\x29\xcf\x85\xdc\xf6\x4e\x78\x6e\xc0\xfa\x6f\x67\x03\xfa\xbd\xbd\xf1\x5d\x9f\x11\x7f\xf9\xd0\xba\xc8\xa7\x95" +
	"\xf5\xe6\xca\xd9\xb0\x93\x6a\xba\xbc\x72\xbc\x45\x5f\x11\xa9\xf3\x66\xe9\xfc\x1f\xd0\x6b\xe1\x36\xf0\x5a\xe1\x18" +
	"\xea\x1a\x1b\x43\xbd\x4f\x58\x1e\x57\x4d\xa0\x1c\xa8\x47\xda\xb6\x5e\xc2\x98\x36\xec\x9a\x51\xfa\xac\xb7\x9f\xba" +
	"\xa9\x74\xa4\xf7\xc9\x19\x6c\x3e\x75\xe6\x29\x78\x3d\x21\x9f\x2a\x15\xc7\x63\x48\x2b\x8b\x0d\x0b\xb4\x98\x24\x31" +
	"\x7a\x97\x82\x8c\x92\x82\xa2\x38\x53\xf3\x70\xe7\xae\xf4\x72\xd8\xe5\xfe\x95\x25\x0f\x77\xf6\x8f\xce\x89\x68\x02" +
	"\x16\xd7\x53\xde\xab\x4c\x94\x97\xab\x0f\xb5\x86\x8e\x0c\x7a\xaf\x3e\x0c\x4d\xd3\x55\x7b\x96\x58\x99\x7b\xec\xa2" +
	"\x08\xc0\x71\x67\x6b\x87\x96\x9f\x38\x3f\xfc\x8d\xbd\xf0\x75\x9c\xa5\xc1\x8b\xb0\xa3\x2f\x1d\xdb\xf3\xf5\x26\x08" +
	"\x2b\x46\xff\xe0\x5d\x88\x28\xe6\x3c\xfe\x32\xb7\xe6\xd6\xdc\x30\xbe\xdc\xf0\x85\x89\x09\x37\xbd\x6a\x0b\x0b\x51" +
	"\xc3\x98\xfe\xfe\xdb\xaf\xb3\xd9\x64\xd6\x97\x21\xfd\x21\xf9\x19\xcd\xb6\x6f\x44\xee\xf3\xb9\xe9\xed\x97\xa6\x37" +
	"\x9f\x01\xce\xe2\x30\x56\x66\x67\xf2\x60\x74\xcf\x12\x98\x51\x26\x87\x24\x93\xbe\x35\xc6\xa5\x2e\x1e\x45\x8d\x23" +
	"\x39\x06\x34\x93\x83\xbe\x29\xc6\x1e\xc3\xd2\x54\xfb\x87\x39\x32\x47\xd6\xf5\x2c\xe6\xa6\x6a\x68\x1a\x5d\x40\xcd" +
	"\xd6\x8a\x54\x02\x57\xcb\x8f\xd3\xa7\xde\xfb\x58\xdb\x15\x2c\xf4\xb6\xab\x2e\x79\xa7\x2d\x7f\x8d\x5a\x94\x96\xab" +
	"\xc9\x59\x63\x90\x4e\x5b\xe6\xf8\xa4\xd8\xdc\xbb\x7a\xf6\xcf\xe2\xc8\x3e\x2b\xfb\x43\xc6\x77\xb3\x72\x23\x1f\xda" +
	"\x15\x1a\x08\x6b\xa3\x56\x73\xf1\xe9\x1b\xbc\x85\x13\x4d\xd3\xfc\x9e\x21\xfa\xc8\xd8\x98\x74\xe2\x7a\xd6\x1b\xeb" +
	"\xd3\xe0\xd7\x63\xd5\x47\x3d\xd0\x0c\x6d\xc4\x92\xd8\xec\x32\x12\x1c\x59\x2d\xf7\x2e\x39\x82\x89\x5c\x92\x33\x98" +
	"\x4c\xac\x56\x24\x37\xee\xcd\xad\x5f\xc3\xa9\x42\x26\x51\xf5\xd4\xbe\xf1\xc7\xbf\x01\x00\x00\xff\xff\x77\x73\x84" +
	"\x2f\x48\x13\x00\x00")

func bindataDbIndicesDefaultsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbIndicesDefaultsql,
		"db/indices/default.sql",
	)
}



func bindataDbIndicesDefaultsql() (*asset, error) {
	bytes, err := bindataDbIndicesDefaultsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/indices/default.sql",
		size: 4936,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1546868050, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbQuerypagessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x5d\x6f\x9b\x30\x14\x7d\xe7\x57\xdc\x47\xe8\x58\xbb\xf6\xb1\xd3" +
	"\x1e\x58\xe2\xb6\x4c\x59\xa8\x80\xae\xaa\xaa\x0a\xb9\xc1\xa1\xee\x88\x61\xe6\x46\x29\xff\x7e\xb2\xcd\x57\x48\xa8" +
	"\xba\xbd\x81\xef\xd7\x39\xf7\x1c\xcc\xd9\xc9\x9c\xad\xb9\x60\x80\x2f\x0c\xfe\x6c\x99\xac\x61\x5b\xb1\x14\xd6\x85" +
	"\x04\xf6\x56\x16\x12\xb9\xc8\x80\x8b\x75\x21\x37\x14\x79\x21\x2a\x1d\xa2\x12\xf9\x2a\x67\x95\x0b\x58\x94\x7c\x55" +
	"\x01\x15\x29\x64\x79\xf1\x4c\xf3\x93\x33\xeb\xde\x8f\x6f\xda\x80\x17\x81\x6d\x01\x00\x44\x64\x41\x66\x31\x94\x34" +
	"\x63\x09\x4f\xd5\xb9\xce\x48\x78\xaa\xc3\x57\x61\xf0\x13\x76\x17\xc5\xa9\x4a\xa8\xf4\xd1\xfd\x0d\x09\x89\x29\x48" +
	"\x59\x89\x2f\xf0\x0d\xce\x2d\xc7\x85\x92\xc9\x15\x13\xc8\x73\x96\x72\x91\xf2\x15\x3b\x9c\x82\x75\xc9\xdc\x76\x96" +
	"\x0b\x35\xa3\xd2\x85\x1d\xe3\xd9\x0b\xba\x3a\xaf\xe9\x91\x48\x2a\x7e\xdb\x0e\x04\xbf\x48\x08\x3b\xd5\xa6\x6f\x6e" +
	"\x12\xed\x94\x89\x8a\x8d\xf2\x3e\xc3\xf9\xe9\x17\xe7\xec\x3a\x24\x5e\x4c\xa2\xd8\x3e\x96\x94\xc2\x27\x38\x5e\x7b" +
	"\xe1\xb8\xe7\x8e\x9a\x65\xc2\xe3\x89\xa3\x2e\x5e\xa4\x4f\x26\xd1\xe0\x87\xe0\xe0\x04\x1e\xdc\x03\x64\x14\x39\x0e" +
	"\xeb\xd8\xc6\x70\xd7\x57\xbd\x47\x03\x77\x03\xc1\x55\x60\x5f\xf2\x46\xc5\xe7\x5a\xe9\x64\xa4\xf7\x97\xf3\xe0\xde" +
	"\x28\x62\xdf\x7a\x61\xec\xc7\x7e\xb0\x84\xef\x0f\x8d\xb2\x46\xd0\x81\x35\x82\x70\x4e\x42\x15\x37\x22\x3b\x06\x83" +
	"\x19\xfb\x3f\x0d\x60\x4e\xa2\x59\xd3\x05\x3f\x0c\xc3\xed\x3c\x3d\x01\x08\x3f\x8e\x68\xba\x97\xc1\x76\xfc\x4b\xa0" +
	"\x59\x36\xf5\xc9\xb9\x66\x10\x95\x92\xd6\x09\xcd\x32\x7b\xe6\x29\xaf\x34\x5f\xc5\xd0\xf8\x87\xc6\x34\x16\x3c\x54" +
	"\x7a\xca\x31\x03\xa9\x0d\x33\x6d\x2f\xa5\xb5\x7a\xd9\x30\x5a\x6d\x25\xdb\x30\x81\x4e\x4f\x4e\x45\xc0\x8b\x66\x3a" +
	"\x75\x90\x52\xf5\x66\x39\xe4\xab\x63\xd7\x61\x70\x77\xab\x5a\xec\x31\x9d\x5c\xd0\xbb\x3b\x1a\xaf\xc7\x88\x33\x84" +
	"\xd3\x51\xe1\x22\x65\x6f\x2a\x7e\xb1\x1f\xee\x18\xa9\x58\xc7\xa8\x42\xfa\x3e\x15\x9a\x65\x47\xd9\x58\x4e\x0b\x52" +
	"\x16\xbb\x04\x8b\xe4\xb5\x2a\x44\x83\x4e\x17\x98\x47\x9d\x8d\x1c\xf3\xf6\xe2\xa3\xcf\x15\x4a\xba\xc2\x56\x8c\x26" +
	"\xc6\x2b\xfd\xda\x9e\xae\xb7\x79\x3e\xac\x5a\x49\xa6\xef\x79\x6d\xc7\xde\x8d\x1d\xe9\x4d\xcd\xde\x90\x89\x94\xa5" +
	"\x2a\xd8\xd8\x7a\x16\x78\x0b\x12\xcd\x88\xad\x49\x1a\x8b\x3d\x3e\x5d\x5e\x4e\x6f\xe9\xf1\xe9\xa0\xb4\x58\x71\x9a" +
	"\xbf\x6e\x37\xe5\xa8\xc1\xa6\x56\x93\x1e\x9f\x1c\xab\x03\xa1\x0e\xd4\x3f\xc9\x71\xac\xee\x12\xd1\x74\xf4\xcf\x03" +
	"\xb0\x84\x05\xb9\x8a\xe1\x47\xe0\x2f\x61\xe1\xc5\x24\xf4\x16\xfb\x72\x8f\x55\xfe\xc7\xe5\x0d\xb6\xa1\xb7\xd0\x4b" +
	"\x2e\x8c\xd3\x07\x64\x7a\xc9\xb7\x42\xb0\x0a\x6d\x2c\x35\xfe\x64\x90\xe3\x80\xfe\x65\x06\xe1\xdc\x5f\x7a\x0b\x3f" +
	"\x7e\x80\xc4\xee\x1c\xa9\x5a\x6a\x26\x23\x96\x77\x91\xbf\xbc\x86\x36\x4f\x6d\x27\x81\x60\x09\x71\x78\x47\x2c\x9d" +
	"\x3f\x69\xfe\x71\x65\x6f\xd8\x06\x9a\xb9\x80\xda\x37\xcd\xfd\xab\xf5\x37\x00\x00\xff\xff\x53\x7c\xbc\xb2\x2b\x08" +
	"\x00\x00")

func bindataDbQuerypagessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbQuerypagessql,
		"db/query-pages.sql",
	)
}



func bindataDbQuerypagessql() (*asset, error) {
	bytes, err := bindataDbQuerypagessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/query-pages.sql",
		size: 2091,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1546868050, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbQuerytoptenbyyearsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4f\x6f\xe2\x3e\x10\xbd\xf7\x53\xcc\x31\xa9\x22\x0a\xbd\xfe\xc4" +
	"\x21\x3f\xc8\xb6\x59\xa5\x61\x95\x04\x55\x7b\xb2\x0c\x99\x06\xef\x82\x93\xb5\x8d\x20\xdf\x7e\x35\x93\x3f\x94\x82" +
	"\xf6\x14\xf9\xcd\xf3\xcc\xf3\x7b\x93\xa7\xc7\x25\x7e\x28\x8d\xe0\x76\x08\x7f\x8e\x68\x5a\x38\x5a\x2c\xe1\xa3\x36" +
	"\x80\xe7\xa6\x36\x4e\xe9\x0a\xa4\x71\x6a\xbb\x47\x0b\x2d\xca\x7d\x0b\xae\x6e\xc0\xa1\xb6\x8f\x4f\x0f\xef\x71\xf1" +
	"\x4a\xa8\xb1\x10\xe6\xe0\x3d\x00\x00\xe4\x51\x12\x2d\x0a\x46\xf9\xfc\x2d\x5b\xbd\xc1\xe9\xb9\x9e\x38\x75\xc0\x4d" +
	"\x7d\xd4\xa5\x0d\xa0\x42\x8d\x46\x3a\x14\x16\x8d\x42\xeb\x1d\x94\xa6\x0b\xc1\x41\x9e\xe9\xeb\x83\xf0\xf8\xcb\x1d" +
	"\xd6\x69\xbc\x4a\x21\x4c\x92\xcf\xfd\xa7\x34\x91\x87\xf8\x01\x49\x52\xdb\x5b\x0d\x8d\xac\x50\xa8\x92\x70\x66\x08" +
	"\x55\x5e\x4b\x22\x82\x65\xe8\xfd\x35\xca\xa2\xee\x42\x89\x8d\xdb\xc1\x1c\x66\xdc\xb9\x6d\xf0\xb6\xf1\x32\xce\x8b" +
	"\x38\x5d\x14\x5c\xbe\x6e\xa9\x74\xa9\xb6\x68\x37\xed\x68\xc0\x9d\xd6\xcf\xbd\xe8\xd9\xf4\xa6\xb5\x98\xb0\x11\x20" +
	"\x26\xd4\x3b\x00\x69\x8c\x6c\x85\xac\x2a\x6f\x11\xe6\x85\xe7\xb9\x86\x55\x0b\xa7\xdc\x1e\x03\x18\x8e\x72\x63\x9d" +
	"\x91\x5b\xc7\x48\xf7\xd8\x0b\x43\x59\x46\x7c\x1a\x46\x1a\x0f\x2d\xdd\xf1\x61\x95\x2d\xa3\x0c\xfe\xff\x09\x27\x54" +
	"\xd5\xce\xc1\x32\xca\x17\x4c\x62\x5f\xe0\xf2\x30\x8e\x78\xb0\xb9\x37\x25\xe0\x72\x12\x16\x51\x16\x26\xfd\x1b\xbe" +
	"\xe4\xdf\x31\x83\x21\x87\xa0\x9f\x33\x52\xff\x61\xda\xc5\x38\x82\x60\xde\x49\x60\x6f\x20\x4c\x97\x63\x9e\x30\xef" +
	"\x55\x4d\x46\x84\xcb\x6d\x83\x54\x22\xa1\x6c\x24\xa3\x5f\x32\x18\xe6\xdc\xb3\x61\x2c\x26\xf1\x5b\x5c\xc0\x6c\xca" +
	"\x80\x0f\x02\xbe\xaf\xe2\xb4\xdb\x67\x1a\xd8\x39\xe5\x1a\x58\xe7\x71\xfa\x02\x5e\xff\xd4\x6e\x71\x5f\xb2\xd5\xfa" +
	"\x07\x35\xbe\x0e\x95\xc2\xa7\xf3\x2f\x5b\xeb\xbb\xff\x4d\x00\xa6\x3e\x09\x57\x0b\x62\xf4\xb9\x77\xf8\xcd\x36\x8c" +
	"\xfe\xda\x31\x5d\xa5\x4b\x3c\x1b\xa9\x7f\x2b\x5d\x7d\xca\x98\xa8\xfe\x48\x92\x5a\x1f\xe5\x9e\xa9\x68\x07\x32\x57" +
	"\x69\xe6\x25\x79\x5e\xd2\xeb\xc7\x74\x3f\xdd\xa0\x97\xe9\xe3\x92\xf0\x69\x1c\x49\xc8\x7f\x0f\x7f\x03\x00\x00\xff" +
	"\xff\x00\x89\x3d\xad\x65\x04\x00\x00")

func bindataDbQuerytoptenbyyearsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbQuerytoptenbyyearsql,
		"db/query-toptenbyyear.sql",
	)
}



func bindataDbQuerytoptenbyyearsql() (*asset, error) {
	bytes, err := bindataDbQuerytoptenbyyearsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/query-toptenbyyear.sql",
		size: 1125,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1546868050, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbTestsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\xce\xc3\x20\x0c\x84\xf7\x3c\x85\x67\xa4\xff\xe7\x01\xba\x76" +
	"\xec\xd8\xb1\x8b\x53\x8e\x08\x09\x01\xc1\xce\xc0\xdb\x57\x16\x6d\x55\x65\xb3\x7d\xdf\xf9\xce\xbb\x5b\xe5\x40\x81" +
	"\x95\x57\x16\x38\xbf\x3c\x12\xd9\xf4\x2f\x7b\xbe\xd8\x92\x4a\x48\x4f\x88\x0f\x88\x7c\x64\x9d\x77\xef\x7e\x14\xce" +
	"\x8a\x5e\x58\xa7\xc7\xf9\x65\xf1\xee\x9a\x84\xd7\x0c\x6a\xbc\xa1\x53\xac\x9d\x14\xa2\xa9\x6c\xb4\x1f\xe8\x09\x62" +
	"\x49\x4d\xa0\x6f\xa2\xc6\x68\xb6\x3b\x44\x3f\x04\xd5\x72\xea\xa5\xa3\x41\xbe\xc5\x0c\x1b\x7f\x5a\x9b\xa2\xac\x63" +
	"\x80\xfb\x49\xb2\xcf\x13\x7f\x05\x00\x00\xff\xff\x28\x0a\x5a\x37\xe6\x00\x00\x00")

func bindataDbTestsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbTestsql,
		"db/test.sql",
	)
}



func bindataDbTestsql() (*asset, error) {
	bytes, err := bindataDbTestsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/test.sql",
		size: 230,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547164506, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbTypessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x4f\x8f\xda\x3e\x10\x3d\x6f\x3e\xc5\x1c\x17\x14\xfd\xd0\x6f\xa5" +
	"\x9e\x38\x79\x49\x68\xa9\xd2\x04\x85\x74\xb5\x74\xb5\x5a\x99\x64\x00\x0b\x63\xa7\xb1\xb3\x6c\xbe\x7d\x65\x3b\x40" +
	"\xf8\xd7\xf6\x54\x6e\xf8\xbd\x79\x6f\xde\x8c\x9d\x41\x7f\x5c\x21\x82\x2a\x69\x8e\xa0\x98\xc8\x11\x2a\x7c\x67\x8a" +
	"\x49\xa1\x40\xd3\x05\x47\xd8\x31\xce\x41\x48\x0d\x0b\x04\x2a\x9a\xad\xac\x10\x6a\x85\xcb\x9a\x03\x15\x05\x30\x51" +
	"\xe0\x07\x2a\x47\xd3\x74\x83\x40\x81\x4b\x0d\x72\xe9\x54\xfb\x03\x2f\x48\x93\x29\x64\xe4\x31\x0a\x61\xf7\x20\xff" +
	"\x3b\x18\x0c\x3d\x6f\xd0\x0f\x70\xc9\x04\x1e\x64\xe4\x3b\x56\xe6\x0f\xcb\x51\x2d\x9a\x06\x69\xd5\x1f\x78\xa3\x34" +
	"\x24\x59\x08\x93\x38\x08\x9f\x21\x89\xad\xca\x09\x07\xee\x4b\xba\xc2\x37\x56\xf4\x86\xde\xa0\xff\x5d\x61\x01\x8b" +
	"\x06\x22\x92\x85\x29\x89\xe0\x6b\x32\x89\x81\x09\xf8\x59\x63\xc5\x50\xfd\x9d\xe0\x0e\xd9\x6a\xad\x21\x08\x67\x23" +
	"\x1f\xcc\x91\x0f\x5a\x96\x2c\x7f\x63\x85\x0f\xba\x29\xd1\x07\xeb\x59\x60\xa9\xd7\xbd\xa1\x47\x62\x12\xcd\x7f\x84" +
	"\x97\x52\x43\xcf\xc4\xcc\xd6\x08\x4b\xc9\xb9\xdc\x31\xb1\xb2\xf5\x0a\xa8\x9b\xa4\xed\x55\xaf\xd1\xea\x29\x3b\x54" +
	"\x2d\x4b\x8d\xa2\x6d\xe5\xd8\xf6\xbe\xef\x6c\x3e\x75\x46\x06\xdf\x22\x55\x75\x85\x5b\x14\x1a\xc8\x0c\xee\xbd\xbb" +
	"\x27\xca\x6b\x84\xce\x6f\x1c\x25\x24\xf3\xbd\xbb\x29\x56\x39\x0a\xcd\x38\x9e\x01\x01\x0a\x85\x5d\x74\x0f\xa4\x54" +
	"\x6c\xba\x4a\x30\x89\xcd\x71\x66\x26\x71\x8d\x6f\x81\x9b\x6a\x16\xed\x4a\x3a\xb5\xb9\x49\x79\x66\xe2\xf5\x86\x97" +
	"\x71\xed\x25\x31\xb3\x7b\xe8\x84\x56\x2e\xb5\xad\xdb\xe3\xad\x8e\xa9\xd9\x36\xb6\xca\xb7\x84\x6f\xdd\xb2\x96\x70" +
	"\x36\xc3\x97\xd7\xab\xd6\xdb\xc6\x6c\xe7\x68\x95\x31\xed\xa6\xf8\x44\xd2\xd1\x17\x92\xde\x7f\xfa\xff\xa1\xe7\x4c" +
	"\xc8\x42\xe9\x8a\xe6\x1a\x20\x0b\x9f\x33\x77\x66\x93\x5f\xa7\x4f\x94\x03\x1f\x93\x24\x0a\x49\x7c\xc3\x1d\x3f\x34" +
	"\x8a\x02\x8b\x7f\xd4\x85\x3b\x1c\xd7\x9c\xff\xa6\x66\x54\x21\xd5\x4c\x0a\xb7\xbf\x49\x9c\x85\x9f\xc3\xd4\x41\x53" +
	"\xba\xc2\xc0\xbc\x8c\xfd\x3e\x0d\x64\xa3\x5d\x64\x33\x89\x98\x58\x4a\x38\xc6\x32\xd5\x70\xb2\xc3\x6e\x7c\xe7\x30" +
	"\xd3\xd4\xed\xb0\xe5\x5c\xbf\x1b\x2f\xaf\x8e\x1d\x31\xb1\x51\x27\x8a\x46\xe9\xc6\xae\xad\x54\x45\xc5\xc6\x3c\xd5" +
	"\x43\x53\xf6\xf4\xea\xad\xda\x53\xff\xac\x4c\x85\xa8\x29\x6f\xbf\x75\x17\x0e\x4d\xfb\x0e\x4e\x26\x79\x46\x3e\xef" +
	"\xcf\x19\xfd\x0a\x00\x00\xff\xff\xeb\x87\xfb\x5f\xc7\x05\x00\x00")

func bindataDbTypessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbTypessql,
		"db/types.sql",
	)
}



func bindataDbTypessql() (*asset, error) {
	bytes, err := bindataDbTypessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/types.sql",
		size: 1479,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1546868050, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesDatahtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4b\x2c\x52\xf0\x73\x75\x77\x0c\x72\xf4\xf3\x0e\x56\xb0\x55\x88\xae" +
	"\xae\x2e\x4a\xcc\x4b\x4f\x55\xd0\x0b\x4a\xcc\xcb\xce\xcc\x4b\x2f\xae\xad\xe5\x52\x50\x50\x00\x49\x80\x85\x6a\x6b" +
	"\x75\xaa\xab\xf5\x02\x52\x8b\x92\x53\xf3\x4a\x32\x73\x52\x21\x7c\x97\xd4\xbc\xe2\x54\x74\x41\xcf\xbc\x94\xd4\x0a" +
	"\x08\xd3\x31\x37\x3f\x2f\x1d\xc2\x0c\x2e\x48\xcc\x83\xb0\xc2\x12\x73\x4a\x53\x6b\x6b\x63\x75\xaa\xab\x53\xf3\x52" +
	"\x6a\x6b\xb9\x62\xad\x01\x01\x00\x00\xff\xff\xec\x1d\x3e\x6c\x8f\x00\x00\x00")

func bindataTemplatesDatahtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesDatahtml,
		"templates/data.html",
	)
}



func bindataTemplatesDatahtml() (*asset, error) {
	bytes, err := bindataTemplatesDatahtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/data.html",
		size: 143,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547375475, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesHomepagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd0\x41\x4b\x03\x31\x10\x05\xe0\xfb\xfe\x8a\x61\x4e\x2a\x21\xae\xe7" +
	"\xb6\xc2\x4a\x4b\xf1\xd0\x22\x56\x05\x11\x0f\x63\x77\xa8\xc1\x64\x36\x24\x53\x0d\x84\xfc\x77\x41\x44\x10\xbc\x78" +
	"\x7d\x3c\xbe\x07\x6f\x9e\xf7\xc9\x45\xbd\xec\xde\x29\xc1\x76\xb5\x1e\xb6\xc3\x66\xb5\x83\x05\x3c\xe1\x2d\xc9\x1b" +
	"\x1a\xbc\xe1\xb4\x67\x51\xe7\x19\x0d\x2e\x59\x32\xff\x4a\xae\x65\xe4\x82\x06\x87\x30\xc9\x01\x0d\xee\x22\x09\x1a" +
	"\x7c\x20\x7f\x64\x7c\x9e\x75\xb5\x2a\x87\xe8\x49\x19\x70\x24\x25\xfb\xaa\xc1\x23\xd8\xd6\xba\xaf\xcd\xe0\x64\xed" +
	"\xa7\x17\xf2\x77\x2e\x70\x56\x0a\x11\x16\x20\xfc\x01\x4b\x52\x3e\xa9\xd5\x5e\x4d\x47\x19\x9d\x1c\x1e\x99\x52\xb6" +
	"\x1b\x27\x3f\x45\x7b\x2f\xae\xb4\x76\x76\xd1\xf7\xfd\xa9\x81\x40\xe5\x5f\x12\x95\xbf\xa5\x59\x37\x3f\xff\x7e\xe5" +
	"\x33\x00\x00\xff\xff\xd6\x64\xbb\x05\x1e\x01\x00\x00")

func bindataTemplatesHomepagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesHomepagehtml,
		"templates/homepage.html",
	)
}



func bindataTemplatesHomepagehtml() (*asset, error) {
	bytes, err := bindataTemplatesHomepagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/homepage.html",
		size: 286,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547375471, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesPagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xc1\x6a\xdc\x30\x10\xbd\xfb\x2b\x54\x9d\xb3\x52\x73\x2b\x8b\x6d" +
	"\x28\x69\x0b\x85\xd0\x96\x92\x1c\x7a\x2a\x8a\x34\x6b\xcf\x46\x96\x84\x34\x59\x77\x31\xfe\xf7\x22\x7b\x1d\x9b\x6d" +
	"\x21\x27\xad\x1e\x33\xef\x69\xe6\xbd\x75\xf9\xee\xd3\xf7\xbb\x87\x5f\x3f\x3e\xb3\x96\x3a\x5b\x17\x65\x3e\x98\x55" +
	"\xae\xa9\xf8\x30\x88\x7b\xe5\x9a\x71\xe4\x19\x07\x65\x18\x9a\x09\x7d\x38\x07\x18\x47\xce\x8c\x22\xb5\x23\x1f\x50" +
	"\xcf\x70\xfe\x35\x57\x77\x40\x8a\xe9\x56\xc5\x04\x54\xf1\xc7\x87\x2f\xbb\x0f\x5c\x2e\xb8\x53\x1d\x54\xfc\x84\xd0" +
	"\x07\x1f\x89\x33\xed\x1d\x81\xa3\x8a\xf7\x68\xa8\xad\x0c\x9c\x50\xc3\x6e\xba\xdc\x30\x74\x48\xa8\xec\x2e\x69\x65" +
	"\xa1\xba\x15\xef\x6f\x58\x87\x0e\xbb\x97\x6e\x85\x56\xea\x10\x7d\x80\x48\xe7\x8a\xfb\x66\x8f\x9d\x6a\x60\x43\xdf" +
	"\x12\x85\xbd\x94\xaf\x63\x09\x07\x8d\x0a\x60\x50\x09\x1f\x1b\x39\x95\x27\x69\x7d\xe3\x45\x70\x4d\x26\x2d\x4a\x42" +
	"\xb2\x50\x0f\x03\x1e\x98\xf8\x9a\x2e\x13\xde\x29\x82\xc6\xc7\xf3\x9e\x0d\x03\x38\x33\x8e\x79\xf8\x5c\x38\x8e\x6c" +
	"\xc7\xbe\x2d\xac\xa5\x9c\xbb\x8b\xa2\xb4\xe8\x9e\x59\x04\x5b\xf1\x44\x67\x0b\xa9\x05\x20\x16\x22\x1c\x80\x74\xcb" +
	"\x19\x9d\x03\x54\x9c\xe0\x0f\x49\x9d\x12\x67\x6d\x84\x43\xc5\x85\xc8\x37\xa9\x7d\x04\x91\xe1\x7a\xcb\xa3\x95\xf3" +
	"\x0e\xb5\xb2\x4b\xf5\x30\x88\xbb\x05\x7b\xfc\x79\x3f\xf9\x50\x94\x49\x47\x0c\xb4\x15\x38\xaa\x93\x9a\x51\xce\x52" +
	"\xd4\xf3\x5a\xd2\x5e\xca\xbe\xef\x45\x93\x48\x11\x6a\xa1\x7d\x27\xb3\x7d\x94\xf7\xa1\x0c\x44\x71\x4c\xbc\x2e\xe5" +
	"\xdc\x58\xbf\xc1\x5b\x17\xc3\x40\xd0\x05\xab\x08\x18\xcf\x29\x11\x39\x56\x9c\x89\x71\x2c\x56\x92\xa2\x28\x9f\xbc" +
	"\x39\xe7\x67\x1a\x3c\x4d\xe1\xea\xc0\xbd\x64\x1d\x83\xa7\x2d\x7c\xb1\x70\x9a\xa8\xbd\x65\x93\x1d\xce\xd3\xc6\x92" +
	"\x39\x8b\x73\xb2\x86\x41\x3c\x3a\x03\x31\xe5\xcd\x99\x8b\x31\xfc\x62\x55\xbd\x7a\x55\xca\xf6\x76\xab\x82\x8e\xa2" +
	"\x5f\xd5\xff\xa3\xb2\xd6\xf6\xf8\x8c\x93\xc9\xbb\x43\xf4\x1d\xcf\xac\x1f\x9f\x12\x45\xa5\x29\x13\x5f\xbd\x3f\x07" +
	"\xad\x57\xd1\xa4\x2b\x76\x71\x8f\xee\x39\x6d\x79\x93\xd7\x39\xed\xc7\x97\x2e\xa4\xab\x3d\x06\xd5\x80\xc5\x44\xcb" +
	"\x2e\x5f\x7b\x27\xc6\xd7\x24\x4e\x47\x51\xfc\xf3\x86\x08\xc9\xdb\x13\x44\xfe\x96\x7b\x73\x2a\x84\x90\xc7\x24\x97" +
	"\xa6\xdf\xeb\x9f\xe6\x2a\x08\x8b\x8c\x9c\xac\x2c\xe5\xfc\x19\xf9\x1b\x00\x00\xff\xff\xf4\x59\x23\xeb\x57\x04\x00" +
	"\x00")

func bindataTemplatesPagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesPagehtml,
		"templates/page.html",
	)
}



func bindataTemplatesPagehtml() (*asset, error) {
	bytes, err := bindataTemplatesPagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/page.html",
		size: 1111,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547132464, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesPagelisthtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xc1\xad\x83\x30\x0c\x80\xe1\x3b\x53\x58\xb9\x03\x0b\x84\x48\x6f" +
	"\x07\xde\x00\x6e\x6c\xb5\x56\xd3\x80\x62\x4b\x3d\x44\xde\xbd\x82\xd2\xdb\x7f\xf8\xf5\x45\x2a\x90\x0b\xaa\x2e\xa1" +
	"\x88\xda\xc8\xd5\x9a\xb0\x86\xd4\x7b\xc3\x7a\x67\x98\xdc\x07\x00\x80\x48\x06\x84\x86\xa3\x6d\xbb\xe4\x25\xf4\x3e" +
	"\xad\x47\xb9\x1f\xef\xb4\x8a\x15\x76\x8f\x33\x59\xba\x7e\xfa\xc1\x6f\x79\xca\xce\x24\x38\xea\x63\x6b\x16\xbe\x4e" +
	"\xc5\x17\x9f\xcc\x7f\x25\x6e\x9a\xb7\xc6\x74\x29\xa7\xf8\x77\x53\x6b\x98\xed\x44\x29\xf5\xce\x95\xdc\x87\x38\x53" +
	"\x49\xc3\x27\x00\x00\xff\xff\x4f\xdb\xa9\x56\xb7\x00\x00\x00")

func bindataTemplatesPagelisthtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesPagelisthtml,
		"templates/pagelist.html",
	)
}



func bindataTemplatesPagelisthtml() (*asset, error) {
	bytes, err := bindataTemplatesPagelisthtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/pagelist.html",
		size: 183,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547132464, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesToptenhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x93\x41\x6f\xdc\x20\x10\x85\xef\xfe\x15\x94\x73\x16\x9a\x5b\x15\xe1" +
	"\xbd\xa4\xad\x54\x29\x6a\xab\x34\x39\xf4\x54\x4d\x61\x62\xcf\x06\x03\x82\x89\x93\x95\xe5\xff\x5e\x61\x67\x77\xad" +
	"\x4a\x2b\x31\xfb\x66\xde\x87\x79\xd8\xe6\xc3\xe7\x1f\xb7\x0f\xbf\x7f\x7e\x11\x3d\x0f\x7e\xdf\x98\xba\x08\x0f\xa1" +
	"\x6b\xe5\x34\xa9\x3b\x08\xdd\x3c\xcb\xaa\x23\x38\x41\xae\x95\x1c\x13\x63\x90\xc2\x01\xc3\x8e\x8f\x09\x97\xc1\x6f" +
	"\xc1\xe1\xdb\x3c\xbf\xcb\x09\x33\x45\xb7\x34\x7e\x25\x08\x67\x9d\x63\x22\xbb\xc8\x0f\xb5\x5a\xc9\x03\x32\x08\xdb" +
	"\x43\x2e\xc8\xad\x7c\x7c\xf8\xba\xfb\x24\xf5\x49\x0f\x30\x60\x2b\x47\xc2\xd7\x14\x33\x4b\x61\x63\x60\x0c\xdc\xca" +
	"\x57\x72\xdc\xb7\x0e\x47\xb2\xb8\x5b\xfe\x5c\x09\x0a\xc4\x04\x7e\x57\x2c\x78\x6c\xaf\xd5\xc7\x2b\x31\x50\xa0\xe1" +
	"\x65\xb8\x48\x17\x74\xca\x31\x61\xe6\x63\x2b\x63\x77\x43\x03\x74\xb8\xc1\xf7\xcc\xe9\x46\xeb\x73\x04\x2a\x60\x07" +
	"\x09\x1d\x81\x8a\xb9\xd3\xcb\x78\xd1\x3e\x76\x51\xa5\xd0\x55\x68\x63\x98\xd8\xe3\xbe\x1e\xae\x16\xf3\x2c\x76\xe2" +
	"\xfb\xc9\x65\xf4\xda\x6d\x1a\xe3\x29\x3c\x8b\x8c\xbe\x95\x85\x8f\x1e\x4b\x8f\xc8\x22\x65\x7c\x42\xb6\xbd\x14\x6b" +
	"\xa4\x8c\x6f\xac\x6d\x29\x52\xf4\x19\x9f\x5a\xa9\x94\x5e\x7f\xb6\x14\x6d\x63\x46\x55\x9b\xfb\x2d\xcd\x42\x88\x81" +
	"\x2c\xf8\x93\x67\x9a\xd4\xed\x49\x7b\xbc\xbf\x5b\xd2\x6e\xcc\xdf\xe8\x8e\x75\x75\x34\x2e\xf7\x39\x60\x78\x91\x7b" +
	"\xa3\x1d\x8d\x5b\xf9\x3d\x89\xc5\xd2\x5f\x6f\x4e\x65\x74\x7f\xbd\x1d\xa4\xc0\x39\x9e\x01\xd3\xc4\x38\x24\x0f\x8c" +
	"\x42\x26\xe8\xd0\x53\x61\x55\xdf\x29\x29\xd4\x3d\x84\x67\xaa\x61\x36\x8d\x79\x8a\x91\x31\x2f\x80\xb5\xac\x84\xb5" +
	"\xaa\xf0\xff\x9f\x26\x63\x89\x7e\xac\x53\x8d\x29\x36\x53\xe2\x6d\x4e\x07\x18\x61\x55\xa5\x28\xd9\x6e\xd2\x3a\x14" +
	"\x7d\xb2\xfe\xb9\xdc\xe5\xa1\xd4\xdd\x56\xc7\xfe\xb2\x99\x5e\xa2\x31\x7a\xfd\x12\xfe\x05\x00\x00\xff\xff\xca\xbe" +
	"\x65\xb5\x1a\x03\x00\x00")

func bindataTemplatesToptenhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesToptenhtml,
		"templates/topten.html",
	)
}



func bindataTemplatesToptenhtml() (*asset, error) {
	bytes, err := bindataTemplatesToptenhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/topten.html",
		size: 794,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547132464, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"db/base.sql":               bindataDbBasesql,
	"db/indices/alternate.sql":  bindataDbIndicesAlternatesql,
	"db/indices/default.sql":    bindataDbIndicesDefaultsql,
	"db/query-pages.sql":        bindataDbQuerypagessql,
	"db/query-toptenbyyear.sql": bindataDbQuerytoptenbyyearsql,
	"db/test.sql":               bindataDbTestsql,
	"db/types.sql":              bindataDbTypessql,
	"templates/data.html":       bindataTemplatesDatahtml,
	"templates/homepage.html":   bindataTemplatesHomepagehtml,
	"templates/page.html":       bindataTemplatesPagehtml,
	"templates/pagelist.html":   bindataTemplatesPagelisthtml,
	"templates/topten.html":     bindataTemplatesToptenhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"db": {Func: nil, Children: map[string]*bintree{
		"base.sql": {Func: bindataDbBasesql, Children: map[string]*bintree{}},
		"indices": {Func: nil, Children: map[string]*bintree{
			"alternate.sql": {Func: bindataDbIndicesAlternatesql, Children: map[string]*bintree{}},
			"default.sql": {Func: bindataDbIndicesDefaultsql, Children: map[string]*bintree{}},
		}},
		"query-pages.sql": {Func: bindataDbQuerypagessql, Children: map[string]*bintree{}},
		"query-toptenbyyear.sql": {Func: bindataDbQuerytoptenbyyearsql, Children: map[string]*bintree{}},
		"test.sql": {Func: bindataDbTestsql, Children: map[string]*bintree{}},
		"types.sql": {Func: bindataDbTypessql, Children: map[string]*bintree{}},
	}},
	"templates": {Func: nil, Children: map[string]*bintree{
		"data.html": {Func: bindataTemplatesDatahtml, Children: map[string]*bintree{}},
		"homepage.html": {Func: bindataTemplatesHomepagehtml, Children: map[string]*bintree{}},
		"page.html": {Func: bindataTemplatesPagehtml, Children: map[string]*bintree{}},
		"pagelist.html": {Func: bindataTemplatesPagelisthtml, Children: map[string]*bintree{}},
		"topten.html": {Func: bindataTemplatesToptenhtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
