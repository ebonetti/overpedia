// Code generated by go-bindata. DO NOT EDIT.
// sources:
// db/base.sql
// db/indices.sql
// db/query-pages.sql
// db/query-toptenbyyear.sql
// db/test.sql
// db/types.sql
// templates/data.html
// templates/homepagedata.html
// templates/map.html
// templates/page.html
// templates/pagelist.html
// templates/topten.html

package exporter


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDbBasesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x6f\x6f\xa3\xb8\x13\x7e\xcf\xa7\x98\x7d\x15\x52\xf1\xeb\x3f\xe9" +
	"\x27\x9d\x36\xca\x0b\x2f\x71\x5a\xee\x08\x44\x40\xba\xcd\x9e\x56\x91\x1b\xdc\xd4\xbb\x04\x10\x38\xed\x46\xa7\xfb" +
	"\xee\x27\x1b\x30\x26\xd0\x54\x77\x7d\xd5\xd8\x33\xe3\x67\xe6\x99\x79\x6c\x66\x81\xbf\x84\xd0\xbe\xc7\x0b\x04\xce" +
	"\x1c\xf0\xa3\x13\x46\x21\xbc\xdd\x66\x60\xa3\xd0\x46\x33\x3c\x31\xec\x00\xa3\x08\x37\x46\x6f\xb7\xd9\xc4\x30\xae" +
	"\x2e\x16\x47\x96\xc6\xf4\x17\x14\x34\x2f\x68\x49\x53\x5e\x42\x4e\x76\x14\xf8\x31\xa7\x16\x30\x0e\x5b\x92\xc2\x13" +
	"\x85\x5d\x92\x3d\x91\xc4\x02\x9e\xe5\x6c\x0b\x59\x01\xa4\xe0\x6c\x9b\xd0\x8b\xab\x26\x70\xb4\x5e\x62\x11\xf6\x72" +
	"\x7f\x14\x11\x44\x00\x40\x21\x60\x6f\xb5\x00\x73\x54\xf9\x8f\x2c\x18\xc9\x08\xe2\x9f\x3a\xc2\x68\x3c\x31\x9a\x18" +
	"\xb6\xef\xba\x28\x72\x7c\xaf\x0e\xb4\xcd\x92\x84\x70\x0a\xa6\xeb\xdb\xc8\xc5\x30\x85\x11\x4d\x37\xab\xf0\x72\x15" +
	"\xcd\xff\xf7\x9b\xf4\xbc\xba\x58\x92\x1d\x2d\xf5\x04\xde\xd8\x4f\x96\xd3\x98\x91\x06\x64\x09\x24\x8d\x21\x7b\xa5" +
	"\x45\xb5\x2c\x21\x94\x1a\x74\xf4\xc5\xad\xb0\xe7\x32\x96\x69\x00\x80\xac\xc3\x86\xc5\xa0\xfd\x39\x5e\x84\xef\x70" +
	"\x00\x9e\x1f\x81\xb7\x72\x5d\xab\x35\xe4\x8c\x27\x54\x19\x3e\xa0\xc0\xbe\x47\x81\xf9\xff\x9b\xdb\x71\x9d\x15\xee" +
	"\xe6\xa4\xb9\x92\xa7\x92\x17\x64\xcb\x2b\xd7\x08\x3f\x46\xe7\x5d\x0a\x9a\xf2\x0e\xb0\x33\xb0\xca\x6c\xcb\x48\xf2" +
	"\xe3\xb0\xcf\xcb\xd6\xf0\xcf\xef\xca\x14\x66\x78\x8e\x56\x6e\x04\xa3\xbf\xfe\x1e\xe9\xe9\x08\xfa\xd4\xdf\x09\xad" +
	"\x7d\xe7\x86\xcb\xcf\x9f\xbb\xa6\x5a\xc4\x6d\x41\x09\x67\x59\x7a\xa4\xa4\x50\x48\x8c\x8a\xc2\x80\xbe\xb2\x92\x65" +
	"\xe9\x79\x1a\x81\xc6\x8c\x97\x30\xc4\x5b\xa1\x02\xfc\x4b\xee\x0a\xfa\xba\x29\x69\xc1\x48\xa2\xac\x87\x0d\x0f\x25" +
	"\x2d\x86\x23\xea\xfb\xe5\x53\xc6\xd5\xfe\x17\xdf\x77\x31\xf2\x06\x4e\xdc\xbe\x90\xe2\x8d\xb2\xdd\x4b\x65\x3c\x77" +
	"\x7d\x14\xbd\x63\x16\xb3\xe7\xe7\x3a\xde\x7b\x66\xac\x2c\xe8\x2b\x2d\xf8\x87\x89\x36\x86\x34\xfe\x00\x1f\x67\x7b" +
	"\x5a\x72\xb2\xcf\xeb\x96\x74\x16\x38\x8c\xd0\x62\x39\x60\x5a\xd1\x79\x5a\x93\x9a\xd7\x50\xeb\x3e\x56\x02\x01\x4e" +
	"\xf7\x79\x56\x90\xe2\x08\x9c\x3c\x25\x54\x54\x2d\x86\xe7\xac\x80\x24\x23\x31\x4b\x77\xa0\xf5\xab\x05\xa2\xe9\x0b" +
	"\x88\x09\x27\xc2\x7b\x4f\x8b\x1d\x8d\x81\xa5\x3c\x83\x6a\x4e\x65\x8c\xa1\x76\xd0\xbb\xfe\xbf\x0c\xf3\xf0\xd4\xdc" +
	"\x5c\x7f\x97\x79\x19\x57\x17\x6e\x46\xe2\x0a\x98\x50\x96\x98\x3e\xb3\x94\xd6\x29\x49\x3d\xa5\x42\x5d\x8c\xab\x8b" +
	"\xd9\x61\xbf\x3f\x56\x8a\xaa\x52\xad\xa4\x10\x4a\x4e\x38\x2b\x79\x25\x44\x8e\x17\xe2\x20\x12\x27\xf9\xad\x0e\x99" +
	"\x35\x68\xab\x9d\x79\xab\x9d\xce\x31\x3c\x20\x77\x85\x43\x30\xaf\x2d\xb8\xb6\xa0\x91\xd8\xd3\x11\x94\xf2\xea\x2f" +
	"\xd7\x03\x71\x5b\xe1\xb2\x3a\x42\x64\xa9\xf3\xc6\x30\x0f\xfc\x05\x7c\x1e\x49\xc7\x67\x96\xd0\x9c\xf0\x97\x11\x7c" +
	"\x75\xa2\x7b\xb0\xc3\x07\xb8\xc7\x68\x86\x83\x49\x7b\x82\x9a\x44\x75\x8a\x3e\x62\x56\x3d\x46\x56\x3b\x2e\x56\x77" +
	"\x20\x2c\xbd\xf1\xad\x4e\xdb\x5a\x27\x4d\x6c\x75\x7b\x55\x61\x55\x10\xce\xe0\x35\x90\x1b\xe1\xe0\x54\xf9\x65\x07" +
	"\xa0\xd9\x0c\x96\x81\xb3\x40\xc1\x1a\xfe\xc0\x6b\x68\x12\x19\x5b\x6a\x7b\xee\x07\xd8\xb9\xf3\x9a\x6d\x55\xac\x00" +
	"\xcf\x71\x80\x3d\x1b\x87\xfa\x6d\xd2\xf8\x4f\x8c\xd5\x72\xd6\xa8\x7a\xb5\x17\xe2\x48\xd3\xdb\x69\x73\x3b\x9e\x72" +
	"\x08\x5f\xef\x71\x80\xdb\x36\x98\x5e\x03\xf2\x66\x4d\x53\x7f\x9a\x5e\x4f\x0c\xdb\x5d\x85\x22\xa3\x36\xf6\x2a\x74" +
	"\xbc\xbb\x6a\x52\x36\xf9\x4f\x7a\x9c\x18\xc8\x43\xee\xfa\x9b\x76\xbe\x7a\x15\x38\xde\x0c\x3f\x42\x7d\xef\xea\xb0" +
	"\xab\x77\x40\xdb\x28\xa2\x9b\xb4\x2c\x5a\xdd\x15\x99\x28\x3d\x98\x8a\x67\x47\x04\x26\x7e\x8c\x02\x64\x47\xe6\x1a" +
	"\xa3\xa0\x62\x27\x26\x9c\x6e\x78\x71\x48\xb7\xe6\x48\x98\x8e\x4e\x49\x1c\x8b\x47\x43\x3d\x71\xe3\x49\x8f\x26\x75" +
	"\xe0\x59\xaa\x3a\x3d\xf7\x3e\x6f\x15\x2d\x1f\xb0\x56\x7b\x4b\x1c\xb6\xef\xae\x16\x5e\x9b\xa7\x48\xba\x91\x8f\x2e" +
	"\x05\x6d\x61\x2a\x1a\xd4\xef\x01\x2a\xd4\xde\x30\x1d\xda\xdd\x56\x4f\x8f\xf6\x62\x6a\x2b\x23\x4a\xf8\x94\x1d\xd2" +
	"\xb8\x04\x14\x1a\x21\x76\xb1\x1d\xc1\xc2\xf1\xcc\x06\xad\xac\xec\x9e\xc9\x0b\xd8\x82\x05\x7a\x3c\xd9\x21\xbf\xe4" +
	"\x8e\xd1\xf8\x68\x83\x55\x39\xaa\x85\xd6\xfb\xc4\x86\xfc\x52\x0b\x86\xa4\xfb\x24\xbd\x56\x26\x74\x85\xad\xc7\x56" +
	"\x5b\x3a\x33\xb8\x83\x23\x64\x9e\xaa\xb6\xd5\x7b\x72\x8c\x61\x0a\xe6\xe6\xb2\x67\x08\xf5\x5a\xc7\xd6\x80\x0a\x54" +
	"\x75\x77\x48\x0c\xc2\xa8\xb1\x11\xb9\x56\x5b\x75\x99\x95\x50\xd7\xe5\x15\x06\xbd\xa8\xd2\x41\x55\xa5\xa5\xcb\x3a" +
	"\xd1\x9f\x66\xd6\x1b\x55\xf8\x34\x7d\xff\x7d\x25\x1d\x56\x9e\x78\x31\x23\xd7\x1d\x84\xd4\x6b\x81\x0f\x80\x75\x27" +
	"\xec\x2e\xf0\x57\x4b\xf8\xb2\x6e\xe2\x8d\x07\xcf\xb0\x7d\xe4\xe2\xd0\xc6\x66\xf9\xa3\x5f\x61\xf1\xb2\x6c\x0f\xee" +
	"\xd4\xfe\x0c\x94\x4e\xbd\x5d\x3c\x8f\xe0\x77\xdf\xf1\x7a\xbd\x53\xfe\xa8\x07\xcc\xd4\x00\x8e\x61\x53\x57\xb1\x26" +
	"\x97\xc5\x30\xad\x94\xb0\xf9\x3d\x31\xe4\x27\xd3\xe0\x93\xa1\xaf\x3a\xda\xe5\xa0\xeb\x40\xff\x5d\xdb\x15\x84\xe6" +
	"\xeb\x84\x17\x94\xc2\x36\x4b\x39\x61\x69\x09\xfc\x45\xfc\xd8\xe7\x09\xe5\x14\x76\x05\xc9\x5f\x20\x7b\xae\xb5\x1d" +
	"\x0a\x9a\xc8\x68\xda\xd7\xc9\x02\x45\x38\x70\x90\xeb\x7c\xc3\x33\x78\x70\xf0\x57\x05\x49\xc6\x6d\x87\xbd\xff\x5c" +
	"\x68\x87\xb0\xca\x40\x76\x8a\x32\xbf\xbd\x6c\x3d\x6e\x2e\xdf\x73\x82\xfc\xa6\x2d\x7d\xbd\x72\x2b\xb4\x49\xfa\x48" +
	"\xff\xa9\x0c\x55\xbb\xb7\xda\x54\xa9\x58\x03\x74\xb3\x4d\x0e\x25\x17\xfa\x25\x3f\x38\xb5\xbb\x46\xa6\x31\xf0\xd8" +
	"\x19\xf7\x6f\x35\x69\xda\x5e\x6c\xfd\xb8\xfd\x4b\x4e\xd8\x4c\xfe\x09\x00\x00\xff\xff\xa7\x3a\x3a\xc1\x20\x0f\x00" +
	"\x00")

func bindataDbBasesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbBasesql,
		"db/base.sql",
	)
}



func bindataDbBasesql() (*asset, error) {
	bytes, err := bindataDbBasesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/base.sql",
		size: 3872,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573478514, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbIndicessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5b\x6f\xab\x46\x10\x7e\xe7\x57\xcc\x5b\x80\x72\x7c\x89\xaa\xaa" +
	"\xca\x51\x2b\x11\x87\x24\x54\x36\xce\x31\xb8\xe7\xe4\xc9\xda\xe0\x4d\xb2\x2a\x37\xb1\xeb\xc4\xfe\xf7\xd5\x5e\xb8" +
	"\x1a\x8c\x13\x9d\xf6\xc9\x0a\xcc\xce\x7c\xf3\xcd\xb7\xc3\x4c\xc6\xe6\xe2\x40\x92\x2d\xde\x43\x8e\xb3\x1c\x53\x9c" +
	"\x30\x0a\xf2\x01\x3b\x64\x98\x42\xfa\x0c\x94\x21\x46\x28\x23\x21\x35\xc7\xda\x6c\xe5\xd8\x81\x03\xc1\xe3\x83\x03" +
	"\xef\x97\xe9\x28\x56\xc7\x6d\x1f\x1c\x6f\xbd\x00\xfd\x22\x4c\x93\xe7\x88\x84\xec\xc2\x82\x8b\x2c\x8d\x70\x4c\xc2" +
	"\x0b\xe3\xab\xa6\x8d\xcd\x1b\xfc\x4c\x12\xcc\xdd\x93\x10\xd3\xa7\xc3\x01\xa3\x1c\x18\x7a\x8a\x30\xb0\x57\xc4\xe0" +
	"\x39\xcd\x01\xa3\xf0\x15\x32\xf4\x82\x21\x4c\x13\x86\x48\x42\x81\x9b\x45\x07\x28\xfc\x02\x4a\xb6\xa0\x1c\x57\xd8" +
	"\xcc\xb1\x36\x36\x5d\xe9\x19\xe2\x1d\x65\xb0\x15\xd1\xb6\x40\x12\x40\xf0\x8e\x0e\x32\x46\x4c\x28\x25\xc9\x0b\xe0" +
	"\x84\xe5\x04\x53\x08\xd3\x3c\xc7\x21\x8b\x0e\xdc\x1e\xed\x22\x06\x2c\x85\xc9\x68\x52\x4b\xd5\xbe\x9e\xcb\x5c\x9b" +
	"\xc0\x6d\x5f\xfb\xee\x06\xf7\x80\x72\x46\xc2\x08\xef\x28\xce\x69\x1a\x12\x14\x29\x33\x4e\x89\xae\x01\x00\xf8\xce" +
	"\xdc\x99\x05\x70\xe3\xfa\x81\xeb\xcd\x02\xf0\xd6\xf3\xf9\xd5\x55\x9d\xbd\xb1\x89\xf7\xe0\x8f\xe0\x21\xcd\x76\x11" +
	"\xca\x09\x3b\x98\x63\x7e\x9e\xd7\xc0\x12\x74\x6c\xc8\xd6\x82\x1c\xbf\x6d\x54\x6c\xc1\x8a\x05\x3c\xea\x86\x6c\x45" +
	"\x98\xdb\xd5\x72\x21\x70\xe6\xf8\x8d\x50\x92\x26\x54\x3c\xfe\x7e\xef\xac\x9c\xc2\x10\x5c\x1f\xbc\xa5\x84\x20\xde" +
	"\xae\x3d\x77\xe9\x81\xad\xfe\x6a\x23\xad\x8a\xd9\xc4\xfb\x5f\x43\x03\xdb\xbb\x11\x2e\x09\xcd\xf1\x1b\xce\x19\xfc" +
	"\x09\x13\xcd\xb0\x80\x24\x61\x1a\x67\x11\x66\x98\x47\xfe\x00\xe7\x05\xdc\x1c\x27\x8c\x07\xb3\xfd\x0a\x7b\x0f\xde" +
	"\xde\xc2\xfe\xb5\x74\x3d\x91\x0d\xf7\xc0\x72\x8c\x61\xed\xbb\xde\x1d\xe8\xca\xa3\xd1\xcf\xac\x39\xec\x9e\xa7\xf9" +
	"\xc9\xe4\x54\x3e\x93\x13\x45\x18\x20\xf0\x2c\xe4\x43\x3e\x0c\x4b\x53\xc9\x85\xe9\x2e\x61\x1c\xc9\x31\xf8\xcd\x48" +
	"\x22\x9c\x2d\xd7\x5e\xa0\x9b\xc6\xd5\xd5\xed\x7c\x69\x07\x42\x5a\x29\x43\x11\x77\x2d\x8e\x37\x05\xc4\x48\x8c\x9f" +
	"\xd2\x5d\xb2\xa5\x56\x59\x02\x6a\xc1\x0b\x4e\x70\x8e\x18\xde\x50\xcc\xaf\xb5\xac\x44\x98\x63\xc4\x48\x9a\x88\x40" +
	"\x31\xda\xf3\x5f\x03\x36\xba\xf8\xad\x09\x50\x18\x73\x0e\xe1\x0f\xb8\x50\xc8\x4b\xc1\x8b\x1a\x1f\x32\x2c\xec\xef" +
	"\x56\xcb\xf5\x03\x5c\x3f\x2a\xf4\xfd\x6c\xd5\x4a\xf0\xc1\x04\x45\x42\x1f\x06\x67\x58\x5a\x67\x2d\x44\x80\x23\xee" +
	"\x5b\x7a\xe9\xc5\xf9\x8e\xc9\xcb\x6b\x0d\x5f\xbf\x64\x4a\x62\x3a\x5c\x4b\x41\x93\x1c\x6f\x15\xfc\x33\x10\xb6\xb0" +
	"\x65\xd3\x91\xc4\x22\xee\x6d\xd9\x24\x2d\xc8\x2e\x6b\x2f\x8a\x66\xd5\x41\xa8\xbc\xb3\x27\x28\xca\xa6\x9d\x97\x78" +
	"\xf0\xd8\x65\xeb\x98\x44\xdc\x50\xd7\x74\x24\xca\xc7\xdb\x5b\xd1\xda\xb2\xcb\x51\x51\xd2\xbe\x0e\xcb\xad\xce\x2c" +
	"\x3d\xf8\x19\xca\x29\x76\xbe\x55\x9f\x0f\xe7\xdb\xac\xf8\x5c\xb6\xa9\x55\x8c\xd6\x48\x2c\x20\x54\x1a\x00\xc4\xbf" +
	"\x8c\xdd\xda\x84\xac\x60\xe5\x74\x49\x7b\x18\x2d\x95\xd2\x8f\x83\xa7\x54\xa5\xd2\xdf\xf6\xda\x1e\x2a\xb0\xa7\x08" +
	"\xe1\xde\x7b\xc9\x69\xf9\x3e\x56\xd4\x90\xe7\xc7\xce\x66\x57\x36\x8b\xce\x3e\xd6\x6e\x5e\x31\x39\xd1\xb2\x4e\xb7" +
	"\x1b\x0e\xe1\xa7\xe8\xc0\x9e\x3b\xfe\xcc\xd1\x45\x29\xad\x89\x21\xaf\x57\x43\x10\x32\x53\x21\x85\x5a\xb1\x54\xc9" +
	"\x2b\xbc\xc2\xa0\x04\x71\xf4\x7a\xee\xdc\x06\xd2\xe6\xa4\x88\x6b\xe7\xba\x31\x1b\xed\xcc\xef\x9c\x4f\x65\x2e\xed" +
	"\xd6\x0b\x99\xb9\x01\xcb\xbf\x9d\x15\xe8\x0f\xf6\x2a\x70\x03\x4e\xfc\xf5\x63\xe3\xa0\x18\x79\x96\xab\x1b\x67\xc5" +
	"\xdf\x94\x23\xea\x8d\xe3\xcf\xba\x2e\x51\xbf\x6e\xe6\xce\xff\x01\xbd\x32\x6e\x02\xaf\x1c\x0e\xa1\xae\xb0\x71\xd4" +
	"\xbb\x84\xeb\xb8\x6c\x02\xc5\x54\x3e\xd0\xcd\xf5\x02\xc6\xb8\x16\xd7\x8c\xd2\x17\xbd\xf9\x61\x1c\xab\x44\x3a\xbf" +
	"\x44\x27\x9b\x4f\xa5\xbc\x1e\x5e\xcf\xd0\x53\xe9\xe2\x78\x96\x69\xa8\xd8\xb0\x40\x8b\x49\x12\xa3\xbd\x32\xe4\x94" +
	"\x50\x86\xe2\xac\x9f\x87\x85\xeb\xe9\xc5\xc4\x2c\xf2\x2b\xae\x3c\x2c\xec\x1f\xad\x37\xb2\x09\x58\xc2\x4f\x71\xae" +
	"\x0c\x51\x1c\x2e\x1f\x54\x1e\x5a\x36\x68\x5f\x3e\x38\x35\x92\x97\xed\x59\x61\xe5\xe9\xf1\x83\xb2\x00\xc7\x9d\xad" +
	"\x59\x5a\xf1\xc6\xf9\x11\xac\xec\x59\xa0\xe3\x2c\x0d\x5f\x65\x1c\x7d\xee\xd8\x7e\xa0\xd7\x41\x58\x31\xfa\x07\x6f" +
	"\xb6\x88\x61\xc1\xe3\x2f\x53\x6b\x6a\x4d\x0d\xe3\xcb\x9d\xd8\xba\xb8\x71\x3d\xab\xa6\xb1\x34\x35\x8c\xf1\xef\xbf" +
	"\xfd\x3a\x99\x8c\x26\x5d\x0a\xe9\x2e\xc9\xcf\x68\xb6\x5d\x73\x76\x57\xce\xf5\x6c\xbf\xd4\xb3\xf9\x0c\x70\x5e\x87" +
	"\xa1\x6b\x56\xae\xdb\x43\xcb\x9a\xc4\x8c\x32\x35\x3b\x99\xec\xbd\x36\x45\xb5\xf1\xf4\xdc\x71\xa4\xc6\x80\xba\x38" +
	"\xd8\x7b\xcf\x34\x64\x58\x5a\xdf\x12\x63\x0e\x8c\x97\xd5\x7d\x96\xe3\x54\x39\x4b\x0d\x6e\xb1\x66\x63\xcf\x2a\x80" +
	"\xf7\xdb\x0f\xd3\xd7\xbf\x3c\xf2\xb6\x2b\x59\xe8\x6c\x57\x6d\xf2\xce\xdb\x20\x6b\x77\x51\x45\x2e\x07\x6a\x4d\xfe" +
	"\x77\xe6\x9c\x8d\xb0\x5c\x5e\xd4\xee\xd6\xb1\xc3\xd2\xa3\xf0\xfc\xd6\x1f\x32\xb1\xdf\x15\x5b\xfd\xa9\x0d\xa2\x06" +
	"\xb0\x8c\x69\xd5\x97\xa4\xae\x69\x5c\xa6\x50\x8f\xcc\x9f\x18\xb2\x89\x0c\xcd\x48\x67\x2e\x78\x9d\x85\x3e\x0b\x7c" +
	"\x35\x52\x7d\x10\xbf\x66\x68\x03\x71\xe4\x0a\x98\x91\xb0\x1d\xb3\x58\xc4\xd4\xf0\x25\x55\xa4\xa6\x2f\x25\xa9\x46" +
	"\x11\x57\xee\xdd\x7d\x50\x81\x29\xab\xa5\x30\x75\xdc\x7a\xe3\xeb\xbf\x01\x00\x00\xff\xff\x74\x41\x4b\xa6\xf2\x13" +
	"\x00\x00")

func bindataDbIndicessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbIndicessql,
		"db/indices.sql",
	)
}



func bindataDbIndicessql() (*asset, error) {
	bytes, err := bindataDbIndicessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/indices.sql",
		size: 5106,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573478514, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbQuerypagessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\x6f\x9b\x30\x14\x7d\xe7\x57\xdc\xb7\x42\xc7\xda\xb5\x8f\x9d" +
	"\xf6\xc0\x12\xb7\x65\xca\x42\x05\x74\x55\x55\x55\xc8\x05\x97\xba\x4b\x0c\x33\x8e\xd2\xfc\xfb\xe9\xda\x10\x3e\x02" +
	"\x55\x35\x69\x6f\x09\xf7\xdc\xeb\x73\xee\x39\x98\xd3\xe3\x39\x7b\xe6\x82\x81\x7a\x61\xf0\x67\xc3\xe4\x0e\x36\x15" +
	"\xcb\xe0\xb9\x90\xc0\xde\xca\x42\x2a\x2e\x72\xe0\xe2\xb9\x90\x6b\xaa\x78\x21\x2a\x5d\xa2\x52\xf1\x74\xc5\x2a\x17" +
	"\x54\x51\xf2\xb4\x02\x2a\x32\xc8\x57\xc5\x13\x5d\x1d\x9f\x5a\x77\x7e\x7c\xdd\x14\xbc\x08\x6c\x0b\x00\x20\x22\x0b" +
	"\x32\x8b\xa1\xa4\x39\x4b\x78\x86\xcf\x35\x22\xe1\x99\x2e\x5f\x86\xc1\x4f\xd8\x9e\x17\x27\x08\xa8\xf4\xa3\xbb\x6b" +
	"\x12\x12\xd3\xa0\x76\x25\x83\x6f\x70\xa4\x5b\x8e\x2e\x2e\x10\xb8\xde\x61\x09\x2b\x96\xe3\x42\xc9\x64\xca\x84\xe2" +
	"\x2b\x96\x71\x91\xf1\x94\x1d\x1e\x8d\x50\xb7\x21\xe0\xc2\x8e\x51\xe9\xc2\x96\xf1\xfc\x45\xb9\x1a\x57\xcf\x48\x24" +
	"\x15\xbf\x6d\x07\x82\x5f\x24\x84\x2d\x8e\x69\x87\x1b\xa0\x9d\x31\x51\xb1\x01\xee\x33\x9c\x9d\x7c\x71\x4e\xaf\x42" +
	"\xe2\xc5\x24\x8a\xed\x31\x50\x06\x9f\x60\xbc\xf7\xdc\x71\xcf\x1c\x3c\xcb\x94\x87\x27\x0e\xa6\x78\x91\x7e\x32\xc9" +
	"\x46\x7d\x88\x8e\x9a\xe0\xa3\x7a\x84\x8c\x4d\xe3\xb4\xc6\x36\xa6\xb6\x6d\xd7\x7b\x32\xd4\xb6\x93\x02\x2c\xf4\x73" +
	"\x50\xbb\xf8\xb4\x43\x9f\x4c\x1e\xfc\xe5\x3c\xb8\x33\x8e\xd8\x37\x5e\x18\xfb\xb1\x1f\x2c\xe1\xfb\x7d\xed\xac\x31" +
	"\xb4\xcd\x4b\x10\xce\x49\x88\x65\xe3\xb1\x63\x28\x98\x53\xff\xa1\x1f\xe6\x24\x9a\xd5\x43\xd4\x47\x49\xb8\xfb\x94" +
	"\x4f\xd0\x51\x1f\xe6\x33\x3d\xca\x30\x1b\x7f\x0b\x68\x9e\x4f\xbd\x83\xae\x39\x87\x4a\x49\x77\x09\xcd\x73\x7b\xe6" +
	"\x61\x4e\xea\x37\xa2\x1b\xfa\xc3\x50\x9a\xf8\x1d\xba\x3c\x95\x96\x8e\xcd\x46\x98\x8e\x16\xfa\x8c\x7f\xd6\x8c\x56" +
	"\x1b\xc9\xd6\x4c\x28\xa7\x15\x87\x15\xf0\xa2\x99\x86\x76\x20\x55\x1b\x94\x43\xbd\xba\x76\x15\x06\xb7\x37\x38\xa2" +
	"\xa7\x74\x72\x41\xef\xee\x68\xb8\x1e\x63\x45\x97\xce\x5e\x0a\x17\x19\x7b\xc3\xfa\x79\xbf\xbc\x57\xa4\x63\xd5\x28" +
	"\xaa\x14\x7d\x5f\x0a\xcd\xf3\x51\x35\x96\xd3\x90\x94\xc5\x36\x51\x45\xf2\x5a\x15\xa2\x66\xa7\x1b\xcc\xcf\xbd\x02" +
	"\x93\x20\xae\x56\xcd\xed\x47\x9f\x2a\x25\x69\x8a\x1e\x53\x89\xaf\x6f\x8b\x6a\xaf\xc8\x54\x32\x7d\xe1\xf7\xcc\xc2" +
	"\x4a\x1d\xdc\x59\xe0\x2d\x48\x34\x23\xb6\xd6\x61\x52\xf4\xf0\x68\xae\xe6\xf1\x45\x3c\x3c\x1e\xb4\x16\x29\xa7\xab" +
	"\xd7\xcd\xba\x1c\x0c\xc0\x73\x1e\x1e\x1d\xab\x77\x30\x7e\x85\x1c\xc7\xea\x7f\x29\xa0\x84\x05\xb9\x8c\xe1\x47\xe0" +
	"\x2f\x61\xe1\xc5\x24\xf4\x16\x7d\x27\x87\x06\xfe\xb7\xbd\xb4\x3e\x0b\x53\xe9\xc8\x6b\x7d\xde\x08\xc1\x2a\x65\x97" +
	"\xba\x27\xe9\x40\x1c\xd0\xdf\xcd\x20\x9c\xfb\x4b\x6f\xe1\xc7\xf7\x90\xb4\x5c\x71\xa2\x96\xd8\x0a\xbf\x8d\xfc\xe5" +
	"\x15\x34\x10\xdc\x55\x02\xc1\x12\xe2\xf0\x96\x58\x1a\x3a\x99\xf5\x61\xe7\x9e\x77\x4d\x8a\x67\x5f\xad\xbf\x01\x00" +
	"\x00\xff\xff\x0b\xa8\x77\x41\x19\x08\x00\x00")

func bindataDbQuerypagessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbQuerypagessql,
		"db/query-pages.sql",
	)
}



func bindataDbQuerypagessql() (*asset, error) {
	bytes, err := bindataDbQuerypagessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/query-pages.sql",
		size: 2073,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573478514, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbQuerytoptenbyyearsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xd1\x6e\xda\x30\x14\x7d\xe7\x2b\xee\x5b\x43\x15\x51\xba\xc7\x4e" +
	"\x3c\x64\x90\xb5\x99\xd2\x30\x25\x41\xd5\x9e\x22\x43\x6e\x53\x6f\x60\x67\xb6\x11\xe4\xef\x27\x5f\x07\xd3\x14\x34" +
	"\xf5\x29\xf1\xb9\xc7\x3e\xd7\xe7\x1e\xdf\xdd\x2e\xf0\x95\x0b\x04\xf3\x86\xf0\x77\x8f\xaa\x83\xbd\xc6\x1a\x5e\xa5" +
	"\x02\x3c\xb6\x52\x19\x2e\x1a\x60\xca\xf0\xcd\x16\x35\x74\xc8\xb6\x1d\x18\xd9\x82\x41\xa1\x6f\xef\x46\x2f\x49\xf9" +
	"\x64\x51\xa5\x21\x2a\x20\x18\x01\x00\x14\x71\x1a\xcf\x4b\x42\x69\xfd\x3d\x5f\x3e\xc3\xe1\x8b\x9c\x18\xbe\xc3\xb5" +
	"\xdc\x8b\x5a\x87\xd0\xa0\x40\xc5\x0c\x56\x1a\x15\x47\x1d\xec\xb8\xb0\x1b\xc2\x1d\x3b\xda\xef\x18\xaa\x80\xbe\x74" +
	"\xc2\x2a\x4b\x96\x19\x44\x69\xfa\xfe\xfc\xa9\x55\x24\x91\x71\x68\x5b\xe2\x9b\xcb\x1e\x5a\xd6\x60\xc5\x6b\x8b\x13" +
	"\xa3\xe2\xf5\xb0\x25\x4b\xd0\x04\xbd\x3c\xc5\x79\xec\x36\x98\xae\x45\x98\xc1\x0d\x6d\xb9\x79\x78\xb0\xc4\x5d\x67" +
	"\x4b\xb6\x42\x72\x5d\x8b\x97\x6a\x8b\xa4\x28\x93\x6c\x5e\x52\x79\xa8\xc3\x45\xcd\x37\xa8\xd7\x9d\x77\xe5\x8a\x5e" +
	"\x6f\xf3\x75\x45\xd9\xde\x4f\x2f\x14\xab\x09\x99\x06\xd5\xc4\xf2\x42\x60\x4a\xb1\xae\x62\x4d\x13\xcc\xa3\xa2\x0c" +
	"\x82\x76\xd2\x3b\x10\x42\xff\x6b\xb8\xd9\xa2\x5f\xb1\xb5\x36\x8a\x6d\x8c\x03\x14\x0a\x33\xe0\xd2\x99\xfd\x62\xa3" +
	"\x90\x19\x2e\x85\x9b\x4e\x54\x78\xfb\xc6\xb0\xcc\x17\x71\x0e\xdf\x7e\xc1\x01\x79\xf3\x66\x60\x11\x17\x73\xa2\x90" +
	"\xbb\x70\x76\x82\x82\x72\x1a\x56\xef\x62\x48\xe5\x34\x2a\xe3\x3c\x4a\xfb\xdb\x7d\x48\x91\x63\x86\xe0\xef\xe2\x74" +
	"\x3c\xf5\x3f\x2e\x9f\x9d\xb6\x10\xcc\x5c\x0b\xe4\x1a\x44\xd9\xc2\xa7\x02\x66\x7d\x57\x13\x8f\x50\xd9\x4d\x86\x1a" +
	"\x25\x8b\x09\xfd\xdc\xd0\x4e\xf2\xd7\xdc\xf1\xc5\x34\x79\x4e\x4a\xb8\x9f\x12\x30\x86\x0a\x7e\x2c\x93\xec\x9c\x4c" +
	"\x68\x61\x55\x24\xd9\x23\x04\xfd\xdd\xdd\x7b\x78\xcc\x97\xab\x9f\xf6\xc8\xe1\xfc\x6d\x4e\xec\xfa\xb7\x96\xe2\xea" +
	"\x73\x0c\x41\xc9\x43\x65\x64\x65\x19\x7d\x44\x1c\xfe\x31\x38\x67\xc3\xb5\x1f\x36\x17\x35\x1e\x15\x13\x7f\xb8\x68" +
	"\xde\x0d\xdd\x52\xc7\x9e\xc4\x84\xd8\xb3\x2d\x51\x51\x9f\xc8\x54\xb5\x9a\xe7\x28\x50\x9e\x87\x97\x71\x6f\xf9\xd4" +
	"\x2f\xd1\x7d\x6a\x68\xe5\x25\x2d\xf2\x75\xf4\x2f\x00\x00\xff\xff\xb3\xc1\x4a\xa4\xbc\x04\x00\x00")

func bindataDbQuerytoptenbyyearsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbQuerytoptenbyyearsql,
		"db/query-toptenbyyear.sql",
	)
}



func bindataDbQuerytoptenbyyearsql() (*asset, error) {
	bytes, err := bindataDbQuerytoptenbyyearsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/query-toptenbyyear.sql",
		size: 1212,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573478514, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbTestsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\xb1\x0e\xc3\x20\x0c\x44\xf7\x7c\x85\x67\xa4\x96\x0f\xe8\xda\xb1" +
	"\x63\xc7\x2c\xa6\x1c\x91\xa5\x08\x08\x76\x07\xfe\xbe\xa2\x49\x96\x6c\x3e\xf9\xdd\x3d\xef\x5e\x85\x23\x45\x36\x0e" +
	"\xac\x70\x7e\x9a\x85\xc6\x75\xd7\x6d\x7d\x8c\x20\x39\xca\x07\xba\xe7\xc9\xbb\xa7\x28\x87\x15\x54\x79\x41\xa3\x54" +
	"\x1a\x19\xd4\x24\x2f\xb4\x7d\xd1\x04\x3a\x36\xaa\xc2\x0e\xa2\xa4\x34\x6a\x6f\xa8\x9d\x04\x95\x7c\x31\x5a\xaf\xa7" +
	"\x62\x96\x3f\xd6\x6f\x56\xaa\x21\x87\xde\xc1\xed\xf2\x1a\xcb\x3b\xfe\x0b\x00\x00\xff\xff\xc4\x27\x5b\x29\xc0\x00" +
	"\x00\x00")

func bindataDbTestsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbTestsql,
		"db/test.sql",
	)
}



func bindataDbTestsql() (*asset, error) {
	bytes, err := bindataDbTestsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/test.sql",
		size: 192,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573478514, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbTypessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x4f\x6f\xda\x4c\x10\xc6\xef\xfe\x14\x73\x04\x64\xbd\xe8\x45\xea" +
	"\x89\x93\x8b\x9d\x96\xca\x05\x64\xdc\x28\x34\x8a\xa2\xc5\x0c\xb0\x62\x99\x75\x77\xd7\xa1\xfe\xf6\xd5\xae\x49\xf0" +
	"\x1f\x40\x2d\x27\xc0\xcf\x3c\xbf\x99\x67\x06\x86\x83\x07\x85\x08\x3a\x67\x19\x82\xe6\x94\x21\x28\x7c\xe3\x9a\x4b" +
	"\xd2\x60\xd8\x5a\x20\x9c\xb8\x10\x40\xd2\xc0\x1a\x81\x51\x79\x94\x0a\xa1\xd0\xb8\x2d\x04\x30\xda\x00\xa7\x0d\xfe" +
	"\x46\x5d\xc9\x0c\x3b\x20\x30\x10\xd2\x80\xdc\x56\xae\x83\xa1\x17\x26\xf3\x05\xa4\xc1\xe7\x38\x82\xd3\x48\xfe\xf7" +
	"\x01\x18\x7b\xde\x70\x10\xe2\x96\x13\x7e\xd8\xc8\x37\x54\xf6\x03\xcf\x50\xaf\xcb\x12\x99\x1a\x0c\xbd\x49\x12\x05" +
	"\x69\x04\xd3\x59\x18\x3d\xc1\x7c\xe6\x5c\x1a\x1a\xe8\xe5\x6c\x87\xaf\x7c\xd3\x1f\x7b\xc3\xc1\x0f\x8d\x1b\x58\x97" +
	"\x10\x07\x69\x94\x04\x31\x7c\x9b\x4f\x67\xc0\x09\x7e\x15\xa8\x38\xea\xbf\x33\x3c\x21\xdf\xed\x0d\x84\xd1\x72\xe2" +
	"\x83\xfd\xca\x07\x23\x73\x9e\xbd\xf2\x8d\x0f\xa6\xcc\xd1\x07\xc7\xb4\x6f\xfb\x63\x2f\x98\x05\xf1\xea\x67\xd4\x75" +
	"\x1a\x7b\x76\xca\x74\x8f\xb0\x95\x42\xc8\x13\xa7\x9d\x2b\xd7\xc0\xaa\x20\x5d\xab\x66\x8f\xce\x4e\xbb\x4c\x8d\xcc" +
	"\x0d\xd2\xb9\x93\x4b\xd7\xef\x6d\xa7\xab\x45\x05\xb2\xcf\x8f\xc8\x74\xa1\xf0\x88\x64\x20\x58\x42\xcf\x03\x00\x78" +
	"\x64\xa2\x40\x68\xbf\x1e\xe2\x79\x90\xfa\x4e\xb0\x40\x95\x21\x19\x2e\xf0\x86\x20\x44\xd2\xd8\x51\xd5\x04\x09\xa3" +
	"\x43\x87\x00\xd3\x59\x1a\x7d\x89\x92\x4a\x92\xda\xbc\xee\x79\x38\x41\x87\xd4\x16\x74\x48\x0d\xc8\xca\x66\x74\xab" +
	"\x0f\xaf\x3f\xee\xa6\xe6\x4e\xcd\xae\x60\x54\xcb\x4e\x5f\xc2\x9b\xda\xe7\x69\x99\x37\x03\xb4\x95\xc7\xd2\xd5\x56" +
	"\xe0\xef\xf5\xe2\x86\xac\xb5\x96\xe7\x97\xab\x6d\xd8\x75\xd7\xa0\x61\x77\x88\x76\x9c\xdc\x88\xee\x52\x1f\x83\x64" +
	"\xf2\x35\x48\x7a\x9f\xfe\x1f\xf5\x2b\x5d\xb0\xd6\x46\xb1\xcc\x34\x75\x69\xf4\xf4\xbe\x7b\xa6\x90\x4c\x1b\xd8\x44" +
	"\xb5\xa7\xaf\x45\x60\xfb\x76\xf7\xef\x94\x13\x85\xcc\x70\x49\xcd\x35\xdc\x8b\xdf\xd6\x73\xda\x4a\xb8\x0c\xbf\xb0" +
	"\x51\x5c\xc5\x59\x71\x05\x5a\x1a\x56\xcf\xb9\xa6\xb9\xbe\xcf\xe7\x97\xaa\x2e\xe6\x74\xb8\x5e\x67\xbd\x6f\xec\xc6" +
	"\x59\x2a\x46\x07\xfb\x6b\x6d\x1e\xc6\x8d\x54\x6a\x87\x91\x9c\xeb\xfe\x89\xc8\x88\x0a\x26\xce\xff\x82\x1d\xf2\xdd" +
	"\x23\xf7\x2f\xcd\xa1\x6e\xc1\xdb\xc3\x54\xf4\x3f\x01\x00\x00\xff\xff\x59\xc2\x56\xa2\xf6\x05\x00\x00")

func bindataDbTypessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbTypessql,
		"db/types.sql",
	)
}



func bindataDbTypessql() (*asset, error) {
	bytes, err := bindataDbTypessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/types.sql",
		size: 1526,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1573478514, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesDatahtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\x4f\x6b\xc2\x40\x10\xc5\xef\xfb\x29\x06\xcf\xb2\x87\x5e\x83\x87" +
	"\x88\xa6\x48\xa9\x2d\x2a\xf5\x50\x3c\x0c\xc9\x10\x17\x77\xc7\xb0\x59\xdb\xc0\x30\xdf\xbd\x24\xa1\x34\x78\x28\x94" +
	"\xde\xde\x1f\xde\x8f\xf7\x81\x11\xb6\xeb\xc7\x7c\x97\x6f\x9f\xf6\xb0\x80\x77\x91\x88\x5c\x13\xd8\x1d\xf2\xc5\x71" +
	"\xdd\xaa\x1a\x00\xe8\x8b\x21\x52\x9d\x8b\xd8\x57\x8a\x25\x71\x72\x9e\x46\xbf\x22\x6e\xe9\x3e\xdc\x70\x45\xdd\x28" +
	"\xf3\x70\xe5\x7a\x94\xfb\x06\x79\x54\x6f\xe8\x6f\xa4\x7a\x9a\x8b\x10\x57\xaa\xe6\x94\x19\x23\xf2\xe9\xd2\x19\xec" +
	"\xba\x4b\x14\x19\x7d\xe1\xc8\x57\xad\x3d\x5e\x63\xf5\xf0\x52\x96\xb7\xa8\xda\x7f\xfe\xf1\xb0\x00\x91\x44\xa1\xf1" +
	"\x98\x08\x66\x01\x1b\x7b\x4e\xc1\xcf\xc0\xaa\x66\xdf\xe4\xdf\xa8\x87\x62\xb3\x2a\x26\xd4\xc1\xff\x87\xba\xbc\x3f" +
	"\xbb\xfc\xe3\x5b\xd3\x8f\x82\xe3\xa3\xbb\xb8\x61\x60\x9f\x1d\x1f\x5c\xa0\x36\x61\x68\x54\xe7\x10\xb0\x9b\x94\xd8" +
	"\x4d\xca\xec\x2b\x00\x00\xff\xff\x6a\x85\xa7\x59\xd3\x01\x00\x00")

func bindataTemplatesDatahtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesDatahtml,
		"templates/data.html",
	)
}



func bindataTemplatesDatahtml() (*asset, error) {
	bytes, err := bindataTemplatesDatahtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/data.html",
		size: 467,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1569247484, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesHomepagedatahtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x29\x4e\x2e\xca\x2c\x28\xb1\xe3\x2a\x4b\x2c\x52\xf0\x73\x75\x77\xf4" +
	"\x73\xf4\x75\x0d\x56\xb0\x55\x88\x56\x0a\x4a\xcc\xcb\x56\xd2\x51\x0a\x48\x2d\x4a\x4e\xcd\x2b\xc9\xcc\x49\x55\xd2" +
	"\x51\x72\x49\xcd\x2b\x4e\x45\x11\xf1\xcc\x4b\x49\xad\x50\xd2\x51\x72\xcc\xcd\xcf\x4b\x57\xd2\x51\x0a\x2e\x48\xcc" +
	"\x53\xd2\x51\x0a\x4b\xcc\x29\x4d\x55\x8a\xb5\xe6\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x49\x2c\x49" +
	"\xd4\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xb2\xd1\x87\x5a\x0e\x08\x00\x00\xff\xff\xe9\x90\x21\xee\x85\x00\x00" +
	"\x00")

func bindataTemplatesHomepagedatahtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesHomepagedatahtml,
		"templates/homepagedata.html",
	)
}



func bindataTemplatesHomepagedatahtml() (*asset, error) {
	bytes, err := bindataTemplatesHomepagedatahtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/homepagedata.html",
		size: 133,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1559233540, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMaphtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4b\x2d\x57\xf0\x4d\x2c\xd0\x88\xae\xae\x56\x28\x4a\xcc\x4b\x4f\x55" +
	"\x50\xc9\x4e\xad\xd4\x51\x50\x29\x4b\xcc\x29\x4d\x55\xb0\xb2\x55\xd0\x53\xa8\xad\x05\xc9\x82\xc4\x15\x6a\x6b\x75" +
	"\x14\x40\x6c\x88\x6c\x6d\x6d\xac\x4e\x75\xb5\x42\x6a\x5e\x0a\x88\xa9\x09\x08\x00\x00\xff\xff\xc0\x42\x2e\x5c\x4c" +
	"\x00\x00\x00")

func bindataTemplatesMaphtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMaphtml,
		"templates/map.html",
	)
}



func bindataTemplatesMaphtml() (*asset, error) {
	bytes, err := bindataTemplatesMaphtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/map.html",
		size: 76,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1569246946, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesPagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\xf8\xf1\x1c\x8b\x5f\x6e\x45\x20" +
	"\x19\x28\xd2\xf6\x14\xb4\x41\x91\x20\xe8\x91\x21\xd7\xd2\x3a\xfc\x2b\xb9\xb1\x6a\x08\x7c\xf7\x82\x92\x7f\x54\xa7" +
	"\x68\x4e\x06\x77\x3d\x33\xbb\x3b\x03\x35\xff\x7d\xfa\x76\xfb\xf0\xe3\xfe\x33\xeb\xc9\x9a\x75\xd5\x94\x1f\x66\xa4" +
	"\xeb\x5a\x3e\x8e\xf5\x9d\x74\x5d\xce\xbc\xd4\x41\x6a\x86\x7a\xaa\xde\xcb\x0e\xea\x87\x7d\x80\x9c\x39\xd3\x92\xe4" +
	"\x8a\x7c\x40\xb5\xe8\x95\xe7\x8c\xb3\x40\x92\xa9\x5e\xc6\x04\xd4\xf2\xc7\x87\x2f\xab\x0f\x5c\x1c\xeb\x4e\x5a\x68" +
	"\xf9\x0e\x61\x08\x3e\x12\x67\xca\x3b\x02\x47\x2d\x1f\x50\x53\xdf\x6a\xd8\xa1\x82\xd5\xf4\xb8\x62\xe8\x90\x50\x9a" +
	"\x55\x52\xd2\x40\x7b\x5d\xff\x7f\xc5\x2c\x3a\xb4\xaf\xf6\x5c\x3a\x53\x87\xe8\x03\x44\xda\xb7\xdc\x77\x37\x68\x65" +
	"\x07\x0b\xfa\x71\xac\x9f\x9e\x9e\x1e\xbf\xdf\xe5\x2c\xa6\x5e\x12\xc6\x77\xbe\x0e\xae\x2b\x0c\x55\x43\x48\x06\xd6" +
	"\xe3\x88\x1b\x06\x3f\xd9\x79\x61\xc6\xa7\x4d\x79\xce\xb7\x92\xa0\xf3\x71\x7f\xc3\xc6\x11\x9c\xce\xf9\xb4\x7b\x81" +
	"\xe6\xcc\x56\xec\x2b\x74\x32\x80\x46\xd9\x88\x99\xaf\xaa\x1a\x83\xee\x85\x45\x30\x2d\x4f\xb4\x37\x90\x7a\x00\x62" +
	"\x21\xc2\x06\x48\xf5\x9c\xd1\x3e\x40\xcb\x09\x7e\x91\x50\x29\x71\xd6\x47\xd8\xfc\x39\xae\x4a\x49\x28\x1f\xa1\x2e" +
	"\xfd\xc2\x98\x54\xc4\x40\x4b\xe4\x56\xee\xe4\x5c\xe5\x2c\x45\xd5\xf2\x9e\x28\xa4\x1b\x21\x86\x61\xa8\xbb\x44\x92" +
	"\x50\xd5\xca\x5b\x51\x6c\xa1\xb2\xba\xd4\x10\xeb\x6d\xe2\xeb\x46\xcc\xc0\xf5\x3b\xbc\xeb\x6a\x1c\x09\x6c\x30\x92" +
	"\x80\xf1\x12\x81\xba\x04\x87\xb3\x3a\xe7\xea\x4c\x52\x55\xcd\xb3\xd7\xfb\x32\xa6\xc6\xdd\x14\x1f\x0b\xee\xb5\xe8" +
	"\x68\xdc\x2d\xcb\x07\x6b\xa6\x8d\xfa\x6b\xf6\xb7\xcb\xcb\x48\xa8\x0c\xf0\x9c\xe7\xcc\xcd\xe1\x39\x9e\xfd\xd1\x69" +
	"\x88\xa9\x5c\x46\x1f\x1c\xe0\x07\x63\xd6\x17\xce\x34\xa2\xbf\x5e\x4a\xa3\xa3\xe8\xcf\x23\xfd\x5b\xfa\x0c\x1b\xf0" +
	"\x05\x27\x77\x57\x9b\xe8\x2d\x3f\xa9\x7c\x7c\x4e\x14\xa5\xa2\x22\x74\xb1\xa4\x83\x4e\x0e\x32\xea\x74\xa1\x56\xdf" +
	"\xa1\x7b\x49\x4b\xf2\xe4\x55\x89\xfa\xf6\xd5\x86\x74\x71\xec\x20\x3b\x30\x98\xe8\x78\xf0\x13\x76\x62\x3c\x85\x11" +
	"\x4c\x82\x25\xe3\x1b\xed\xc3\x3f\xab\xea\xcd\x98\x11\x92\x37\x3b\x88\xfc\xbd\x14\xcc\xe9\x5a\xa6\x73\x9b\xc4\x11" +
	"\x7d\x99\xa7\xa3\x8a\x98\x12\xd1\x88\xf9\x7b\xf3\x3b\x00\x00\xff\xff\x16\x51\xd3\x45\x80\x04\x00\x00")

func bindataTemplatesPagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesPagehtml,
		"templates/page.html",
	)
}



func bindataTemplatesPagehtml() (*asset, error) {
	bytes, err := bindataTemplatesPagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/page.html",
		size: 1152,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1573478443, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesPagelisthtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xc1\xad\x83\x30\x0c\x80\xe1\x3b\x53\x58\xb9\x03\x0b\x84\x48\x6f" +
	"\x07\xde\x00\x6e\x6c\xb5\x56\xd3\x80\x62\x4b\x3d\x44\xde\xbd\x82\xd2\xdb\x7f\xf8\xf5\x45\x2a\x90\x0b\xaa\x2e\xa1" +
	"\x88\xda\xc8\xd5\x9a\xb0\x86\xd4\x7b\xc3\x7a\x67\x98\xdc\x07\x00\x80\x48\x06\x84\x86\xa3\x6d\xbb\xe4\x25\xf4\x3e" +
	"\xad\x47\xb9\x1f\xef\xb4\x8a\x15\x76\x8f\x33\x59\xba\x7e\xfa\xc1\x6f\x79\xca\xce\x24\x38\xea\x63\x6b\x16\xbe\x4e" +
	"\xc5\x17\x9f\xcc\x7f\x25\x6e\x9a\xb7\xc6\x74\x29\xa7\xf8\x77\x53\x6b\x98\xed\x44\x29\xf5\xce\x95\xdc\x87\x38\x53" +
	"\x49\xc3\x27\x00\x00\xff\xff\x4f\xdb\xa9\x56\xb7\x00\x00\x00")

func bindataTemplatesPagelisthtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesPagelisthtml,
		"templates/pagelist.html",
	)
}



func bindataTemplatesPagelisthtml() (*asset, error) {
	bytes, err := bindataTemplatesPagelisthtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/pagelist.html",
		size: 183,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1559233540, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesToptenhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\x4f\x6f\xdb\x3c\x0c\xc6\xef\xfe\x14\x7a\x75\xae\xad\x37\xb7\x61" +
	"\x90\x73\xd9\x1f\x60\x40\xb1\x0d\x5d\x8a\x60\x47\x4e\x62\x6c\xa6\xb2\x24\x48\xac\xdb\xc0\xf0\x77\x1f\x64\xb7\x8d" +
	"\xbb\x93\xe8\x87\x8f\x7e\x14\x69\xea\xff\x3e\xff\xf8\x74\xf8\xfd\xf3\x8b\xe8\x79\x70\xfb\x4a\x97\x43\x38\xf0\x5d" +
	"\x2b\xa7\xa9\xb9\x05\xdf\xcd\xb3\x2c\x3a\x82\x15\x64\x5b\xc9\x21\x32\x7a\x29\x2c\x30\xd4\x7c\x89\xb8\x18\xbf\x79" +
	"\x8b\xcf\xf3\xfc\x22\x47\x4c\x14\xec\x92\xf8\x15\xc1\xbf\xe9\x1c\x22\x99\x45\x3e\x94\x68\x25\x0f\xc8\x20\x4c\x0f" +
	"\x29\x23\xb7\xf2\xfe\xf0\xb5\xfe\x20\xd5\xab\xee\x61\xc0\x56\x8e\x84\x4f\x31\x24\x96\xc2\x04\xcf\xe8\xb9\x95\x4f" +
	"\x64\xb9\x6f\x2d\x8e\x64\xb0\x5e\x3e\x6e\x04\x79\x62\x02\x57\x67\x03\x0e\xdb\x5d\xf3\xff\x8d\x18\xc8\xd3\xf0\x38" +
	"\x5c\xa5\x2b\x3a\xa6\x10\x31\xf1\xa5\x95\xa1\xfb\x48\x03\x74\xb8\xc1\x4f\x53\x73\x3c\x1e\xef\xef\x6e\xe7\x59\x2d" +
	"\xb9\xac\x5c\xe8\x42\x13\x7d\x57\x08\x95\x66\x62\x87\xfb\xd2\x49\x09\xe6\x59\xd4\xe2\x3b\x76\x10\xd1\x12\x68\xb5" +
	"\x66\xab\x4a\x3b\xf2\x0f\x22\xa1\x6b\x65\xe6\x8b\xc3\xdc\x23\xb2\x88\x09\x4f\xc8\xa6\x97\x62\x9d\x1f\xe3\x33\x2b" +
	"\x93\xb3\x14\x7d\xc2\xd3\xfb\xe2\x26\x67\x65\x42\xc2\xa6\xe4\x0b\xf1\x4f\xb0\x97\x72\x5a\x1a\x97\xff\x31\xa0\x7f" +
	"\x94\x7b\xad\x2c\x8d\x5b\xf9\xa5\x93\xe5\x4a\xbf\xdb\x3c\x54\xab\x7e\xb7\x35\x92\xe7\x14\xde\x00\xd3\xc4\x38\x44" +
	"\x07\x8c\x42\x46\xe8\xd0\x51\xe6\xa6\xec\x84\x14\xcd\x1d\xf8\x07\x2a\xfb\x50\x55\xfa\x14\x02\x63\x5a\x00\x6b\x58" +
	"\x08\x6b\x54\xe0\xff\xbe\x26\x61\x0e\x6e\x2c\xae\x4a\x67\x93\x28\xf2\xb6\xf5\x33\x8c\xb0\xaa\x52\xe4\x64\xde\x0f" +
	"\xe0\x9c\xd5\xeb\xed\xe6\x9c\x4b\x99\xd5\xba\xbf\x56\x51\xcb\x4c\xb4\x5a\x57\xf8\x6f\x00\x00\x00\xff\xff\x4d\x60" +
	"\x6f\x0a\xd3\x02\x00\x00")

func bindataTemplatesToptenhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesToptenhtml,
		"templates/topten.html",
	)
}



func bindataTemplatesToptenhtml() (*asset, error) {
	bytes, err := bindataTemplatesToptenhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/topten.html",
		size: 723,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1573478447, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"db/base.sql":                 bindataDbBasesql,
	"db/indices.sql":              bindataDbIndicessql,
	"db/query-pages.sql":          bindataDbQuerypagessql,
	"db/query-toptenbyyear.sql":   bindataDbQuerytoptenbyyearsql,
	"db/test.sql":                 bindataDbTestsql,
	"db/types.sql":                bindataDbTypessql,
	"templates/data.html":         bindataTemplatesDatahtml,
	"templates/homepagedata.html": bindataTemplatesHomepagedatahtml,
	"templates/map.html":          bindataTemplatesMaphtml,
	"templates/page.html":         bindataTemplatesPagehtml,
	"templates/pagelist.html":     bindataTemplatesPagelisthtml,
	"templates/topten.html":       bindataTemplatesToptenhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"db": {Func: nil, Children: map[string]*bintree{
		"base.sql": {Func: bindataDbBasesql, Children: map[string]*bintree{}},
		"indices.sql": {Func: bindataDbIndicessql, Children: map[string]*bintree{}},
		"query-pages.sql": {Func: bindataDbQuerypagessql, Children: map[string]*bintree{}},
		"query-toptenbyyear.sql": {Func: bindataDbQuerytoptenbyyearsql, Children: map[string]*bintree{}},
		"test.sql": {Func: bindataDbTestsql, Children: map[string]*bintree{}},
		"types.sql": {Func: bindataDbTypessql, Children: map[string]*bintree{}},
	}},
	"templates": {Func: nil, Children: map[string]*bintree{
		"data.html": {Func: bindataTemplatesDatahtml, Children: map[string]*bintree{}},
		"homepagedata.html": {Func: bindataTemplatesHomepagedatahtml, Children: map[string]*bintree{}},
		"map.html": {Func: bindataTemplatesMaphtml, Children: map[string]*bintree{}},
		"page.html": {Func: bindataTemplatesPagehtml, Children: map[string]*bintree{}},
		"pagelist.html": {Func: bindataTemplatesPagelisthtml, Children: map[string]*bintree{}},
		"topten.html": {Func: bindataTemplatesToptenhtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
