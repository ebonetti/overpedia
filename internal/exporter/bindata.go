// Code generated by go-bindata. DO NOT EDIT.
// sources:
// db/base.sql
// db/indices.sql
// db/query-pages.sql
// db/query-toptenbyyear.sql
// db/test.sql
// db/types.sql
// templates/data.html
// templates/page.html
// templates/pagelist.html
// templates/topten.html

package exporter


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDbBasesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x5d\x6f\xf2\x36\x14\xbe\xcf\xaf\x38\xbb\x22\x41\x19\x2d\x48\x93" +
	"\xa6\xf1\x72\xe1\x06\xd3\x66\x0b\x09\x4a\x42\x5b\xde\xe9\x15\x4a\x89\xdb\xba\x6f\x20\x51\x6c\xfa\xa1\x69\xff\x7d" +
	"\xb2\xf3\x65\x48\xa0\x95\x26\x71\x01\xf6\x73\x3e\xfc\x9c\xe7\x1c\x9b\xa9\xef\x2d\x20\xb0\x6e\xf0\x1c\x81\x3d\x03" +
	"\x7c\x6f\x07\x61\x00\x6f\xa3\x14\x2c\x14\x58\x68\x8a\xc7\x9a\xe5\x63\x14\xe2\x0a\xf4\x36\x4a\xc7\x5a\xb5\x66\x79" +
	"\x8e\x83\x42\xdb\x73\xc5\xf2\x60\xfb\xb1\x49\x93\x24\xe2\x04\x74\xc7\xb3\x90\x83\x61\x02\x3d\xb2\x5b\x2f\x83\xc1" +
	"\x32\x9c\xfd\xfa\x7b\xcf\x18\x6b\xda\x45\x7f\x11\x3d\x11\x06\x39\xc9\x72\xc2\xc8\x8e\x33\x78\xa3\x3f\x69\x46\x62" +
	"\x1a\x41\x94\x73\xba\x49\x08\x83\x68\x17\x43\xfa\x4a\xf2\x62\x99\xa7\x19\xdd\xb0\xfe\x45\x15\x36\x44\x57\x0e\x96" +
	"\x21\x33\xe9\x4b\xd7\x00\x00\xc4\xf7\x35\x8d\xc1\x76\x43\x7c\x8d\x7d\x70\xbd\x10\xdc\xa5\xe3\x98\xcd\x2e\xa7\x3c" +
	"\x21\x70\x8b\x7c\xeb\x06\xf9\xfa\x6f\xc3\x91\x51\x1e\x01\x1f\x1e\x40\x31\x89\x1e\x18\xcf\xa3\x0d\x87\x10\xdf\x87" +
	"\xe7\xd1\x39\xd9\xf1\x4f\x12\x60\xe9\x86\x46\xc9\xcb\x7e\x9b\xb1\x0a\xf6\xf7\x8f\x1a\x08\x53\x3c\x43\x4b\x27\x84" +
	"\xde\x3f\xff\xf6\x14\xab\x98\x64\xfc\xb9\xe5\xb6\x46\x8f\x14\xe8\x26\x27\x11\xa7\xe9\xee\x83\x44\x79\x65\xa1\x15" +
	"\xbc\xfb\xe4\x95\x32\x9a\xee\xce\x73\x0f\x24\xa6\x9c\x41\x17\xd9\x79\xed\xe0\x2b\x84\xe7\xe4\x75\xcd\x48\x4e\xa3" +
	"\xe4\x24\x64\xcf\x48\xae\x38\x50\x17\xd9\x43\xca\xe1\xca\xf3\x1c\x8c\xdc\x0e\xc7\x9b\xe7\x28\x7f\x23\xf4\xe9\x99" +
	"\xc3\xcc\xf1\x50\x78\x02\x12\xd3\xc7\xc7\x93\x80\x9c\xbc\x92\x9c\x8f\x8e\x73\x6c\x00\x9c\x6e\x09\xe3\xd1\x36\x83" +
	"\xd0\x9e\xe3\x20\x44\xf3\x45\x87\x9b\x16\xd3\x2d\xde\xd4\xa2\x7f\x59\xaa\x5d\x4a\x19\x5e\xfe\x10\x11\x04\x46\xbb" +
	"\xe8\x3b\x69\x14\xd3\xdd\x13\xc4\x11\x8f\x06\x83\x41\xff\x42\xb3\xdd\x00\xfb\xa1\x80\x7b\x4d\x77\xe8\x65\x30\xb3" +
	"\x51\xa8\xa9\xc8\xca\x80\x5b\xe4\x2c\x71\x00\xfa\xa5\x09\xe2\x63\x8c\x2f\xfa\xd3\xfd\x76\xfb\x21\x41\xa2\x1c\x31" +
	"\x3c\xa6\x39\x3c\x25\xe9\x43\x94\x00\xe3\x11\xa7\x8c\x97\xfd\xe8\x2d\x56\x1d\x91\x9a\x5e\x33\x0f\x7a\xc8\xac\x33" +
	"\x30\x60\xe6\x7b\x73\xf8\xa3\x27\x0d\x1f\x69\x42\xb2\x88\x3f\xf7\xe0\xce\x0e\x6f\xc0\x0a\x6e\xe1\x06\xa3\x29\xf6" +
	"\xc7\x4d\x84\x5a\x7c\x75\x14\x55\x60\x66\x29\x25\xb3\x51\x8f\x79\xa8\x13\x53\xd5\x84\xd9\x25\x00\xf3\xa0\xe6\x75" +
	"\x86\x75\xe0\x33\x59\x2e\x17\xd3\x6a\x2a\x34\x4d\x12\xe0\xb0\x11\xc8\x44\xcc\xd3\x10\x74\x7c\x1f\xfa\xc8\x0a\xf5" +
	"\x15\x46\x7e\x11\x21\x8e\x38\x59\xf3\x7c\xbf\xdb\xe8\x3d\x01\xed\x99\x87\xe2\x33\x0c\x40\x41\x25\x01\xa1\x2f\xe4" +
	"\x84\xd8\x3f\x9e\x81\x52\x14\x68\x3a\x85\x85\x6f\xcf\x91\xbf\x82\xbf\xf0\x0a\x2a\xaa\x0c\xb3\xde\x9e\x79\x3e\xb6" +
	"\xaf\xdd\x6a\xbb\x2e\x87\x8f\x67\xd8\xc7\xae\x85\x03\x75\xae\x56\xf6\x07\x27\x2c\xf6\xc4\xe9\x94\xe1\x34\x81\x21" +
	"\xdc\xdd\x60\x1f\x37\x2a\x9b\x5c\x02\x72\xa7\x95\xd6\x7f\x99\x5c\x36\xbd\x61\xbb\x53\x7c\x0f\xe5\xb5\xa1\xc6\x92" +
	"\xce\x4c\x65\x58\xcb\x86\x72\x96\x81\x38\x72\x03\x5e\x06\xb6\x7b\x2d\x51\x6c\x9d\xfd\x24\x1f\x63\x0d\xb9\xc8\x59" +
	"\x7d\x57\x12\xec\x20\xaa\x2e\xcd\x59\xb2\x0e\x74\x75\x9a\xb9\x82\x98\x4f\x78\x3b\x6f\xdd\xa9\xc2\x96\x4b\x65\xea" +
	"\x1e\xd8\x1d\xa7\x28\x0f\x6b\x79\xce\x72\xee\x36\xb2\x13\x55\xaa\x86\xcb\x09\xfa\x15\xff\x65\x13\x49\x91\x29\x7c" +
	"\xd6\x88\xae\xe1\x26\x74\xfa\x90\xee\x77\x31\x03\x14\x68\x01\x76\xb0\x15\xc2\xdc\x76\xf5\x2a\x07\x29\xdf\x2d\x95" +
	"\x37\x92\x09\x73\x74\x7f\xb4\x13\xbd\xcb\x1d\xad\xb2\x51\x3a\xb0\x30\xac\x17\x1a\xeb\x23\x4c\xf4\x5e\x2f\x68\xb2" +
	"\xa7\x5a\x59\x57\x53\x44\x9d\xaa\x65\x7f\x2b\x4b\x5f\xeb\xf0\x46\xff\xfa\xf1\xa4\x36\x5b\x77\xb0\x01\x13\xd0\xd7" +
	"\x83\x16\x10\xca\xb5\x03\xac\x06\x45\x52\xc5\x25\x21\x73\x10\x20\x15\x23\x58\x2e\xf7\x4b\xae\x6b\x51\x94\x1c\x0b" +
	"\x40\xcb\xb5\x34\xa8\xa9\x69\x6a\x66\x1e\x4d\x90\xaa\x85\xeb\xbe\xfe\x06\x23\x90\x3b\x4b\x57\x3c\xf3\x90\xe3\x74" +
	"\xc6\x6e\x15\xfc\x93\x0c\x0e\x5b\xf1\xda\xf7\x96\x0b\xb8\x5a\x55\xfe\x8c\xce\x18\x96\x87\x1c\x1c\x58\x58\x67\x2f" +
	"\x6d\x3e\xc5\x8b\xa9\x09\x7c\xc0\xf4\x99\x54\xda\xec\x3a\x78\x16\xc2\x9f\x9e\xed\xb6\xe4\xc2\x5e\xca\xb1\xa3\x2b" +
	"\x59\x1a\xb0\x2e\x39\x2b\xeb\x49\x63\x98\x14\x83\xa9\xfa\x3d\xd6\xe4\x1b\xbb\xf3\x39\x30\x3e\x37\xcc\xd5\x86\x6e" +
	"\xbf\xed\xba\x3b\x7b\x8e\x42\xec\xdb\xc8\xb1\xbf\xe3\x29\xdc\xda\xf8\xae\x76\xca\x73\x42\x94\x0e\x6d\x3f\x0a\x9a" +
	"\xce\x29\x72\x90\x05\xaf\xe1\xa3\x41\x63\x31\x1c\x9c\x32\x82\x6c\xd8\x90\x57\xae\x8c\xc4\xa0\x91\x36\xd2\x7e\x22" +
	"\x5d\x95\xe6\xc7\x23\xa9\x4a\x74\xbd\x49\xf6\x8c\x8b\x61\xb4\x8b\xc9\xbb\x7a\x51\xc8\x63\x74\x3c\x69\x8c\x71\xeb" +
	"\x9a\x90\xd0\xe6\xa6\x68\xfb\x6d\xdf\x1a\x02\xd3\xe4\x54\xf3\x27\xff\x7f\x14\xc7\x51\x18\x1c\x0d\xfa\x66\x4d\x8c" +
	"\xec\x96\x6f\x23\xa1\x40\xca\x24\x5e\x11\x6c\x75\xfa\xe2\x49\x54\xdb\x14\x17\x9c\x30\x91\x06\xeb\xc7\x7d\x92\x14" +
	"\x10\x2d\x49\xdf\x48\xae\xb3\x2c\xa1\x7c\x9d\x45\x39\xd7\xbf\xe6\xcb\xec\x41\xcf\x1c\x1a\x8a\x4f\xb9\xfe\xbf\xab" +
	"\xf4\x5f\x00\x00\x00\xff\xff\x3a\x82\x70\xa9\x26\x0e\x00\x00")

func bindataDbBasesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbBasesql,
		"db/base.sql",
	)
}



func bindataDbBasesql() (*asset, error) {
	bytes, err := bindataDbBasesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/base.sql",
		size: 3622,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1529267239, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbIndicessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4d\x73\xa3\x38\x10\xbd\xf3\x2b\xfa\x16\xf0\x52\xb1\x67\x8e\xc9" +
	"\x89\xb1\x99\x84\x2d\x02\x29\xc0\x35\x9b\xbd\xb8\x08\x74\x12\x55\xd9\xc2\x2b\xc9\xc9\xf8\xdf\x6f\x49\xc2\x20\xf3" +
	"\xe1\x8f\x39\xb9\x2c\x50\xf7\x7b\xaf\x5f\x37\x3d\x9d\x24\xb8\x65\xc8\x91\x0a\x0e\x84\x96\xf8\x1b\xc4\x7e\x8b\x1c" +
	"\xc4\x47\x2e\x80\x8b\x5c\x10\x2e\x48\xc1\xa1\xa2\xb0\xcd\xdf\x91\x83\x9d\x33\x41\x8a\x35\x72\xc8\x69\x09\xa2\xda" +
	"\x92\x82\x3b\x93\xa9\x65\xcd\x13\xdf\xcb\x7c\xc8\x5e\x9e\x7d\xf8\xfa\x5e\xdd\x6e\xf6\x3a\x9e\x97\x82\x1f\x2d\x9f" +
	"\xc0\xbe\x29\x2a\xfa\xb6\x26\x85\xb8\x71\xe1\x66\x5b\xad\x71\x43\x8a\x1b\xe7\xde\xb2\xa6\x93\x40\xbd\xb9\xd9\x71" +
	"\x01\x25\xbe\x11\x8a\x25\x10\x0a\x39\x7c\xe5\x7b\x8d\x24\x87\x0d\xe1\x9c\xd0\x77\x40\x2a\xd8\x1e\x8a\x8a\x31\x2c" +
	"\xc4\x7a\x2f\xdf\xcf\x77\x6b\x01\xa2\x82\xd9\xed\x6c\x32\x6d\x70\x78\x3f\x42\x0d\x84\xd0\x92\x14\xc8\x5f\xf7\x7b" +
	"\xcc\x19\x78\xa9\xf5\x2b\xc8\x1e\x81\xd0\xa2\xda\x6c\xd7\x28\xb0\x26\x84\x25\x11\xbc\xa8\x76\x54\x48\xc8\xb6\x05" +
	"\x00\x90\xfa\xa1\x3f\xcf\x14\xf3\x15\x29\x5d\x60\xf8\xb9\xaa\xa3\x80\xfc\x75\x61\x1e\x2f\xa3\xcc\x9e\x38\xf2\xa4" +
	"\x8d\x60\x9c\xff\x0c\xc2\xcc\x4f\xc0\xfe\xf5\xe8\x27\xbe\x0a\xc0\xf0\x13\x99\xf8\xce\x91\x91\x7c\x4d\x4a\x08\x52" +
	"\x88\xe2\x0c\xa2\x65\x18\xaa\x30\xfa\xb9\x8a\xa3\x40\xfc\x4c\xe2\x27\x45\x84\xe1\x27\xe1\xa4\xa2\x5c\x1d\x3f\x24" +
	"\xf1\xf2\x19\x7e\xbc\xf4\xd1\x59\x8e\x0b\x57\x90\x9a\xb5\x6c\xd2\xe5\x93\xdd\x5e\xe9\x91\x92\x8f\x0d\x74\xe3\x68" +
	"\x4f\x88\x3b\x88\x5d\x1d\x2e\xa3\x20\x8e\xc0\x0b\x43\x13\xe5\xe4\xb2\xa0\x8e\xab\x42\x9d\xa4\xcb\x90\x8a\x15\x29" +
	"\xe5\x93\x86\xfb\x20\xed\xbb\xbb\xb7\x75\x95\x8b\x73\xec\x8d\xd7\x06\x45\xe8\x97\xe0\xef\x38\x88\x54\x25\x65\x7e" +
	"\xc1\x10\x61\x99\x06\xd1\x03\xd8\x35\x1e\xa7\x2b\x4e\x0d\x59\xe3\x1c\x17\xa9\x43\xa7\xcd\x38\xc2\xc4\x80\x7b\x35" +
	"\x09\xcb\x71\xad\x5e\x25\x0e\x9d\xdd\x53\x7d\x11\xa4\x59\x10\xcd\x33\x68\x9b\xff\xee\xae\x33\x1d\xe4\xc0\x71\x4f" +
	"\xf5\xd8\x8e\x23\x3b\x98\x64\xa4\x19\x2e\xea\x2e\xf0\xa2\xc5\x21\x98\x79\x6e\xf4\xcb\x79\x22\x1d\xb4\xb3\x13\x30" +
	"\x47\x65\xfa\x33\xbb\x37\xb7\x6b\xb3\x8f\x62\x3d\x40\x1c\x37\xbc\x9e\x4e\x0d\xa7\x1a\xb9\xe9\xe8\x2f\x24\xef\x1f" +
	"\x7d\x1f\x34\x39\xaf\xb4\x72\x07\xd2\x39\x43\x77\x44\x36\x41\x5f\x8f\x75\x18\x89\x11\x5a\x0a\x5a\x7f\x24\x7a\x5a" +
	"\x1a\x05\x31\x35\x3f\x86\x2e\xff\x98\x97\x9a\xaf\xdb\x39\xaf\x6b\x62\xdf\x66\xb3\xd9\xc4\xe8\xbe\x49\x18\x3f\xd8" +
	"\xdf\xfe\xd2\xb4\x9c\xe9\xf1\x50\xeb\x92\xed\x8c\x3d\x55\x97\x23\x77\x1c\xd7\x45\xe7\x74\x64\x17\xeb\x0f\xfd\x25" +
	"\x46\x2f\x71\x2b\x3e\x4c\x67\x6a\xad\x8e\x3c\xc0\x7b\x06\x70\x5c\x15\x43\xfe\x3f\xf4\xf3\xa0\x4d\x6b\x5c\x86\x39" +
	"\xda\xa4\x2e\xac\x6e\x1b\xab\x34\xbd\xaf\xf3\xa9\xf4\x9a\x84\x99\x5a\xdd\x73\x5c\x75\x43\xbe\x2c\xc8\x06\x5f\xab" +
	"\x1d\x2d\xb9\x0b\xef\x48\x91\xe5\x02\x57\x72\x3c\x20\xd7\x17\x0a\x86\xb9\x20\x15\x55\xc5\xd8\xe4\xbf\x95\x40\xb0" +
	"\xb2\xb5\x50\x97\x7a\x74\x04\x7e\x33\x1f\xae\x66\x60\x39\xd6\x99\x4c\xca\x50\x72\x01\xeb\x65\x3d\x34\x8c\x17\xfa" +
	"\xe9\xdc\xb7\xb5\x67\xdc\x99\x63\x18\xe8\xa8\x92\x49\xf0\xf0\x98\xb5\x70\x9a\x92\xd5\xa8\x06\x5c\x2b\xf7\xb6\x45" +
	"\x12\x3f\x1b\x7b\x56\x33\x91\xef\x9b\x65\x30\x88\x16\xfe\x3f\x10\x47\x03\x7b\x58\xe3\x13\xb5\x00\x2e\x39\x96\xf0" +
	"\xba\x87\xd0\xcb\xfc\xc4\x0b\x35\x14\x42\xe1\xbf\x9d\x2a\x54\xbb\xd6\x9d\x8a\xa8\x99\xc1\xc2\x4f\xe7\x07\x09\x5a" +
	"\x79\xba\x76\x76\xee\x2d\x2f\xf2\xc2\x97\x7f\x07\x96\xc4\xfb\xff\x03\x00\x00\xff\xff\x16\x2a\xa8\xdf\x17\x0b\x00" +
	"\x00")

func bindataDbIndicessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbIndicessql,
		"db/indices.sql",
	)
}



func bindataDbIndicessql() (*asset, error) {
	bytes, err := bindataDbIndicessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/indices.sql",
		size: 2839,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1529261621, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbQuerypagessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x5f\x6f\x9b\x3e\x14\x7d\xe7\x53\xdc\x47\xe8\x8f\x5f\xbb\xf6\xb1" +
	"\xd3\x1e\x58\xe2\xb6\x4c\x59\xa8\x80\xae\xaa\xaa\x0a\xb9\xe0\x52\x77\xc4\x20\x7c\xa3\x34\xdf\x7e\xb2\xcd\xbf\x10" +
	"\xa8\xba\xbd\x25\xbe\xff\xce\xb9\xe7\xd8\x9c\x9d\x70\xf1\x52\xd6\x1b\x8a\xbc\x14\x12\x5e\xca\x1a\x68\x8d\x3c\x2d" +
	"\x98\x74\x01\xcb\x8a\xa7\x12\xa8\xc8\x20\x2f\xca\x67\x5a\x9c\x9c\x59\xf7\x7e\x7c\xd3\x06\xbc\x08\x6c\x0b\x00\x20" +
	"\x22\x2b\xb2\x88\xa1\xa2\x39\x4b\x78\xa6\xce\x75\x46\xc2\x33\x1d\xbe\x0a\x83\x9f\xb0\xbb\x28\x4f\x55\x82\xd4\x47" +
	"\xf7\x37\x24\x24\xa6\x20\x63\x15\xbe\xc2\x37\x38\xb7\x1c\x17\x2a\x56\xa7\x4c\x20\x2f\x58\xc6\x45\xc6\x53\x76\x3c" +
	"\x05\xf7\x15\x73\xdb\x59\x2e\xec\x19\xad\x5d\xd8\x31\x9e\xbf\xa2\xab\xf3\x9a\x1e\x49\x4d\xc5\x6f\xdb\x81\xe0\x17" +
	"\x09\x61\xa7\xda\xf4\xcd\x4d\xa2\x9d\x31\x21\xd9\x28\xef\x7f\x38\x3f\xfd\xe2\x9c\x5d\x87\xc4\x8b\x49\x14\xdb\x53" +
	"\x49\x19\xfc\x07\xd3\xb5\x17\x8e\x7b\xee\xa8\x59\x26\x3c\x9e\x38\xea\xe2\x45\xfa\x64\x16\x0d\x7e\x0a\x0e\xce\xe0" +
	"\xc1\x03\x40\x46\x91\x69\x58\x53\x1b\xc3\x5d\x5f\xf5\x11\x0d\xdc\x0d\x04\x57\x81\x43\xc9\x1b\x15\x9f\xf7\x4a\x27" +
	"\x23\xbd\xbf\x5e\x06\xf7\x46\x11\xfb\xd6\x0b\x63\x3f\xf6\x83\x35\x7c\x7f\x68\x94\x35\x82\x0e\xac\x11\x84\x4b\x12" +
	"\xaa\xb8\x11\xd9\x31\x18\xcc\xd8\x7f\x69\x00\x4b\x12\x2d\x9a\x2e\xf8\x69\x18\x6e\xe7\xe9\x19\x40\xf8\x79\x44\xf3" +
	"\xbd\x0c\xb6\xe9\x9b\x40\xf3\x7c\xee\xca\xb9\x66\x10\xad\x6b\xba\x4f\x68\x9e\xdb\x0b\x4f\x79\xa5\xb9\x15\x43\xe3" +
	"\x1f\x1b\xd3\x58\xf0\x58\xe9\x39\xc7\x0c\xa4\x36\xcc\xb4\xbd\x94\xd6\xea\xcf\x86\x51\xb9\xad\xd9\x86\x09\x74\x7a" +
	"\x72\x2a\x02\x5e\xb4\xd0\xa9\x83\x14\xd9\x9b\xe5\x98\xaf\x8e\x5d\x87\xc1\xdd\xad\x6a\x71\xc0\x74\x76\x41\x1f\xee" +
	"\x68\xbc\x1e\x23\xce\x10\x4e\x47\x85\x8b\x8c\xbd\xab\xf8\xc5\x61\xb8\x63\xa4\x62\x1d\x23\x89\xf4\x63\x2a\x34\xcf" +
	"\x27\xd9\x58\x4e\x0b\xb2\x2e\x77\x09\x96\xc9\x9b\x2c\x45\x83\x4e\x17\x98\x9f\x3a\x1b\x39\x16\xed\xc3\x47\x9f\x25" +
	"\xd6\x34\xc5\x56\x8c\x26\xc6\xa5\xfe\xdb\x9e\xbe\x6c\x8b\x62\x58\x95\xd6\x4c\xbf\xf3\xda\x8e\xbd\x1b\x3b\xd2\x9b" +
	"\x3d\x7b\x47\x26\x32\x96\xa9\x60\x63\xeb\x45\xe0\xad\x48\xb4\x20\xb6\x26\x69\x2c\xf6\xf8\x74\x79\x39\xbf\xa5\xc7" +
	"\xa7\xa3\xd2\x32\xe5\xb4\x78\xdb\x6e\xaa\x51\x83\xcd\x5e\x4d\x7a\x7c\x72\xac\x0e\x84\x3a\x50\xdf\x24\xc7\xb1\xba" +
	"\x47\x44\xd3\xd1\x1f\x0f\xc0\x0a\x56\xe4\x2a\x86\x1f\x81\xbf\x86\x95\x17\x93\xd0\x5b\x1d\xca\x3d\x56\xf9\x2f\x97" +
	"\x37\xd8\x86\xde\x42\x2f\xb9\x30\x4e\x1f\x90\xe9\x25\xdf\x0a\xc1\x24\xda\x58\x69\xfc\xc9\x20\xc7\x01\xfd\xc9\x0c" +
	"\xc2\xa5\xbf\xf6\x56\x7e\xfc\x00\x89\xdd\x39\x52\xb5\xd4\x4c\x46\x2c\xef\x22\x7f\x7d\x0d\x6d\x9e\xda\x4e\x02\xc1" +
	"\x1a\xe2\xf0\x8e\x58\x3d\xfd\xd9\x1b\x30\x2e\xef\x5d\xdb\xe0\x33\xaf\x50\xfb\x4f\x2f\xe0\xab\xf5\x27\x00\x00\xff" +
	"\xff\x6b\x81\x46\x28\x0c\x08\x00\x00")

func bindataDbQuerypagessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbQuerypagessql,
		"db/query-pages.sql",
	)
}



func bindataDbQuerypagessql() (*asset, error) {
	bytes, err := bindataDbQuerypagessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/query-pages.sql",
		size: 2060,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1529248663, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbQuerytoptenbyyearsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x41\x6f\xa3\x3c\x10\xbd\xe7\x57\xcc\x11\x2a\x94\x26\xbd\x7e\xca" +
	"\x81\x2f\x61\x5b\x56\x14\x56\x40\x54\xed\xc9\x72\xc2\x88\x7a\x37\x31\x2c\x76\x94\xf2\xef\x57\x33\x80\xd3\x34\xd1" +
	"\x9e\x90\xdf\x3c\xcf\x3c\xbf\x37\x3c\x3e\xc8\xce\xaa\xfd\x01\xc1\x36\x2d\x58\xd4\xb0\xeb\xa1\x47\xd9\xc1\x9f\x13" +
	"\x76\xfd\xc3\xe3\xec\x2d\x2e\x5f\x18\x31\x10\x16\xe0\xcd\x00\x00\x8a\x28\x89\xd6\x25\xa3\x7c\xfe\x96\x67\xaf\x70" +
	"\x7e\x6a\xe6\x56\x1d\x71\xd7\x9c\x74\x65\x02\xa8\x51\x63\x27\x2d\x0a\x83\x9d\x42\xe3\x1d\x95\xa6\x0b\xc1\x51\x7e" +
	"\xd0\xd7\x07\xe1\xf1\x97\x3b\x6c\xd3\x38\x4b\x21\x4c\x92\xcf\xfd\x17\x34\x91\x87\xf8\x01\xe9\x53\xfb\x5b\x0d\xad" +
	"\xac\x51\xa8\x8a\x70\x66\x08\x55\x5d\x4b\x22\x82\x61\xe8\xed\x25\xca\xa3\xe1\x42\x85\xad\x7d\x87\x15\x2c\xb9\x73" +
	"\xdf\xe2\x6d\xe3\x4d\x5c\x94\x71\xba\x2e\xb9\x7c\xdd\x52\xe9\x4a\xed\xd1\xec\x7a\x67\xc0\x9d\xd6\x4f\xa3\xe8\xe5" +
	"\xe2\xa6\xb5\x98\xb3\x11\x20\xe6\xd4\x3b\x00\xd9\x75\xb2\x17\xb2\xae\xbd\x75\x58\x94\x9e\x67\x5b\x56\x2d\xac\xb2" +
	"\x07\x0c\x60\x3a\xca\x9d\xb1\x9d\xdc\x5b\x46\x86\xc7\x5e\x18\xca\x30\xe2\xd3\x30\xd2\x78\xec\xe9\x8e\x0f\x59\xbe" +
	"\x89\x72\xf8\xff\x27\x9c\x51\xd5\xef\x16\x36\x51\xb1\x66\x12\xfb\x02\x97\x87\x71\xc4\x93\xcd\xa3\x29\x01\x97\x93" +
	"\xb0\x8c\xf2\x30\x19\xdf\xf0\x25\xff\x81\x19\x4c\x39\x04\xe3\x1c\x47\xfd\x87\x69\x17\xe3\x78\xe1\x56\x83\x04\xf6" +
	"\x06\xc2\x74\xe3\xf2\x84\xd5\xa8\x6a\xee\x10\x2e\xf7\x2d\x52\x89\x84\xb2\x91\x8c\x7e\xc9\x60\x9a\x73\xcf\x06\x57" +
	"\x4c\xe2\xd7\xb8\x84\xe5\x82\x01\x1f\x04\x7c\xcf\xe2\x74\xd8\x67\x1a\x38\x38\x65\x5b\xd8\x16\x71\xfa\x0c\xde\xf8" +
	"\xd4\x61\x71\x9f\xf3\x6c\xfb\x83\x1a\x5f\x87\x4a\xe1\xd3\xf9\x97\x69\xf4\xdd\xff\x26\x80\xae\x39\x0b\xdb\x08\x62" +
	"\x8c\xb9\x0f\xf8\xcd\x36\x38\x7f\x8d\x4b\x57\xe9\x0a\x3f\x3a\xa9\x7f\x2b\x5d\x7f\xca\x98\xa8\xbe\x23\x49\xad\x4f" +
	"\xf2\xc0\x54\x34\x13\x99\xab\x34\xf3\x92\x3c\x2f\xe9\xf5\x63\x86\x9f\x6e\xd2\xcb\x74\xb7\x24\x7c\x72\x23\x09\xf9" +
	"\x6f\xf6\x37\x00\x00\xff\xff\xba\x35\x83\xe7\x47\x04\x00\x00")

func bindataDbQuerytoptenbyyearsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbQuerytoptenbyyearsql,
		"db/query-toptenbyyear.sql",
	)
}



func bindataDbQuerytoptenbyyearsql() (*asset, error) {
	bytes, err := bindataDbQuerytoptenbyyearsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/query-toptenbyyear.sql",
		size: 1095,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1525948399, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbTestsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\xbd\x09\x02\x8e\xa0\xc7\x8a" +
	"\x9e\xfa\x09\x85\x9e\x74\x59\x2b\xeb\x76\x8b\x6a\xc9\xda\x8d\x41\x7f\x5f\x9c\x34\x46\x04\x7c\xdb\xd9\x99\x37\x30" +
	"\xee\x64\x8a\x2c\x09\x86\x15\x2e\xa8\x38\x71\xa2\x82\xfa\xfd\x66\x71\x14\xb7\x5d\xee\xc5\xbd\x7f\x7c\x5a\x18\x22" +
	"\xd8\xc0\xa0\x24\x7a\x96\x25\x59\x6f\x4e\xce\x98\x50\x84\x14\x0a\x7e\x51\x85\x3c\x4d\xde\x98\xf0\x78\xc8\xa3\x0b" +
	"\x5e\xfb\x66\xb0\x37\xf3\x1c\x65\xb5\xfe\x9e\xae\xb4\xb2\x70\x9e\x0f\x89\x3d\xd0\x53\x92\x23\x63\xfa\xb9\xfe\x96" +
	"\x43\xae\x8b\xfc\x93\x26\x30\x8c\x28\xb4\x4d\xf0\x9b\xe0\xf9\xc2\x91\x64\xd7\xda\x4a\xa7\x96\x2b\xd5\x36\x68\x2e" +
	"\x4a\xf3\xd8\x1a\x61\x7d\xb2\xee\x5b\x6e\xbf\xbf\x00\x00\x00\xff\xff\xf3\xcc\x98\x6f\x4a\x01\x00\x00")

func bindataDbTestsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbTestsql,
		"db/test.sql",
	)
}



func bindataDbTestsql() (*asset, error) {
	bytes, err := bindataDbTestsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/test.sql",
		size: 330,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1525705070, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDbTypessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\xcd\x6e\xe2\x30\x10\x3e\x93\xa7\xf0\x11\x24\xb4\xd2\x22\xed\x69" +
	"\x4f\x5e\x30\x5b\x24\x0a\x28\x58\xa8\x08\x71\x70\x61\x4a\x2d\x92\x49\x64\x3b\x2a\x79\xfb\x2a\x9e\x44\x98\x10\xda" +
	"\x5b\x73\x9c\xef\xcf\x9f\xc7\x19\xc7\x82\x4b\xc1\xe4\x76\x25\xd8\xc7\x28\xfb\x55\x82\x32\x29\x28\x5b\x18\x48\x01" +
	"\x1d\xe3\x6b\xd6\x8f\x7a\x1b\x95\x14\xc0\x82\x6f\x3a\x5f\x72\x39\x8c\x7a\x2b\x30\x07\x40\xa7\x13\x68\x01\x13\x40" +
	"\x0b\x21\xda\x00\xb1\xc2\x73\xe8\xc4\x66\x8b\x6a\x2c\xb3\x5c\x1f\xba\xf8\x1e\x78\xe8\xe6\xd1\xd0\x92\xdc\xb6\xa0" +
	"\x4c\x3b\x24\x1a\xfc\x8d\xa2\x76\x5d\x8d\x47\xb8\xb8\x32\x87\x51\x50\xda\x52\x6b\xaf\x6b\xf0\xda\xa7\xd2\xa4\xa5" +
	"\x57\x0d\x3d\xe1\x39\x94\xd5\x84\xd6\x1d\xee\xf6\x9d\xd1\x69\x99\xab\x13\x5c\xa3\xa4\x76\x74\x8b\x1b\x1e\x8f\x9f" +
	"\x78\xdc\xff\xf3\x7b\x34\xa0\x10\xfe\x6a\x9d\x51\x07\xc7\x98\x14\x2f\x92\x66\xbe\x79\x37\x7d\x66\x09\xfc\xb7\x5c" +
	"\xce\x05\x5f\x3c\x48\x87\x8b\x03\x3c\xc2\xf1\x87\x4e\x41\xc3\x69\x91\x24\x5f\x68\xc6\x06\x94\xd3\x19\xd2\xfe\x66" +
	"\x0b\x29\xfe\x8b\x98\xa0\x95\x3a\xc1\x04\x72\xf7\xde\xec\xb3\x82\x7c\xb5\xbb\x6e\x55\x23\x8d\x6f\x19\xbb\xd6\xaa" +
	"\xd4\xec\x66\x87\x61\x7d\x4a\x58\x3b\x45\x3b\xac\x39\xdd\x6f\x63\xb7\x27\xf6\x5c\xe3\xd9\xde\x38\x56\x4e\x0f\x76" +
	"\xed\xad\x8c\xc2\xb3\xc6\xd3\xf5\x50\x7e\xda\xf9\xaa\x1a\xea\xf7\xce\x0a\xb1\x50\x89\x97\x82\xbd\x4b\x28\xeb\xff" +
	"\xe0\xe6\x26\x5b\xe4\xf6\xf9\x28\xe8\x33\x00\x00\xff\xff\xa6\x88\xd0\xeb\x18\x04\x00\x00")

func bindataDbTypessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbTypessql,
		"db/types.sql",
	)
}



func bindataDbTypessql() (*asset, error) {
	bytes, err := bindataDbTypessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "db/types.sql",
		size: 1048,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1529244915, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesDatahtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x51\x4b\xc3\x30\x14\x85\xdf\xf3\x2b\x2e\xf7\x49\x25\x74\xf5\x79" +
	"\xeb\xa0\x32\x19\x22\x0e\xd9\x54\x90\xd1\x87\xeb\x7a\x29\xd1\xf6\xb6\xb4\xd9\xac\x84\xfc\x77\x69\x02\x8a\xe2\x8b" +
	"\x6f\x27\x5f\xc2\xf9\x0e\x59\x0c\x87\xde\x74\x16\xec\x47\xc7\x19\x5a\x1e\xed\xec\x95\x4e\x14\x29\x2e\x95\xda\xe3" +
	"\x96\xe4\x0d\x35\xde\x73\x7f\x60\xb1\xa6\x66\xd4\xb8\x62\x19\xf8\x07\xb9\x91\x92\x47\xd4\x98\x37\xad\x54\xa8\x71" +
	"\xd7\x91\xa0\xc6\x27\xaa\x8f\x8c\x85\x3a\x51\x0f\x9b\xeb\x75\xbe\xcd\x37\xb7\x3b\xc8\x60\xef\x5c\x4f\x52\x31\x24" +
	"\x53\xbd\x91\x6a\xf0\x5e\x01\xc0\x74\x11\x90\xf7\xda\xb9\xe4\x5b\x11\xcf\xbf\xbc\x11\x06\x75\x8c\xc1\x1e\xe3\x34" +
	"\x20\xa6\xb0\xc1\xfb\x42\x3b\xc7\x52\x06\x4f\x31\x57\x61\x52\x63\x64\x5d\xb7\x2f\x54\x3f\x98\x86\x07\x4b\x4d\x07" +
	"\x19\x08\xbf\xc3\x8a\x2c\x9f\x39\x97\x5c\xb5\x47\x29\x8d\x54\xcf\x4c\xfd\x90\xdc\x19\xf9\x7a\x98\x3c\x8a\x19\xbd" +
	"\xbf\xb8\x4c\xd3\xf4\x5c\x43\x43\xe3\xbf\x9a\x68\xfc\xbb\x69\xae\x16\xb3\xf8\xfb\xcb\xcf\x00\x00\x00\xff\xff\x75" +
	"\x79\x6d\x32\x9c\x01\x00\x00")

func bindataTemplatesDatahtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesDatahtml,
		"templates/data.html",
	)
}



func bindataTemplatesDatahtml() (*asset, error) {
	bytes, err := bindataTemplatesDatahtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/data.html",
		size: 412,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1527700664, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesPagehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x8c\xcf\x5b\x9b\xbd\xa1\x2a\xa9" +
	"\x84\x16\x90\x90\x56\x80\xd0\xee\x81\x13\xf2\xda\xd3\x64\xba\x8e\x6d\xd9\xb3\x0d\x95\x95\x7f\x47\x4e\xda\x26\x2c" +
	"\x1c\x38\xb9\x7e\x9a\x79\xe3\x79\xef\x35\xf5\x9b\x0f\x5f\xef\x1e\x7e\x7c\xfb\xc8\x3a\xea\xed\xae\xaa\xcb\xc1\xac" +
	"\x72\x6d\xc3\x73\x16\xf7\xca\xb5\xe3\xc8\x0b\x0e\xca\x30\x34\x13\xfa\x70\x0a\x30\x8e\x9c\x19\x45\x6a\x43\x3e\xa0" +
	"\x9e\xe1\xf2\x6b\xae\xee\x81\x14\xd3\x9d\x8a\x09\xa8\xe1\x8f\x0f\x9f\x36\xef\xb8\xbc\xe0\x4e\xf5\xd0\xf0\x23\xc2" +
	"\x10\x7c\x24\xce\xb4\x77\x04\x8e\x1a\x3e\xa0\xa1\xae\x31\x70\x44\x0d\x9b\xe9\x72\xc3\xd0\x21\xa1\xb2\x9b\xa4\x95" +
	"\x85\xe6\x56\xbc\xbd\x61\x3d\x3a\xec\x5f\xfa\x05\x5a\xa8\x43\xf4\x01\x22\x9d\x1a\xee\xdb\x2d\xf6\xaa\x85\x15\x7d" +
	"\x47\x14\xb6\x52\x5e\xd7\x12\x0e\x5a\x15\xc0\xa0\x12\x3e\xb6\x72\x2a\x4f\xd2\xfa\xd6\x8b\xe0\xda\x42\x5a\xd5\x84" +
	"\x64\x61\x97\x33\xee\x99\xf8\x9c\xce\x1b\xde\x29\x82\xd6\xc7\xd3\x96\xe5\x0c\xce\x8c\x63\x59\xbe\x14\x8e\x23\xdb" +
	"\xb0\x2f\x17\xd6\x5a\xce\xdd\x55\x55\x5b\x74\xcf\x2c\x82\x6d\x78\xa2\x93\x85\xd4\x01\x10\x0b\x11\xf6\x40\xba\xe3" +
	"\x8c\x4e\x01\x1a\x4e\xf0\x8b\xa4\x4e\x89\xb3\x2e\xc2\xbe\xe1\x42\x94\x9b\xd4\x3e\x82\x28\xf0\x6e\xcd\xa3\x95\xf3" +
	"\x0e\xb5\xb2\x97\xea\x9c\xc5\xdd\x05\x7b\xfc\x7e\x3f\xf9\x50\xd5\x49\x47\x0c\xb4\x1e\x70\x50\x47\x35\xa3\x9c\xa5" +
	"\xa8\x67\x59\xd2\x56\xca\x61\x18\x44\x9b\x48\x11\x6a\xa1\x7d\x2f\x8b\x7d\x54\xf4\x50\x06\xa2\x38\x24\xbe\xab\xe5" +
	"\xdc\xb8\xab\xaa\x9c\x09\xfa\x60\x15\x01\xe3\x25\x06\xa2\xe4\x86\x33\x31\x8e\x55\x55\x3f\x79\x73\x2a\xc3\x0d\x1e" +
	"\xa7\xc8\xf4\xe0\x5e\x4a\xb7\xc1\xe3\x1a\x3e\x1b\x33\xbd\xb3\xbb\x65\x93\xc8\xce\xd3\x4a\xe8\x39\x61\x73\x5e\x72" +
	"\x16\x8f\xce\x40\x4c\x45\x0f\x73\x96\x9b\x9f\x0d\xd8\x2d\x0e\xd4\xb2\xbb\x5d\x4f\x41\x47\xd1\x2f\xd3\xff\x31\x65" +
	"\xa9\x1d\xf0\x19\x27\xeb\x36\xfb\xe8\x7b\x5e\x58\xdf\x3f\x25\x8a\x4a\x53\x21\x7e\xf5\xfe\x12\x9f\x41\x45\x93\x5e" +
	"\xb1\x8b\x7b\x74\xcf\x69\xcd\x9b\xbc\x2e\x19\x3e\xbc\xf4\xa1\xd8\xb8\x16\x2f\xa8\x16\x2c\x26\xba\x08\x78\xed\x9d" +
	"\x18\xaf\xf9\x9a\x8e\xaa\xfa\xeb\x0d\x11\x92\xb7\x47\x88\x25\x1c\xff\xe1\xb5\x10\xf2\x90\xe4\xa5\xe9\xe7\xf2\x57" +
	"\xf8\xd3\xde\xeb\x18\x39\x59\x59\xcb\xf9\xe3\xf0\x3b\x00\x00\xff\xff\x92\xd5\x9c\x42\x2d\x04\x00\x00")

func bindataTemplatesPagehtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesPagehtml,
		"templates/page.html",
	)
}



func bindataTemplatesPagehtml() (*asset, error) {
	bytes, err := bindataTemplatesPagehtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/page.html",
		size: 1069,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1527682586, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesPagelisthtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xc1\xad\x83\x30\x0c\x80\xe1\x3b\x53\x58\xb9\x03\x0b\x84\x48\x6f" +
	"\x07\xde\x00\x6e\x6c\xb5\x56\xd3\x80\x62\x4b\x3d\x44\xde\xbd\x82\xd2\xdb\x7f\xf8\xf5\x45\x2a\x90\x0b\xaa\x2e\xa1" +
	"\x88\xda\xc8\xd5\x9a\xb0\x86\xd4\x7b\xc3\x7a\x67\x98\xdc\x07\x00\x80\x48\x06\x84\x86\xa3\x6d\xbb\xe4\x25\xf4\x3e" +
	"\xad\x47\xb9\x1f\xef\xb4\x8a\x15\x76\x8f\x33\x59\xba\x7e\xfa\xc1\x6f\x79\xca\xce\x24\x38\xea\x63\x6b\x16\xbe\x4e" +
	"\xc5\x17\x9f\xcc\x7f\x25\x6e\x9a\xb7\xc6\x74\x29\xa7\xf8\x77\x53\x6b\x98\xed\x44\x29\xf5\xce\x95\xdc\x87\x38\x53" +
	"\x49\xc3\x27\x00\x00\xff\xff\x4f\xdb\xa9\x56\xb7\x00\x00\x00")

func bindataTemplatesPagelisthtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesPagelisthtml,
		"templates/pagelist.html",
	)
}



func bindataTemplatesPagelisthtml() (*asset, error) {
	bytes, err := bindataTemplatesPagelisthtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/pagelist.html",
		size: 183,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1489957171, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesToptenhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x93\x41\x6f\xdc\x20\x10\x85\xef\xfe\x15\x94\x73\x16\x9a\x5b\x15\xe1" +
	"\xbd\xa4\xad\x54\x29\x6a\xab\x34\x39\xf4\x54\x4d\x61\x62\xcf\x06\x03\x82\x89\x93\x95\xe5\xff\x5e\x61\x67\x77\xad" +
	"\x4a\x2b\x31\xfb\x66\xde\x87\x79\xd8\xe6\xc3\xe7\x1f\xb7\x0f\xbf\x7f\x7e\x11\x3d\x0f\x7e\xdf\x98\xba\x08\x0f\xa1" +
	"\x6b\xe5\x34\xa9\x3b\x08\xdd\x3c\xcb\xaa\x23\x38\x41\xae\x95\x1c\x13\x63\x90\xc2\x01\xc3\x8e\x8f\x09\x97\xc1\x6f" +
	"\xc1\xe1\xdb\x3c\xbf\xcb\x09\x33\x45\xb7\x34\x7e\x25\x08\x67\x9d\x63\x22\xbb\xc8\x0f\xb5\x5a\xc9\x03\x32\x08\xdb" +
	"\x43\x2e\xc8\xad\x7c\x7c\xf8\xba\xfb\x24\xf5\x49\x0f\x30\x60\x2b\x47\xc2\xd7\x14\x33\x4b\x61\x63\x60\x0c\xdc\xca" +
	"\x57\x72\xdc\xb7\x0e\x47\xb2\xb8\x5b\xfe\x5c\x09\x0a\xc4\x04\x7e\x57\x2c\x78\x6c\xaf\xd5\xc7\x2b\x31\x50\xa0\xe1" +
	"\x65\xb8\x48\x17\x74\xca\x31\x61\xe6\x63\x2b\x63\x77\x43\x03\x74\xb8\xc1\xf7\xcc\xe9\x46\xeb\x73\x04\x2a\x60\x07" +
	"\x09\x1d\x81\x8a\xb9\xd3\xcb\x78\xd1\x3e\x76\x51\xa5\xd0\x55\x68\x63\x98\xd8\xe3\xbe\x1e\xae\x16\xf3\x2c\x76\xe2" +
	"\xfb\xc9\x65\xf4\xda\x6d\x1a\xe3\x29\x3c\x8b\x8c\xbe\x95\x85\x8f\x1e\x4b\x8f\xc8\x22\x65\x7c\x42\xb6\xbd\x14\x6b" +
	"\xa4\x8c\x6f\xac\x6d\x29\x52\xf4\x19\x9f\x5a\xa9\x94\x5e\x7f\xb6\x14\x6d\x63\x46\x55\x9b\xfb\x2d\xcd\x42\x88\x81" +
	"\x2c\xf8\x93\x67\x9a\xd4\xed\x49\x7b\xbc\xbf\x5b\xd2\x6e\xcc\xdf\xe8\x8e\x75\x75\x34\x2e\xf7\x39\x60\x78\x91\x7b" +
	"\xa3\x1d\x8d\x5b\xf9\x3d\x89\xc5\xd2\x5f\x6f\x4e\x65\x74\x7f\xbd\x1d\xa4\xc0\x39\x9e\x01\xd3\xc4\x38\x24\x0f\x8c" +
	"\x42\x26\xe8\xd0\x53\x61\x55\xdf\x29\x29\xd4\x3d\x84\x67\xaa\x61\x36\x8d\x79\x8a\x91\x31\x2f\x80\xb5\xac\x84\xb5" +
	"\xaa\xf0\xff\x9f\x26\x63\x89\x7e\xac\x53\x8d\x29\x36\x53\xe2\x6d\x4e\x07\x18\x61\x55\xa5\x28\xd9\x6e\xd2\x3a\x14" +
	"\x7d\xb2\xfe\xb9\xdc\xe5\xa1\xd4\xdd\x56\xc7\xfe\xb2\x99\x5e\xa2\x31\x7a\xfd\x12\xfe\x05\x00\x00\xff\xff\xca\xbe" +
	"\x65\xb5\x1a\x03\x00\x00")

func bindataTemplatesToptenhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesToptenhtml,
		"templates/topten.html",
	)
}



func bindataTemplatesToptenhtml() (*asset, error) {
	bytes, err := bindataTemplatesToptenhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/topten.html",
		size: 794,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1526224461, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"db/base.sql":               bindataDbBasesql,
	"db/indices.sql":            bindataDbIndicessql,
	"db/query-pages.sql":        bindataDbQuerypagessql,
	"db/query-toptenbyyear.sql": bindataDbQuerytoptenbyyearsql,
	"db/test.sql":               bindataDbTestsql,
	"db/types.sql":              bindataDbTypessql,
	"templates/data.html":       bindataTemplatesDatahtml,
	"templates/page.html":       bindataTemplatesPagehtml,
	"templates/pagelist.html":   bindataTemplatesPagelisthtml,
	"templates/topten.html":     bindataTemplatesToptenhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"db": {Func: nil, Children: map[string]*bintree{
		"base.sql": {Func: bindataDbBasesql, Children: map[string]*bintree{}},
		"indices.sql": {Func: bindataDbIndicessql, Children: map[string]*bintree{}},
		"query-pages.sql": {Func: bindataDbQuerypagessql, Children: map[string]*bintree{}},
		"query-toptenbyyear.sql": {Func: bindataDbQuerytoptenbyyearsql, Children: map[string]*bintree{}},
		"test.sql": {Func: bindataDbTestsql, Children: map[string]*bintree{}},
		"types.sql": {Func: bindataDbTypessql, Children: map[string]*bintree{}},
	}},
	"templates": {Func: nil, Children: map[string]*bintree{
		"data.html": {Func: bindataTemplatesDatahtml, Children: map[string]*bintree{}},
		"page.html": {Func: bindataTemplatesPagehtml, Children: map[string]*bintree{}},
		"pagelist.html": {Func: bindataTemplatesPagelisthtml, Children: map[string]*bintree{}},
		"topten.html": {Func: bindataTemplatesToptenhtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
